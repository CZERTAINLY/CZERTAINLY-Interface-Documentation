openapi: 3.0.1
info:
  title: CZERTAINLY Authority Provider Legacy API
  description: REST API for implementations of custom Legacy Authority Provider
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Authority Management API
  description: Authority Management API
- name: Info API
  description: "Connector Information API. Each connector may have multiple functions\
    \ represented by FunctionGroupCode. For each FunctionGroupCode there is a list\
    \ of implemented end points. These endpoints must be according the specified interface,\
    \ this is validated by the core. You can also implement helper end points that\
    \ are used for callbacks and other relevant operations specific to implementation."
- name: Certificate Management API
  description: Certificate Management API
- name: End Entity Profiles API
  description: End Entity Profiles API
- name: End Entity Management API
  description: End Entity Management API
- name: Attributes API
  description: Connector Attributes API. Provides information about supported Attributes
    of the connector. Attributes are specific to implementation and gives information
    about the data that can be exchanged and properly parsed by the connector. Part
    of this API is validation of the Attributes.
- name: Health check API
  description: "Connector Health check API. Connector returns own status and in some\
    \ cases can return status of services on which it depends like database, HSM and\
    \ so on."
paths:
  /v1/authorityProvider/authorities/{uuid}/endEntityProfiles/{endEntityProfileName}/endEntities/{endEntityName}/resetPassword:
    put:
      tags:
      - End Entity Management API
      summary: Reset End Entity password
      operationId: resetPassword
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileName
        in: path
        description: End Entity Profile Name
        required: true
        schema:
          type: string
      - name: endEntityName
        in: path
        description: End Entity Name
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
        "200":
          description: End Entity password reset
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/{functionalGroup}/{kind}/attributes/validate:
    post:
      tags:
      - Attributes API
      summary: Validate Attributes
      operationId: validateAttributes
      parameters:
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "422":
          description: Attribute validation failed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "500":
          description: Internal Server Error
        "200":
          description: Attribute validation completed
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/raProfile/attributes/validate:
    post:
      tags:
      - Authority Management API
      summary: Validate RA Profile attributes
      operationId: validateRAProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "200":
          description: Authority instance updated
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/endEntityProfiles/{endEntityProfileName}/endEntities/{endEntityName}:
    get:
      tags:
      - End Entity Management API
      summary: Get End Entity
      operationId: getEndEntity
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileName
        in: path
        description: End Entity Profile Name
        required: true
        schema:
          type: string
      - name: endEntityName
        in: path
        description: End Entity Name
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: End Entity retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndEntityDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - End Entity Management API
      summary: Update End Entity
      operationId: updateEndEntity
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileName
        in: path
        description: End Entity Profile Name
        required: true
        schema:
          type: string
      - name: endEntityName
        in: path
        description: End Entity Name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditEndEntityRequestDto'
        required: true
      responses:
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: End Entity updated
    delete:
      tags:
      - End Entity Management API
      summary: Remove End Entity
      operationId: removeEndEntity
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileName
        in: path
        description: End Entity Profile Name
        required: true
        schema:
          type: string
      - name: endEntityName
        in: path
        description: End Entity Name
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
        "200":
          description: End Entity removed
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/endEntityProfiles/{endEntityProfileName}/endEntities:
    get:
      tags:
      - End Entity Management API
      summary: List End Entities
      operationId: listEndEntities
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileName
        in: path
        description: End Entity Profile Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: End Entities retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndEntityDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - End Entity Management API
      summary: Create End Entity
      operationId: createEndEntity
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileName
        in: path
        description: End Entity Profile Name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEndEntityRequestDto'
        required: true
      responses:
        "500":
          description: Internal Server Error
        "200":
          description: End Entity created
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/endEntityProfiles/{endEntityProfileName}/certificates/revoke:
    post:
      tags:
      - Certificate Management API
      summary: Revoke Certificate
      operationId: revokeCertificate
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileName
        in: path
        description: End Entity Profile Name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertRevocationDto'
        required: true
      responses:
        "200":
          description: Certificate revoked
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/endEntityProfiles/{endEntityProfileName}/certificates/issue:
    post:
      tags:
      - Certificate Management API
      summary: Issue Certificate
      operationId: issueCertificate
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileName
        in: path
        description: End Entity Profile Name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateSignRequestDto'
        required: true
      responses:
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateSignResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}:
    get:
      tags:
      - Authority Management API
      summary: Get an Authority instance
      operationId: getAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Authority instance retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityProviderInstanceDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Authority Management API
      summary: Update Authority instance
      operationId: updateAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorityProviderInstanceRequestDto'
        required: true
      responses:
        "200":
          description: Authority instance updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityProviderInstanceDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Authority Management API
      summary: Remove Authority instance
      operationId: removeAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
        "200":
          description: Authority instance removed
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities:
    get:
      tags:
      - Authority Management API
      summary: List Authority instances
      operationId: listAuthorityInstances
      responses:
        "500":
          description: Internal Server Error
        "200":
          description: Authority instances retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorityProviderInstanceDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Authority Management API
      summary: Create Authority instance
      operationId: createAuthorityInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorityProviderInstanceRequestDto'
        required: true
      responses:
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Authority instance created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityProviderInstanceDto'
  /v1/{functionalGroup}/{kind}/attributes:
    get:
      tags:
      - Attributes API
      summary: List available Attributes
      operationId: listAttributeDefinitions
      parameters:
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinition'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/health:
    get:
      tags:
      - Health check API
      summary: Health check
      operationId: checkHealth
      responses:
        "200":
          description: Health check completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/raProfile/attributes:
    get:
      tags:
      - Authority Management API
      summary: List RA Profile Attributes
      operationId: listRAProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Authority instance updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinition'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/endEntityProfiles/{endEntityProfileId}/certificateprofiles:
    get:
      tags:
      - End Entity Profiles API
      summary: List available certificate profiles for given end entity profile
      operationId: listCertificateProfiles
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileId
        in: path
        description: End Entity Profile Id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Certificate profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameAndIdDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/endEntityProfiles/{endEntityProfileId}/cas:
    get:
      tags:
      - End Entity Profiles API
      summary: List available certification authorities for given end entity profile
      operationId: listCAsInProfile
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileId
        in: path
        description: End Entity Profile Id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: CAs retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameAndIdDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/endEntityProfiles:
    get:
      tags:
      - End Entity Profiles API
      summary: List available end entity profiles
      operationId: listEntityProfiles
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: End entities retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameAndIdDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorityProvider/authorities/{uuid}/connect:
    get:
      tags:
      - Authority Management API
      summary: Connect to Authority
      operationId: getConnection
      parameters:
      - name: uuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Authority instance connected
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1:
    get:
      tags:
      - Info API
      summary: List supported functions of the connector
      description: Returns map of functional code and implemented end points
      operationId: listSupportedFunctions
      responses:
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Functions found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InfoResponse'
components:
  schemas:
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    RequestAttributeDto:
      required:
      - name
      - value
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        value:
          type: object
          description: Value of the Attribute
    AttributeCallback:
      required:
      - callbackContext
      - callbackMethod
      - mappings
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          uniqueItems: true
          type: array
          description: Mappings for the callback method
          items:
            $ref: '#/components/schemas/AttributeCallbackMapping'
        pathVariables:
          type: object
          additionalProperties:
            type: object
            description: Map of path variables supported by the callback method
          description: Map of path variables supported by the callback method
        queryParameters:
          type: object
          additionalProperties:
            type: object
            description: Map of the query parameters supported by the callback method
          description: Map of the query parameters supported by the callback method
        requestBody:
          type: object
          additionalProperties:
            type: object
            description: Request body for the callback method
          description: Request body for the callback method
      description: Optional definition of callback for helper methods
    AttributeCallbackMapping:
      required:
      - targets
      - to
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          type: string
          description: Type of the attribute. It is optional and must be set only
            if special behaviour is needed.
          enum:
          - STRING
          - NUMBER
          - SECRET
          - FILE
          - BOOLEAN
          - LIST
          - CREDENTIAL
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          uniqueItems: true
          type: array
          description: Set of targets for propagating value.
          items:
            type: string
            description: Set of targets for propagating value.
            enum:
            - pathVariable
            - requestParameter
            - body
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      description: Mappings for the callback method
    AttributeDefinition:
      required:
      - editable
      - label
      - multiValue
      - name
      - readOnly
      - required
      - type
      - uuid
      - visible
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          type: string
          description: Type of the Attribute
          enum:
          - STRING
          - NUMBER
          - SECRET
          - FILE
          - BOOLEAN
          - LIST
          - CREDENTIAL
        required:
          type: boolean
          description: Boolean determining if the Attribute is required
          default: false
        readOnly:
          type: boolean
          description: Boolean determining if the Attribute is read only
          default: false
        editable:
          type: boolean
          description: Boolean determining if the Attribute is editable
          default: true
        visible:
          type: boolean
          description: Boolean determining if the Attribute is visible and can be
            displayed
          default: true
        multiValue:
          type: boolean
          description: Boolean determining if the Attribute has value composed from
            multiple items
          default: false
        description:
          type: string
          description: "Optional description of the Attribute, should contain help\
            \ for setting proper value"
        validationRegex:
          type: string
          description: Optional regular expression used for validating the Attribute
            value
        dependsOn:
          type: array
          description: Optional list of other Attribute names and values on which
            it depends on
          items:
            $ref: '#/components/schemas/AttributeDependency'
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
        value:
          type: object
          description: Value of the Attribute
      description: List of RA Profiles attributes
    AttributeDependency:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: Name of depending attribute
        value:
          type: object
          description: "Value of depending attribute, which should be matched"
      description: Optional list of other Attribute names and values on which it depends
        on
    EditEndEntityRequestDto:
      required:
      - password
      - raProfile
      - status
      - subjectDN
      type: object
      properties:
        raProfile:
          $ref: '#/components/schemas/RaProfileDto'
        email:
          type: string
          description: End Entity email
        extensionData:
          type: array
          description: End Entity extension data
          items:
            $ref: '#/components/schemas/EndEntityExtendedInfoDto'
        password:
          type: string
          description: End Entity password
        subjectAltName:
          type: string
          description: End Entity Subject alternative name
        subjectDN:
          type: string
          description: End Entity subject domain name
        status:
          type: string
          description: End Entity Subject domain name
          enum:
          - NEW
          - FAILED
          - INITIALIZED
          - IN_PROCESS
          - GENERATED
          - REVOKED
          - HISTORICAL
          - KEY_RECOVERY
          - WAITING_FOR_ADD_APPROVAL
    EndEntityExtendedInfoDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      description: End Entity extension data
    RaProfileDto:
      required:
      - attributes
      - authorityInstanceName
      - authorityInstanceUuid
      - enabled
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
        name:
          type: string
          description: Object Name
        description:
          type: string
          description: Description of RA Profile
        authorityInstanceUuid:
          type: string
          description: UUID of Authority provider
        authorityInstanceName:
          type: string
          description: Name of Authority instance
        attributes:
          type: array
          description: List of RA Profiles attributes
          items:
            $ref: '#/components/schemas/AttributeDefinition'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
      description: RA profile related to End Entity
    AddEndEntityRequestDto:
      required:
      - password
      - raProfile
      - subjectDN
      - username
      type: object
      properties:
        raProfile:
          $ref: '#/components/schemas/RaProfileDto'
        email:
          type: string
          description: End Entity email
        extensionData:
          type: array
          description: End Entity extension data
          items:
            $ref: '#/components/schemas/EndEntityExtendedInfoDto'
        password:
          type: string
          description: End Entity password
        subjectAltName:
          type: string
          description: End Entity Subject alternative name
        subjectDN:
          type: string
          description: End Entity subject domain name
        username:
          type: string
          description: End Entity name
    CertRevocationDto:
      required:
      - certificateSN
      - issuerDN
      - reason
      type: object
      properties:
        certificateSN:
          type: string
          description: Certificate serial number
        issuerDN:
          type: string
          description: Issuer domain name
        reason:
          type: string
          description: Revocation reason
          enum:
          - UNSPECIFIED
          - KEY_COMPROMISE
          - CA_COMPROMISE
          - AFFILIATION_CHANGED
          - SUPERSEDED
          - CESSATION_OF_OPERATION
          - CERTIFICATE_HOLD
          - REMOVE_FROM_CRL
          - PRIVILEGES_WITHDRAWN
          - AA_COMPROMISE
    CertificateSignRequestDto:
      required:
      - password
      - pkcs10
      - username
      type: object
      properties:
        password:
          type: string
          description: End Entity password
        pkcs10:
          type: string
          description: Certificate sign request (PKCS#10) encoded as Base64 string
        username:
          type: string
          description: End Entity username
    CertificateSignResponseDto:
      required:
      - certificateData
      type: object
      properties:
        certificateData:
          type: string
          description: Base64 encoded Certificate
    AuthorityProviderInstanceRequestDto:
      required:
      - attributes
      - kind
      - name
      type: object
      properties:
        name:
          type: string
          description: Authority instance name
        kind:
          type: string
          description: Kind of Authority instance
        attributes:
          type: array
          description: List of Authority instance Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    AuthorityProviderInstanceDto:
      required:
      - attributes
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
        name:
          type: string
          description: Object Name
        attributes:
          type: array
          description: List of Authority instance Attributes
          items:
            $ref: '#/components/schemas/AttributeDefinition'
    HealthDto:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: Current connector operational status
          enum:
          - ok
          - nok
          - unknown
        description:
          type: string
          description: Detailed status description
        parts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/HealthDto'
          description: Nested status of services
    EndEntityDto:
      required:
      - status
      - subjectDN
      - username
      type: object
      properties:
        subjectDN:
          type: string
          description: End Entity subject domain name
        email:
          type: string
          description: End Entity email
        extensionData:
          type: array
          description: End Entity extension data
          items:
            $ref: '#/components/schemas/EndEntityExtendedInfoDto'
        subjectAltName:
          type: string
          description: End Entity Subject alternative name
        status:
          type: string
          description: End Entity Subject domain name
          enum:
          - NEW
          - FAILED
          - INITIALIZED
          - IN_PROCESS
          - GENERATED
          - REVOKED
          - HISTORICAL
          - KEY_RECOVERY
          - WAITING_FOR_ADD_APPROVAL
        username:
          type: string
          description: End Entity name
    NameAndIdDto:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: Object identifier
          format: int32
        name:
          type: string
          description: Object name
    EndpointDto:
      required:
      - context
      - method
      - name
      - required
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
        name:
          type: string
          description: Object Name
        context:
          type: string
          description: Context of the Endpoint
          example: /v1
        method:
          type: string
          description: Method to be used for the Endpoint
          example: POST
        required:
          type: boolean
          description: True if the Endpoint is required for implementation
          example: true
      description: List of end points related to functional group
    InfoResponse:
      required:
      - endPoints
      - functionGroupCode
      - kinds
      type: object
      properties:
        functionGroupCode:
          type: string
          description: Enumerated code of functional group
          enum:
          - credentialProvider
          - legacyAuthorityProvider
          - authorityProvider
          - discoveryProvider
        kinds:
          type: array
          description: List of supported functional group kinds
          example:
          - SoftKeyStore
          - Basic
          - ApiKey
          items:
            type: string
            description: List of supported functional group kinds
            example: "[\"SoftKeyStore\",\"Basic\",\"ApiKey\"]"
        endPoints:
          type: array
          description: List of end points related to functional group
          items:
            $ref: '#/components/schemas/EndpointDto'
