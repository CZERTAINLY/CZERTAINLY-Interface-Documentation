openapi: 3.0.1
info:
  title: CZERTAINLY Utils Service API
  description: REST APIs for utility and helper function to work with certificates
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  version: 1.0.0
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Certification Request Utils API
  description: Certification request handling support tools.
- name: OID Utils API
  description: Details about object identifiers like friendly name.
- name: Certificate Utils API
  description: Certificate handling support tools that contains for example parsing
    of certificate in various formats.
- name: Actuator
  description: Monitor and interact
  externalDocs:
    description: Spring Boot Actuator Web API Documentation
    url: https://docs.spring.io/spring-boot/docs/current/actuator-api/html/
paths:
  /v1/request/{requestType}/parse:
    post:
      tags:
      - Certification Request Utils API
      summary: Parse the certification request and provides details about its attributes
      operationId: parseRequest
      parameters:
      - name: requestType
        in: path
        description: Certification request type
        required: true
        schema:
          type: string
          enum:
          - PKCS10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParseRequestRequestDto'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        "200":
          description: Certification request parsed and information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseRequestResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /v1/certificate/{certificateType}/parse:
    post:
      tags:
      - Certificate Utils API
      summary: Parse the certificate and provides details about the certificate attributes
      operationId: parseCertificate
      parameters:
      - name: certificateType
        in: path
        description: Certificate type
        required: true
        schema:
          type: string
          enum:
          - X509
          - SSH
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParseCertificateRequestDto'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        "200":
          description: Certificate parsed and information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseCertificateResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /v1/certificate/identify:
    post:
      tags:
      - Certificate Utils API
      summary: Identify certificate type
      operationId: identifyCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentifyCertificateRequestDto'
        required: true
      responses:
        "200":
          description: Certificate identified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentifyCertificateResponseDto'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /v1/oid/{identifier}:
    get:
      tags:
      - OID Utils API
      summary: Get information and details about the OID number
      operationId: getOidInfo
      parameters:
      - name: identifier
        in: path
        description: OID number
        required: true
        schema:
          type: string
        example: 2.5.4.3
      responses:
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        "200":
          description: OID details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OidInfoResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /v1/certificate/{certificateType}/random:
    get:
      tags:
      - Certificate Utils API
      summary: Generate random certificate
      operationId: randomCertificate
      parameters:
      - name: certificateType
        in: path
        description: Certificate type
        required: true
        schema:
          type: string
          enum:
          - X509
          - SSH
      responses:
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
        "200":
          description: Certificate generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomCertificateResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponseDto'
  /health:
    get:
      tags:
      - Actuator
      summary: Actuator web endpoint 'health'
      operationId: health
      responses:
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /health/**:
    get:
      tags:
      - Actuator
      summary: Actuator web endpoint 'health-path'
      operationId: health-path
      responses:
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
components:
  schemas:
    ParseRequestRequestDto:
      required:
      - parseType
      - request
      type: object
      properties:
        request:
          type: string
          description: Base64-encoded certification request data in DER or PEM format
          example: MIICvTCCAaUCAQAwQTEQMA4GA1UEAwwHc2FtdXNlcjEtMCsGA1UEAwwkSzI1X0NRRVFaUjNVVTQ1VVhXQlFKQlhRTk42WlZINDJDQ1NIMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAukV6HeI/Rhg5uwRPnLXSAB74dgTxJBNGuLx1CFuv3AdhtOwLixcGUV1a/wA+VpvQUkUGa6RXpetnqxpHCiiq40Kv5ZdnsWvmORfmb+XJ6/06vajZfgOYst2g4CoNaFDhjRcvxa3vVx+phJnxZzrh2jYPPnopDcH19mK0u3yrCB3rsw3i47GT0QgSYW/uXyJzERRBjZ+DFcVNU50OfsngckCXaigysayg/BAUfeX9qjQoqEBbmP49cWPzXv7VMy8G9l9znMWAzqSLVSSJz+XtqwnIsQFsHRLTZvPNefCamtY+OVS3quEva/M+HRK4s2lHF8W0YPHDSbttVtF+u1bLqQIDAQABoDcwNQYDVR0RMS4MLHNhbXVzZXIvSzI1X0NRRVFaUjNVVTQ1VVhXQlFKQlhRTk42WlZINDJDQ1NIMA0GCSqGSIb3DQEBCwUAA4IBAQAOkdQ9ZcGnxBq8iGXKotebInOBSXLTM+6DkHF/r5sctNcdUUvfww0vmYheKZdcIbPqWRqATxLHKYTBDjHTGwsm8gxOJTJwNZ8BW2g2Lgsf+29kOlxH+X2P98XcNkVLbrkncKCjvIMnaHsv1Qg11rRAI1Im1uqtCtKwiKKAD1Sd8HIRFqG23UB8Uy4lhgaN4MLe+fQsY5lV0ohT2abe2j0jqqTz6yQZJBa53ZDPlsVVsyaA12Nt73gMqauiOqRcye4JKWZlpRMCkCIz+GorKxuZ+fYYj9uYBdXWSpRjHtFXrMN5aAamaJ98Dd42K4m5kP7k3Wp/HfISFezn/HyCvaW8
        parseType:
          type: string
          description: Type of the parsing requested
          enum:
          - BASIC
          - EXTENDED
          - ASN1
    ApiErrorResponseDto:
      required:
      - code
      - errors
      - message
      - status
      - timestamp
      type: object
      properties:
        timestamp:
          type: integer
          description: Timestamp of the error in epoch / unix format
          format: int64
          example: 1670146708406
        code:
          type: integer
          description: Error code
          format: int32
          example: 81
        status:
          type: string
          description: Http status code
          example: "400"
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
        message:
          type: string
          description: Error message
          example: Arguments not valid
        errors:
          type: array
          description: Detailed list of errors
          items:
            $ref: '#/components/schemas/ErrorMessageDto'
    ErrorMessageDto:
      required:
      - detail
      - error
      - type
      type: object
      properties:
        error:
          type: string
          description: Specific error message
          example: Cannot parse field certificate
        type:
          type: string
          description: Type of the error
          example: InvalidFormatException
        detail:
          type: string
          description: Details about the error
          example: Invalid field parseType value
        stacktrace:
          type: string
          description: Optional stacktrace and other debug information when debug
            is enabled
      description: Detailed list of errors
    ParseRequestResponseDto:
      required:
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the certification request parsed
          enum:
          - PKCS10
        data:
          $ref: '#/components/schemas/RequestData'
    Pkcs10RequestAsn1Data:
      required:
      - asn1dump
      type: object
      properties:
        asn1dump:
          type: string
          description: ASN.1 dump the PKCS#10 certification request
    Pkcs10RequestBasicData:
      required:
      - subject
      type: object
      properties:
        subject:
          type: string
          description: Subject of the PKCS#10 certification request
          example: CN=test
        sans:
          type: array
          description: List of subject alternative names
          example: "DNS: test.example.com"
          items:
            type: string
            description: List of subject alternative names
            example: "DNS: test.example.com"
    Pkcs10RequestExtendedData:
      required:
      - algorithm
      - publicKey
      - signatureAlgorithm
      - subject
      type: object
      properties:
        subject:
          type: string
          description: Subject of the PKCS#10 certification request
          example: CN=test
        signatureAlgorithm:
          type: string
          description: Signature algorithm for the certification request
          example: SHA256withRSA
        algorithm:
          type: string
          description: Public key algorithm
          example: RSA
        publicKey:
          type: string
          description: Base64-encoded public key
          example: MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2d/pNRjyBpIpjXfTBMPXFgmGM1IddZr+TVSbMPrkW88ULD+6KnkEHTMR6oUj9HhoOlMakOj0EggpB7zLa6RRl/njGbgf89bxaHR3QQlEzTlK+nNHPsDBroSaGDwMGPzluWA68Oq9aMbSm2w+xzDjxNbbebcBkE7suAQUBFqf0kh7N/VKA7S6my8M7npL9RnEMQo1qR41+XyGyH+yWX160PFpzJByJ26MPbUCADrSsgyd9mNg1EoCuL9c6dFLZwAVwWlcood2pv0oIb+kS4z9MRJ1qUbQLeB6rUhRTFQhJIKiBFOxL/Xk7hib8u+pb76z6a+XaMN+RVs/LWXD8D8FyjKmh0TzyI0txwyovwTpqjhqZwDXCcp+F/vzbDkzZCFywI/R+beHXkEeI3JEsDXD3of+c14Kpj1ORi4YYrPs7tE8XzCrhKL1xzlpX4slOF88ejALI2/XT0ao0dpLu0zXPZnoEe8g1fNPXjmujOa6FWQdi+9f6yipMy0v7vZCJkoYbapcUPV3JDdDqdhqaT2CDvK85mR8wr/oG/zSHlWflG0yGwDQNzWF1oyZTM4Mn/w7m9L2W4UcS6SkXM4jmTfEkwfKfnepAoXLdbtdEmcEIJTFDPFj6PLfghz8PwLwKXcA9s+OQpLRYkelfN4Kr6hnQ5GgoPwnaZ85bRzf2a+DQ6cCAwEAAQ==
        attributes:
          type: array
          description: List of certification request attributes
          example: "2.5.29.17: samuser/K25_CQEQZR3UU45UXWBQJBXQNN6ZVH42CCSH"
          items:
            type: string
            description: List of certification request attributes
            example: "2.5.29.17: samuser/K25_CQEQZR3UU45UXWBQJBXQNN6ZVH42CCSH"
    RequestData:
      type: object
      description: Certification request data
      oneOf:
      - $ref: '#/components/schemas/Pkcs10RequestBasicData'
      - $ref: '#/components/schemas/Pkcs10RequestExtendedData'
      - $ref: '#/components/schemas/Pkcs10RequestAsn1Data'
    ParseCertificateRequestDto:
      required:
      - certificate
      - parseType
      type: object
      properties:
        certificate:
          type: string
          description: Base64-encoded certificate data in DER or PEM format
          example: MIIFcDCCA1igAwIBAgIUQ8qEcLshApVCEh1+wrszGBW9mHEwDQYJKoZIhvcNAQELBQAwNjEWMBQGA1UEAwwNTWFuYWdlbWVudCBDQTEcMBoGA1UECgwTM0tleSBDb21wYW55IHMuci5vLjAeFw0xOTA1MDgxMjUxNTZaFw0yOTA1MDUxMjUxNTZaMDYxFjAUBgNVBAMMDU1hbmFnZW1lbnQgQ0ExHDAaBgNVBAoMEzNLZXkgQ29tcGFueSBzLnIuby4wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDZ3+k1GPIGkimNd9MEw9cWCYYzUh11mv5NVJsw+uRbzxQsP7oqeQQdMxHqhSP0eGg6UxqQ6PQSCCkHvMtrpFGX+eMZuB/z1vFodHdBCUTNOUr6c0c+wMGuhJoYPAwY/OW5YDrw6r1oxtKbbD7HMOPE1tt5twGQTuy4BBQEWp/SSHs39UoDtLqbLwzuekv1GcQxCjWpHjX5fIbIf7JZfXrQ8WnMkHInbow9tQIAOtKyDJ32Y2DUSgK4v1zp0UtnABXBaVyih3am/Sghv6RLjP0xEnWpRtAt4HqtSFFMVCEkgqIEU7Ev9eTuGJvy76lvvrPpr5dow35FWz8tZcPwPwXKMqaHRPPIjS3HDKi/BOmqOGpnANcJyn4X+/NsOTNkIXLAj9H5t4deQR4jckSwNcPeh/5zXgqmPU5GLhhis+zu0TxfMKuEovXHOWlfiyU4Xzx6MAsjb9dPRqjR2ku7TNc9megR7yDV809eOa6M5roVZB2L71/rKKkzLS/u9kImShhtqlxQ9XckN0Op2GppPYIO8rzmZHzCv+gb/NIeVZ+UbTIbANA3NYXWjJlMzgyf/Dub0vZbhRxLpKRcziOZN8STB8p+d6kChct1u10SZwQglMUM8WPo8t+CHPw/AvApdwD2z45CktFiR6V83gqvqGdDkaCg/CdpnzltHN/Zr4NDpwIDAQABo3YwdDAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNSuk5EY8MsHAKr7hYgWlF7vvWIzMBEGA1UdIAQKMAgwBgYEVR0gADAdBgNVHQ4EFgQU1K6TkRjwywcAqvuFiBaUXu+9YjMwDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEBCwUAA4ICAQDZZN0oD9kIZ3puvGAcxwGKZ1DNCNtnNut5k4E+hBJc5TnMskfyM2drMi0vFvFXXJlu5NBprS0jw+x6XHYTC6BXwe4LwZib/Yr/6ROv73nC/ecJK2w2n6PIWehs7qwigakzh1tf8iypj8kTl2taMMEgzO7bF9CgLQnm0eVjuPzvRRSsZ0dbBisKwkOTpt9aYG/WsuLZ7LmFKBvpVSvJJBYmgGmeqkx0Pijdg9PEkUP3Ek2tN5DoOFQzlPicujZ5p3akfTG4L2PNuZWf52zmY5sXmxEr0zoyeuXrIM424c5qvh82yvP2M2AXty8s2O1jW11snemSLPVhxsnUlfMqic8rfO0QTPJg3WU/SmHpvmcyzUGpwYfm1wdOS2e9Ow5fSxR6TyHc14Lox4yXCLzGkPdBPcj8jG1qJ9Pqkwpaz9hGC3elTd3TDCocDRlrz6OQfE4j1OKCeaiuHCjZO3v3e0VxWh7T9Synez/thxi/UPKBL8Gh103AUCOQYGJkIdIKSyQusnfxCj93YE5cJUC9rPfrqe1Rjct3nGNj5E5wnVwU4HtvosPw6mGtPuUNA3fhvntZN+P+1hi9+322s1s0ttdBYjIYNKVRqiuGB8NH4xX8R6husmmRbOI1OFdtaruc30rSo1Y3/iYWdWaA1zokkYOztcjbffoznZlIBawmif4oKw==
        parseType:
          type: string
          description: Type of the parsing requested
          enum:
          - BASIC
          - EXTENDED
          - ASN1
    CertificateData:
      type: object
      description: Certificate data
      oneOf:
      - $ref: '#/components/schemas/X509CertificateBasicData'
      - $ref: '#/components/schemas/X509CertificateExtendedData'
      - $ref: '#/components/schemas/X509CertificateAsn1Data'
    ParseCertificateResponseDto:
      required:
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the certificate parsed
          enum:
          - X509
          - SSH
        data:
          $ref: '#/components/schemas/CertificateData'
    X509CertificateAsn1Data:
      required:
      - asn1dump
      type: object
      properties:
        asn1dump:
          type: string
          description: ASN.1 dump the X.509 certificate
    X509CertificateBasicData:
      required:
      - issuer
      - serialNumber
      - subject
      - validFrom
      - validTo
      type: object
      properties:
        subject:
          type: string
          description: Subject of the X.509 certificate
          example: CN=test
        issuer:
          type: string
          description: Issuer of the X.509 certificate
          example: CN=test
        validFrom:
          type: integer
          description: notBefore in epoch / unix format
          format: int64
          example: 1670146708406
        validTo:
          type: integer
          description: notAfter in epoch / unix format
          format: int64
          example: 1670146708406
        serialNumber:
          type: string
          description: Serial number of the certificate in HEX
          example: 43ca8470bb21029542121d7ec2bb331815bd9871
    X509CertificateExtendedData:
      required:
      - algorithm
      - issuer
      - publicKey
      - serialNumber
      - signatureAlgorithm
      - subject
      - validFrom
      - validTo
      - version
      type: object
      properties:
        subject:
          type: string
          description: Subject of the X.509 certificate
          example: CN=test
        issuer:
          type: string
          description: Issuer of the X.509 certificate
          example: CN=test
        validFrom:
          type: integer
          description: notBefore in epoch / unix format
          format: int64
          example: 1670146708406
        validTo:
          type: integer
          description: notAfter in epoch / unix format
          format: int64
          example: 1670146708406
        serialNumber:
          type: string
          description: Serial number of the certificate in HEX
          example: 43ca8470bb21029542121d7ec2bb331815bd9871
        version:
          type: integer
          description: Version of the X.509 certificate
          format: int32
          example: 3
        signatureAlgorithm:
          type: string
          description: Signature algorithm for the certificate
          example: SHA256withRSA
        algorithm:
          type: string
          description: Public key algorithm
          example: RSA
        publicKey:
          type: string
          description: Base64-encoded public key
          example: MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2d/pNRjyBpIpjXfTBMPXFgmGM1IddZr+TVSbMPrkW88ULD+6KnkEHTMR6oUj9HhoOlMakOj0EggpB7zLa6RRl/njGbgf89bxaHR3QQlEzTlK+nNHPsDBroSaGDwMGPzluWA68Oq9aMbSm2w+xzDjxNbbebcBkE7suAQUBFqf0kh7N/VKA7S6my8M7npL9RnEMQo1qR41+XyGyH+yWX160PFpzJByJ26MPbUCADrSsgyd9mNg1EoCuL9c6dFLZwAVwWlcood2pv0oIb+kS4z9MRJ1qUbQLeB6rUhRTFQhJIKiBFOxL/Xk7hib8u+pb76z6a+XaMN+RVs/LWXD8D8FyjKmh0TzyI0txwyovwTpqjhqZwDXCcp+F/vzbDkzZCFywI/R+beHXkEeI3JEsDXD3of+c14Kpj1ORi4YYrPs7tE8XzCrhKL1xzlpX4slOF88ejALI2/XT0ao0dpLu0zXPZnoEe8g1fNPXjmujOa6FWQdi+9f6yipMy0v7vZCJkoYbapcUPV3JDdDqdhqaT2CDvK85mR8wr/oG/zSHlWflG0yGwDQNzWF1oyZTM4Mn/w7m9L2W4UcS6SkXM4jmTfEkwfKfnepAoXLdbtdEmcEIJTFDPFj6PLfghz8PwLwKXcA9s+OQpLRYkelfN4Kr6hnQ5GgoPwnaZ85bRzf2a+DQ6cCAwEAAQ==
        sans:
          type: array
          description: List of subject alternative names
          example: "DNS: test.example.com"
          items:
            type: string
            description: List of subject alternative names
            example: "DNS: test.example.com"
    IdentifyCertificateRequestDto:
      required:
      - data
      type: object
      properties:
        data:
          type: string
          description: Base64-encoded data to be identified in DER or PEM format
    IdentifyCertificateResponseDto:
      required:
      - certificateType
      type: object
      properties:
        certificateType:
          type: string
          description: Identified Type of certificate
          enum:
          - X509
          - SSH
    OidInfoResponseDto:
      required:
      - identifier
      - name
      type: object
      properties:
        identifier:
          type: string
          description: OID number
          example: 2.5.4.3
        name:
          type: string
          description: "Name of the OID number, if defined"
          nullable: true
          example: Common Name
    RandomCertificateResponseDto:
      required:
      - certificate
      type: object
      properties:
        certificate:
          type: string
          description: Base64-encoded certificate
