openapi: 3.0.1
info:
  title: CZERTAINLY Entity Provider API
  description: REST API for implementations of custom Entity Provider
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Info API
  description: "Connector Information API. Each connector may have multiple functions\
    \ represented by FunctionGroupCode. For each FunctionGroupCode there is a list\
    \ of implemented end points. These endpoints must be according the specified interface,\
    \ this is validated by the core. You can also implement helper end points that\
    \ are used for callbacks and other relevant operations specific to implementation."
- name: Entity Management API
  description: "Management interfaces to control Entities in the platform. Entities\
    \ can be created, edited, removed. Support for the bulk operation and listing\
    \ of available Entities for the automation. Location attributes and validation."
- name: Attributes API
  description: Connector Attributes API. Provides information about supported Attributes
    of the connector. Attributes are specific to implementation and gives information
    about the data that can be exchanged and properly parsed by the connector. Part
    of this API is validation of the Attributes.
- name: Health check API
  description: "Connector Health check API. Connector returns own status and in some\
    \ cases can return status of services on which it depends like database, HSM and\
    \ so on."
- name: Location Operations API
  description: "Interfaces to control certificates and key stores on Entities. Locations\
    \ provides capabilities of getting the certificates already on the Entity, pushing\
    \ new certificates, generation of new key pair and certificate signing requests,\
    \ removing certificates and management of the Entity end-to-end automation."
paths:
  /v1/entityProvider/entities/{entityUuid}:
    get:
      tags:
      - Entity Management API
      summary: Get Entity instance details
      operationId: getEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Entity instance retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityInstanceDto'
    put:
      tags:
      - Entity Management API
      summary: Update Entity instance
      operationId: updateEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityInstanceRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Entity instance updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityInstanceDto'
    delete:
      tags:
      - Entity Management API
      summary: Remove Entity instance
      operationId: removeEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Entity instance removed
  /v1/{functionalGroup}/{kind}/attributes/validate:
    post:
      tags:
      - Attributes API
      summary: Validate Attributes
      operationId: validateAttributes
      parameters:
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "422":
          description: Attribute validation failed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Attribute validation completed
  /v1/entityProvider/entities/{entityUuid}/locations/remove:
    post:
      tags:
      - Location Operations API
      summary: Remove Certificate
      description: Remove Certificate from Location
      operationId: removeCertificateFromLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCertificateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveCertificateResponseDto'
  /v1/entityProvider/entities/{entityUuid}/locations/push/attributes/validate:
    post:
      tags:
      - Location Operations API
      summary: Validate Push Certificate Attributes
      description: Validate list of Attributes to push Certificate into Location
      operationId: validatePushCertificateAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "422":
          description: Unprocessable Entity
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Attributes validated
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entityProvider/entities/{entityUuid}/locations/push:
    post:
      tags:
      - Location Operations API
      summary: Push Certificate
      description: Push the Certificate into the Location
      operationId: pushCertificateToLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushCertificateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate pushed to Location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushCertificateResponseDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entityProvider/entities/{entityUuid}/locations/csr/attributes/validate:
    post:
      tags:
      - Location Operations API
      summary: Validate CSR Attributes
      description: Validate list of Attributes to generate key pair and CSR
      operationId: validateGenerateCsrAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "422":
          description: Unprocessable Entity
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Attributes validated
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entityProvider/entities/{entityUuid}/locations/csr:
    post:
      tags:
      - Location Operations API
      summary: Generate CSR
      description: Generate key pair and CSR for the Location
      operationId: generateCsrLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateCsrRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: CSR generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateCsrResponseDto'
  /v1/entityProvider/entities/{entityUuid}/locations:
    post:
      tags:
      - Location Operations API
      summary: Get Location Details
      description: Get information about the Location content. All identified certificates
        are returned
      operationId: getLocationDetail
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDetailRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Location detail and content retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDetailResponseDto'
  /v1/entityProvider/entities/{entityUuid}/location/attributes/validate:
    post:
      tags:
      - Entity Management API
      summary: Validate Location Attributes
      operationId: validateLocationAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "422":
          description: Attribute validation failed
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Entity Location Attributes validation completed
  /v1/entityProvider/entities:
    get:
      tags:
      - Entity Management API
      summary: List Entity instances
      description: List available Entity instances
      operationId: listEntityInstances
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Entity instances retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityInstanceDto'
    post:
      tags:
      - Entity Management API
      summary: Create Entity instance
      operationId: createEntityInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityInstanceRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "422":
          description: Attribute validation failed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Entity instance created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityInstanceDto'
  /v1/{functionalGroup}/{kind}/attributes:
    get:
      tags:
      - Attributes API
      summary: List available Attributes
      operationId: listAttributeDefinitions
      parameters:
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinition'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/health:
    get:
      tags:
      - Health check API
      summary: Health check
      operationId: checkHealth
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Health check completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entityProvider/entities/{entityUuid}/locations/push/attributes:
    get:
      tags:
      - Location Operations API
      summary: List Push Certificate Attributes
      description: List of Attributes to push Certificate into Location
      operationId: listPushCertificateAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Attributes for push retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinition'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entityProvider/entities/{entityUuid}/locations/csr/attributes:
    get:
      tags:
      - Location Operations API
      summary: List CSR Attributes
      description: List of Attributes to generate key pair and CSR
      operationId: listGenerateCsrAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinition'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entityProvider/entities/{entityUuid}/location/attributes:
    get:
      tags:
      - Entity Management API
      summary: List Entity Location Attributes
      operationId: listLocationAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Entity Location Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinition'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1:
    get:
      tags:
      - Info API
      summary: List supported functions of the connector
      description: Returns map of functional code and implemented end points
      operationId: listSupportedFunctions
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Functions found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InfoResponse'
components:
  schemas:
    EntityInstanceRequestDto:
      required:
      - attributes
      - kind
      - name
      type: object
      properties:
        name:
          type: string
          description: Entity instance name
        kind:
          type: string
          description: Kind of Entity instance
        attributes:
          type: array
          description: List of Entity instance Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    RequestAttributeDto:
      required:
      - content
      - name
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        content:
          type: object
          description: Content of the Attribute
      description: List of Entity instance Attributes
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    AttributeCallback:
      required:
      - callbackContext
      - callbackMethod
      - mappings
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          uniqueItems: true
          type: array
          description: Mappings for the callback method
          items:
            $ref: '#/components/schemas/AttributeCallbackMapping'
      description: Optional definition of callback for getting the content of the
        Attribute based on the action
    AttributeCallbackMapping:
      required:
      - targets
      - to
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          type: string
          description: Type of the attribute. It is optional and must be set only
            if special behaviour is needed.
          enum:
          - STRING
          - INTEGER
          - SECRET
          - FILE
          - BOOLEAN
          - CREDENTIAL
          - DATE
          - FLOAT
          - JSON
          - TEXT
          - TIME
          - DATETIME
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          uniqueItems: true
          type: array
          description: Set of targets for propagating value.
          items:
            type: string
            description: Set of targets for propagating value.
            enum:
            - pathVariable
            - requestParameter
            - body
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      description: Mappings for the callback method
    AttributeDefinition:
      required:
      - label
      - list
      - multiSelect
      - name
      - readOnly
      - required
      - type
      - uuid
      - visible
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        content:
          type: object
          description: Content of the Attribute
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        type:
          type: string
          description: Type of the Attribute
          enum:
          - STRING
          - INTEGER
          - SECRET
          - FILE
          - BOOLEAN
          - CREDENTIAL
          - DATE
          - FLOAT
          - JSON
          - TEXT
          - TIME
          - DATETIME
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        validationRegex:
          type: string
          description: Optional regular expression used for validating the Attribute
            content
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      description: List of Entity instance Attributes
    EntityInstanceDto:
      required:
      - attributes
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        attributes:
          type: array
          description: List of Entity instance Attributes
          items:
            $ref: '#/components/schemas/AttributeDefinition'
    RemoveCertificateRequestDto:
      required:
      - certificateMetadata
      - locationAttributes
      type: object
      properties:
        certificateMetadata:
          type: object
          additionalProperties:
            type: object
            description: Metadata of the Certificate
          description: Metadata of the Certificate
        locationAttributes:
          type: array
          description: List of Location Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    RemoveCertificateResponseDto:
      required:
      - certificateMetadata
      type: object
      properties:
        certificateMetadata:
          type: object
          additionalProperties:
            type: object
            description: Metadata of the Certificate
          description: Metadata of the Certificate
    PushCertificateRequestDto:
      required:
      - certificate
      - locationAttributes
      - pushAttributes
      type: object
      properties:
        certificate:
          type: string
          description: Base64-encoded Certificate
        certificateType:
          type: string
          description: Type of the Certificate
          default: X509
          enum:
          - X509
          - SSH
        locationAttributes:
          type: array
          description: List of Location Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        pushAttributes:
          type: array
          description: List of Attributes to push Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    PushCertificateResponseDto:
      type: object
      properties:
        certificateMetadata:
          type: object
          additionalProperties:
            type: object
            description: Certificate metadata
          description: Certificate metadata
        withKey:
          type: boolean
          description: Is private key available for the certificate in location
    GenerateCsrRequestDto:
      required:
      - csrAttributes
      - locationAttributes
      - renewal
      type: object
      properties:
        locationAttributes:
          type: array
          description: List of Location Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        csrAttributes:
          type: array
          description: List of Attributes to generate CSR
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        renewal:
          type: boolean
          description: Is the request for renewal of Certificate
    GenerateCsrResponseDto:
      required:
      - csr
      - pushAttributes
      type: object
      properties:
        csr:
          type: string
          description: Base64-encoded certificate signing request
        metadata:
          type: object
          additionalProperties:
            type: object
            description: CSR Metadata
          description: CSR Metadata
        certificateType:
          type: string
          description: Type of the certificate expected to be issued
          enum:
          - X509
          - SSH
        pushAttributes:
          type: array
          description: List of Attributes to push Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    LocationDetailRequestDto:
      required:
      - locationAttributes
      type: object
      properties:
        locationAttributes:
          type: array
          description: List of Location Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    CertificateLocationDto:
      required:
      - certificateData
      - withKey
      type: object
      properties:
        certificateData:
          type: string
          description: Base64-encoded Certificate content
        metadata:
          type: object
          additionalProperties:
            type: object
            description: Metadata of the Certificate related to the Location
          description: Metadata of the Certificate related to the Location
        certificateType:
          type: string
          description: Type of the Certificate
          default: X509
          enum:
          - X509
          - SSH
        withKey:
          type: boolean
          description: If the Certificate in Location has associated private key
        pushAttributes:
          type: array
          description: List of Attributes to replace Certificate
          items:
            $ref: '#/components/schemas/AttributeDefinition'
        csrAttributes:
          type: array
          description: List of Attributes to renew Certificate
          items:
            $ref: '#/components/schemas/AttributeDefinition'
      description: List of Certificates in the Location
    LocationDetailResponseDto:
      required:
      - certificates
      - multipleEntries
      - supportKeyManagement
      type: object
      properties:
        certificates:
          type: array
          description: List of Certificates in the Location
          items:
            $ref: '#/components/schemas/CertificateLocationDto'
        metadata:
          type: object
          additionalProperties:
            type: object
            description: Location metadata
          description: Location metadata
        multipleEntries:
          type: boolean
          description: Support for multiple Certificates in the Location
          default: false
        supportKeyManagement:
          type: boolean
          description: Support for key pair management in the Location
          default: false
    HealthDto:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: Current connector operational status
          enum:
          - ok
          - nok
          - unknown
        description:
          type: string
          description: Detailed status description
        parts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/HealthDto'
          description: Nested status of services
    EndpointDto:
      required:
      - context
      - method
      - name
      - required
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        context:
          type: string
          description: Context of the Endpoint
          example: /v1
        method:
          type: string
          description: Method to be used for the Endpoint
          example: POST
        required:
          type: boolean
          description: True if the Endpoint is required for implementation
          example: true
      description: List of end points related to functional group
    InfoResponse:
      required:
      - endPoints
      - functionGroupCode
      - kinds
      type: object
      properties:
        functionGroupCode:
          type: string
          description: Enumerated code of functional group
          enum:
          - credentialProvider
          - legacyAuthorityProvider
          - authorityProvider
          - discoveryProvider
          - entityProvider
          - complianceProvider
        kinds:
          type: array
          description: List of supported functional group kinds
          example:
          - SoftKeyStore
          - Basic
          - ApiKey
          items:
            type: string
            description: List of supported functional group kinds
            example: "[\"SoftKeyStore\",\"Basic\",\"ApiKey\"]"
        endPoints:
          type: array
          description: List of end points related to functional group
          items:
            $ref: '#/components/schemas/EndpointDto'
