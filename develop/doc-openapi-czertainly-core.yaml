openapi: 3.0.1
info:
  title: CZERTAINLY Core API
  description: REST API for CZERTAINLY Core
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  version: 1.5.1-SNAPSHOT
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Connector Management
  description: Connector Management API
- name: User Management
  description: User Management API
- name: Token Instance Controller
  description: Token Instance Controller API
- name: Authentication Management
  description: Authentication Management API
- name: Client Operations v2
  description: Client Operations v2 API
- name: Global Metadata
  description: Global Metadata API
- name: Statistics/Dashboard
  description: Statistics/Dashboard API
- name: Local operations
  description: API only accessible from localhost
- name: Credential Management
  description: Credential Management API
- name: Callback
  description: Callback API
- name: Cryptographic Key Controller
  description: Cryptographic Key Controller API
- name: Location Management
  description: Location Management API
- name: Entity Management
  description: Entity Management API
- name: Authority Management
  description: Authority Management API
- name: RA Profile Management
  description: RA Profile Management API
- name: Discovery Management
  description: Discovery Management API
- name: ACME Profile Management
  description: ACME Profile Management API
- name: Custom Attributes
  description: Custom Attributes API
- name: Token Profile Management
  description: Token Profile Management API
- name: ACME Account Management
  description: ACME Account Management API
- name: Audit Log
  description: Audit Log API
- name: Certificate & Key Group
  description: Group API
- name: Certificate Inventory
  description: Certificate Inventory API
- name: Compliance Profile Management
  description: Compliance Profile Management API
- name: Cryptographic Operations Controller
  description: Cryptographic Operations Controller API
- name: Connector Authentication
  description: Connector Authentication API
- name: Connector Registration
  description: Connector Registration API
- name: Role Management
  description: Role Management API
paths:
  /v1/users/{userUuid}:
    get:
      tags:
      - User Management
      summary: Get user details
      operationId: getUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    put:
      tags:
      - User Management
      summary: Update User
      operationId: updateUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
        required: true
      responses:
        "200":
          description: User details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    delete:
      tags:
      - User Management
      summary: Delete User
      operationId: deleteUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: User deleted
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/users/{userUuid}/roles/{roleUuid}:
    put:
      tags:
      - User Management
      summary: Add role to User
      operationId: addRole
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    delete:
      tags:
      - User Management
      summary: Remove role from User
      operationId: removeRole
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User roles removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/tokens/{uuid}:
    get:
      tags:
      - Token Instance Controller
      summary: Get Token Instance Detail
      operationId: getTokenInstance
      parameters:
      - name: uuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Token Instance Detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInstanceDetailDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Token Instance Controller
      summary: Update Token Instance
      operationId: updateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenInstanceRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Token Instance Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInstanceDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Token Instance Controller
      description: Delete Token Instance
      operationId: deleteTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Token Instance deleted
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    patch:
      tags:
      - Token Instance Controller
      summary: Reload Token Instance status
      operationId: reloadStatus
      parameters:
      - name: uuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Token Instance Status Reloaded from Connector
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInstanceDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}:
    get:
      tags:
      - Token Profile Management
      summary: Details of Token Profile
      operationId: getTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Token Profile details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProfileDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Token Profile Management
      summary: Edit Token Profile
      operationId: editTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditTokenProfileRequestDto'
        required: true
      responses:
        "204":
          description: Token Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProfileDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Token Profile Management
      summary: Delete Token Profile
      operationId: deleteTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Token Profile deleted
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/usages:
    put:
      tags:
      - Token Profile Management
      summary: Update Key Usage
      operationId: updateKeyUsages
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenProfileKeyUsageRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "204":
          description: Key Usages Updated
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Cryptographic Key Detail
      operationId: getKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: UUID of the Key
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Cryptographic Key Detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Cryptographic Key Controller
      summary: Edit Key
      operationId: editKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditKeyRequestDto'
        required: true
      responses:
        "204":
          description: Key updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Cryptographic Key
      description: "If the request body provided, only those key items will be deleted.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be destroyed"
      operationId: deleteKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "204":
          description: Key deleted
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/usages:
    put:
      tags:
      - Cryptographic Key Controller
      summary: Update Key Usage
      description: "If the request body provided, only those key items will be updated.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be updated"
      operationId: updateKeyUsages_1
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyUsageRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Keys Usages Updates
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/usages:
    put:
      tags:
      - Token Profile Management
      summary: Update Key Usages for Multiple Token Profiles
      operationId: updateKeysUsages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkTokenProfileKeyUsageRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "204":
          description: Key Usages Updated
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/roles/{roleUuid}:
    get:
      tags:
      - Role Management
      summary: Get role details
      operationId: getRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Role details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    put:
      tags:
      - Role Management
      summary: Update Role
      operationId: updateRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestDto'
        required: true
      responses:
        "200":
          description: Role details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    delete:
      tags:
      - Role Management
      summary: Delete Role
      operationId: deleteRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Role deleted
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/roles/{roleUuid}/permissions/{resourceUuid}/objects/{objectUuid}:
    put:
      tags:
      - Role Management
      summary: Update Resource Objects to a Role
      operationId: updateResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectPermissionsRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Resource Objects added
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    delete:
      tags:
      - Role Management
      summary: Update Resource Objects to a Role
      operationId: removeResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Resource Objects added
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/keys/usages:
    put:
      tags:
      - Cryptographic Key Controller
      summary: Update Key Usages for Multiple Keys
      description: Update the key usages for multiple keys and all the items inside
        it
      operationId: updateKeysUsages_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkKeyUsageRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Keys Usages Updated
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/items/usages:
    put:
      tags:
      - Cryptographic Key Controller
      summary: Update Key Usages for Multiple Key Items
      description: Update the key usages for multiple keys Items
      operationId: updateKeyItemUsages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkKeyItemUsageRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Key Items Usages Updated
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/groups/{uuid}:
    get:
      tags:
      - Certificate & Key Group
      summary: Group details
      operationId: getGroup
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Group details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Certificate & Key Group
      summary: Edit Group
      operationId: editGroup
      parameters:
      - name: uuid
        in: path
        description: Group UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Certificate & Key Group
      summary: Delete Group
      operationId: deleteGroup
      parameters:
      - name: uuid
        in: path
        description: Group UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Group deleted
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}:
    get:
      tags:
      - Entity Management
      summary: Get Entity instance details
      operationId: getEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Authority instance details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityInstanceDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Entity Management
      summary: Edit Entity instance
      operationId: editEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityInstanceUpdateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Authority instance details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityInstanceDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Entity Management
      summary: Delete Entity instance
      operationId: deleteEntityInstance
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Entity instance deleted
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}:
    get:
      tags:
      - Location Management
      summary: Get Location Details
      operationId: getLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Location detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Location Management
      summary: Edit Location
      operationId: editLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditLocationRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Location updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Location Management
      summary: Delete Location
      operationId: deleteLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Location deleted
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}/sync:
    put:
      tags:
      - Location Management
      summary: Sync Location content
      operationId: updateLocationContent
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "200":
          description: Content updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}/certificates/{certificateUuid}:
    put:
      tags:
      - Location Management
      summary: Push Certificate to Location
      operationId: pushCertificate
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushToLocationRequestDto'
        required: true
      responses:
        "200":
          description: Certificate pushed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Location Management
      summary: Remove Certificate from Location
      operationId: removeCertificate
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    patch:
      tags:
      - Location Management
      summary: Renew Certificate in Location
      operationId: renewCertificateInLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "200":
          description: Content updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/credentials/{uuid}:
    get:
      tags:
      - Credential Management
      summary: Details of a Credentials
      operationId: getCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Credential details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Credential Management
      summary: Edit Credential
      operationId: editCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialUpdateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Credential updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Credential Management
      summary: Delete Credential
      operationId: deleteCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Credential deleted
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/{uuid}:
    get:
      tags:
      - Connector Management
      summary: Get details of a Connector
      operationId: getConnector
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Connector details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Connector Management
      summary: Edit a Connector
      operationId: editConnector
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorUpdateRequestDto'
        required: true
      responses:
        "200":
          description: Connector updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Connector Management
      summary: Delete a Connector
      operationId: deleteConnector
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Connector deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/{uuid}/reconnect:
    put:
      tags:
      - Connector Management
      summary: Reconnect to a Connector
      operationId: reconnect
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Reconnect to a Connector
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/{uuid}/approve:
    put:
      tags:
      - Connector Management
      summary: Approve a Connector
      operationId: approve
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Connector Approved
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/connectors/reconnect:
    put:
      tags:
      - Connector Management
      summary: Reconnect multiple Connectors
      operationId: bulkReconnect
      requestBody:
        description: Connector UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Reconnect multiple Connectors initiated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/connect:
    put:
      tags:
      - Connector Management
      summary: Connect to a Connector
      operationId: connect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectRequestDto'
        required: true
      responses:
        "200":
          description: Connector connected
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/approve:
    put:
      tags:
      - Connector Management
      summary: Approve multiple Connector
      operationId: bulkApprove
      requestBody:
        description: Connector UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: Approve multiple Connectors
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/certificates/{uuid}/validate:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate Validation Result
      operationId: getCertificateValidationResult
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Certificate validation detail retrieved
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/CertificateValidationDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Certificate Inventory
      summary: Initiate Certificate validation
      operationId: check
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate validation initiated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates/validate:
    put:
      tags:
      - Certificate Inventory
      summary: Validate Certificates of Status Unknown
      operationId: validateAllCertificate
      responses:
        "204":
          description: Certificate Validation Initiated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{uuid}:
    get:
      tags:
      - Authority Management
      summary: Details of an Authority instance
      operationId: getAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Authority instance details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityInstanceDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Authority Management
      summary: Edit Authority instance
      operationId: editAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorityInstanceUpdateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Authority instance details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityInstanceDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Authority Management
      summary: Delete Authority instance
      operationId: deleteAuthorityInstance
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Authority instance deleted
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}:
    get:
      tags:
      - RA Profile Management
      summary: Details of RA Profile
      operationId: getRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "200":
          description: RA Profile details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaProfileDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - RA Profile Management
      summary: Edit RA Profile
      operationId: editRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditRaProfileRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: RA Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaProfileDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - RA Profile Management
      summary: Delete RA Profile
      operationId: deleteRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: RA Profile deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auth/profile:
    get:
      tags:
      - Authentication Management
      summary: Profile Authorization
      operationId: profile
      responses:
        "200":
          description: Authenticate a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Authentication Management
      summary: Update User Profile
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
        required: true
      responses:
        "200":
          description: Authenticate a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/metadata/{uuid}:
    get:
      tags:
      - Global Metadata
      summary: Global Metadata details
      operationId: getGlobalMetadata
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Global Metadata details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalMetadataDefinitionDetailDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Global Metadata
      summary: Edit Global Metadata
      operationId: editGlobalMetadata
      parameters:
      - name: uuid
        in: path
        description: Global Metadata UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalMetadataUpdateRequestDto'
        required: true
      responses:
        "200":
          description: Global Metadata updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalMetadataDefinitionDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Global Metadata
      summary: Delete Global Metadata
      operationId: deleteGlobalMetadata
      parameters:
      - name: uuid
        in: path
        description: Global Metadata UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Global Metadata deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/{uuid}:
    get:
      tags:
      - Custom Attributes
      summary: Custom Attribute details
      operationId: getCustomAttribute
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Custom Attribute details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - Custom Attributes
      summary: Edit Custom Attribute
      operationId: editCustomAttribute
      parameters:
      - name: uuid
        in: path
        description: Attribute UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomAttributeUpdateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Custom Attribute updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionDetailDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Custom Attributes
      summary: Delete Custom Attribute
      operationId: deleteCustomAttribute
      parameters:
      - name: uuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Custom Attribute deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeProfiles/{uuid}:
    get:
      tags:
      - ACME Profile Management
      summary: Get details of ACME Profile
      operationId: getAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: ACME Profile details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeProfileDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    put:
      tags:
      - ACME Profile Management
      summary: Edit ACME Profile
      operationId: editAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcmeProfileEditRequestDto'
        required: true
      responses:
        "200":
          description: ACME Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeProfileDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - ACME Profile Management
      summary: Delete ACME Profile
      operationId: deleteAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: ACME Profile deleted
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeAccounts/revoke:
    put:
      tags:
      - ACME Account Management
      summary: Revoke multiple ACME Accounts
      operationId: bulkRevokeAcmeAccount
      requestBody:
        description: ACME Account UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: ACME Accounts revoked
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates:
    post:
      tags:
      - Client Operations v2
      summary: Issue Certificate
      operationId: issueCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateSignRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificateDataResponseDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/revoke:
    post:
      tags:
      - Client Operations v2
      summary: Revoke Certificate
      operationId: revokeCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateRevocationDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Certificate revoked
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/renew:
    post:
      tags:
      - Client Operations v2
      summary: Renew Certificate
      operationId: renewCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateRenewRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate renewed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificateDataResponseDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/rekey:
    post:
      tags:
      - Client Operations v2
      summary: Rekey Certificate
      operationId: rekeyCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateRekeyRequestDto'
        required: true
      responses:
        "200":
          description: Certificate regenerated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificateDataResponseDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke/validate:
    post:
      tags:
      - Client Operations v2
      summary: Validate revocation Attributes
      operationId: validateRevokeCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue/validate:
    post:
      tags:
      - Client Operations v2
      summary: Validate issue Certificate Attributes
      operationId: validateIssueCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/{resource}/{parentObjectUuid}/callback:
    post:
      tags:
      - Callback
      summary: Resource Callback API
      description: API to trigger the Callback for resource.
      operationId: resourceCallback
      parameters:
      - name: resource
        in: path
        description: Name of the resource
        required: true
        schema:
          $ref: '#/components/schemas/Resource'
      - name: parentObjectUuid
        in: path
        description: Parent Object UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestAttributeCallback'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Callback executed
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/users:
    get:
      tags:
      - User Management
      summary: List Users
      operationId: listUsers
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "200":
          description: List of users fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    post:
      tags:
      - User Management
      summary: Create User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequestDto'
        required: true
      responses:
        "201":
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/tokens:
    get:
      tags:
      - Token Instance Controller
      summary: List Token Instances
      operationId: listTokenInstances
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Token Instances retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenInstanceDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Token Instance Controller
      summary: Create a new Token Instance
      operationId: createTokenInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenInstanceRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "201":
          description: Token Instance Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInstanceDetailDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles:
    post:
      tags:
      - Token Profile Management
      summary: Create Token Profile
      operationId: createTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTokenProfileRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "201":
          description: Token Profile added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenProfileDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{type}:
    post:
      tags:
      - Cryptographic Key Controller
      summary: Create a new Cryptographic Key
      operationId: createKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: UUID of the Token Profile
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: Type of the key to be created
        required: true
        schema:
          $ref: '#/components/schemas/KeyRequestType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyRequestDto'
        required: true
      responses:
        "201":
          description: Cryptographic Key Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/roles:
    get:
      tags:
      - Role Management
      summary: List Roles
      operationId: listRoles
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: List of roles fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    post:
      tags:
      - Role Management
      summary: Create Role
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestDto'
        required: true
      responses:
        "201":
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/roles/{roleUuid}/permissions:
    get:
      tags:
      - Role Management
      summary: Get Permissions of a Role
      operationId: getRolePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "200":
          description: Role permissions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectPermissionsDto'
    post:
      tags:
      - Role Management
      summary: Add permissions to Role
      operationId: savePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePermissionsRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectPermissionsDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/roles/{roleUuid}/permissions/{resourceUuid}/objects:
    get:
      tags:
      - Role Management
      summary: Get Resource Objects of a Role
      operationId: getResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Resource Objects retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectPermissionsDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    post:
      tags:
      - Role Management
      summary: Add Resource Objects to a Role
      operationId: addResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ObjectPermissionsRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Resource Objects added
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/raProfiles/compliance:
    post:
      tags:
      - RA Profile Management
      summary: Initiate Certificate Compliance Check
      operationId: checkRaProfileCompliance
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Compliance check initiated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/verify:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Verify data using a Key
      operationId: verifyData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyDataRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "200":
          description: Data decrypted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyDataResponseDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/sign:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Sign data using a Key
      operationId: signData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignDataRequestDto'
        required: true
      responses:
        "200":
          description: Data signed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignDataResponseDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/encrypt:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Encrypt data using a Key
      operationId: encryptData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CipherDataRequestDto'
        required: true
      responses:
        "200":
          description: Data encrypted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptDataResponseDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/decrypt:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Decrypt data using a Key
      operationId: decryptData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CipherDataRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "200":
          description: Data decrypted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecryptDataResponseDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/tokens/{tokenInstanceUuid}/random:
    post:
      tags:
      - Cryptographic Operations Controller
      summary: Generate random data
      operationId: randomData
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RandomDataRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Random data generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomDataResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/local/admins:
    post:
      tags:
      - Local operations
      summary: Create Administrator
      operationId: addAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Admin created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys:
    post:
      tags:
      - Cryptographic Key Controller
      summary: List cryptographic keys
      operationId: listCryptographicKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: List of all the cryptographic keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptographicKeyResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Multiple Cryptographic Key
      operationId: deleteKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Keys deleted
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/groups:
    get:
      tags:
      - Certificate & Key Group
      summary: List Groups
      operationId: listGroups
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: list of available Group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Certificate & Key Group
      summary: Create Group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "201":
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Certificate & Key Group
      summary: Delete multiple Groups
      operationId: bulkDeleteGroup
      requestBody:
        description: Group UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Groups deleted
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities:
    get:
      tags:
      - Entity Management
      summary: List Entity instances
      operationId: listEntityInstances
      responses:
        "200":
          description: List of Entity instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityInstanceDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Entity Management
      summary: Add Entity instance
      operationId: createEntityInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityInstanceRequestDto'
        required: true
      responses:
        "201":
          description: Entity instance created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations:
    post:
      tags:
      - Location Management
      summary: Add Location
      operationId: addLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddLocationRequestDto'
        required: true
      responses:
        "201":
          description: Location added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}/certificates:
    post:
      tags:
      - Location Management
      summary: Issue Certificate to Location
      operationId: issueCertificateToLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueToLocationRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/attributes/location/validate:
    post:
      tags:
      - Entity Management
      summary: Validate Location Attributes
      operationId: validateLocationAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/discoveries:
    get:
      tags:
      - Discovery Management
      summary: List Discovery
      operationId: listDiscoveries
      responses:
        "200":
          description: List of available Discoveries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscoveryHistoryDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Discovery Management
      summary: Create Discovery
      operationId: createDiscovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "201":
          description: Discovery Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Discovery Management
      summary: Delete Multiple Discoveries
      operationId: bulkDeleteDiscovery
      requestBody:
        description: Discovery UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Discoveries deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/credentials:
    get:
      tags:
      - Credential Management
      summary: List of All Credentials
      operationId: listCredentials
      responses:
        "200":
          description: List of all Credentials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Credential Management
      summary: Add Credential
      operationId: createCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequestDto'
        required: true
      responses:
        "201":
          description: New Credential added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Credential Management
      summary: Delete multiple Credentials
      operationId: bulkDeleteCredential
      requestBody:
        description: Credential UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Credentials deleted
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/connectors:
    get:
      tags:
      - Connector Management
      summary: List Connectors by Function Group and Kind
      operationId: listConnectors
      parameters:
      - name: functionGroup
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/FunctionGroupCode'
      - name: kind
        in: query
        required: false
        schema:
          type: string
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ConnectorStatus'
      responses:
        "200":
          description: List all Connectors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Connector Management
      summary: Create a new Connector
      operationId: createConnector
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: New Connector created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Connector Management
      summary: Delete multiple Connectors
      operationId: bulkDeleteConnector
      requestBody:
        description: Connector UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: Connectors deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkActionMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/{uuid}/{functionGroup}/{kind}/validate:
    post:
      tags:
      - Connector Management
      summary: Validate Attributes
      operationId: validateAttributes
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      - name: functionGroup
        in: path
        description: Function Group name
        required: true
        schema:
          type: string
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Attributes Validated
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/{uuid}/{functionGroup}/{kind}/callback:
    post:
      tags:
      - Callback
      summary: Connector Callback API
      description: API to trigger the Callback for Connector.
      operationId: callback
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      - name: functionGroup
        in: path
        description: Function Group
        required: true
        schema:
          type: string
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestAttributeCallback'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Callback executed
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/attributes/jwt/validate:
    post:
      tags:
      - Connector Authentication
      summary: Validate JWT auth Attributes
      operationId: validateJWTAuthAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/attributes/certificate/validate:
    post:
      tags:
      - Connector Authentication
      summary: Validate certificate auth Attributes
      operationId: validateCertificateAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/attributes/basic/validate:
    post:
      tags:
      - Connector Authentication
      summary: Validate basic auth Attributes
      operationId: validateBasicAuthAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/attributes/apiKey/validate:
    post:
      tags:
      - Connector Authentication
      summary: Validate API Key Attributes
      operationId: validateApiKeyAuthAttributes
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connector/register:
    post:
      tags:
      - Connector Registration
      summary: Register a Connector
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Connector registration initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles:
    get:
      tags:
      - Compliance Profile Management
      summary: List of available Compliance Profiles
      operationId: listComplianceProfiles
      responses:
        "200":
          description: Compliance Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComplianceProfilesListDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Compliance Profile Management
      summary: Add Compliance Profile
      operationId: createComplianceProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplianceProfileRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "201":
          description: New Compliance profile added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Compliance Profile Management
      summary: Delete multiple Compliance Profiles
      operationId: bulkDeleteComplianceProfiles
      requestBody:
        description: Compliance Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: Compliance Profiles deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkActionMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/{uuid}/rules:
    post:
      tags:
      - Compliance Profile Management
      summary: Add rule to a Compliance Profile
      operationId: addRule
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplianceRuleAdditionRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: New rule added to the profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceProfileRuleDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Compliance Profile Management
      summary: Delete rule from a Compliance Profile
      operationId: removeRule
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplianceRuleDeletionRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: New group is added to the profile
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/{uuid}/groups:
    post:
      tags:
      - Compliance Profile Management
      summary: Add group to a Compliance Profile
      operationId: addGroup
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplianceGroupRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: New group is deleted from the profile
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Compliance Profile Management
      summary: Delete group from a Compliance Profile
      operationId: removeGroup
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplianceGroupRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: New rule is added to the profile
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/compliance:
    post:
      tags:
      - Compliance Profile Management
      summary: Initiate Certificate Compliance Check
      operationId: checkCompliance
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Compliance check initiated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates:
    post:
      tags:
      - Certificate Inventory
      summary: List Certificates
      operationId: listCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: List of all the certificates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateResponseDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    patch:
      tags:
      - Certificate Inventory
      summary: "Update RA Profile, Group, Owner for multiple Certificates"
      description: "In this operation, when the list of Certificate UUIDs are provided\
        \ and the filter is left as null or undefined, then the change will be applied\
        \ only to the list of Certificate UUIDs provided. When the filter is provided\
        \ in the request, the list of UUIDs will be ignored and the change will be\
        \ applied for the all the certificates that matches the filter criteria. To\
        \ apply this change for all the Certificates in the inventory, provide an\
        \ empty array \"[]\" for the value of \"filters\" in the request body"
      operationId: bulkUpdateCertificateObjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipleCertificateObjectUpdateDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Certificate objects updated
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates/upload:
    post:
      tags:
      - Certificate Inventory
      summary: Upload a new Certificate
      operationId: upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadCertificateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "201":
          description: Certificate uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates/delete:
    post:
      tags:
      - Certificate Inventory
      summary: Delete multiple certificates
      description: "In this operation, when the list of Certificate UUIDs are provided\
        \ and the filter is left as null or undefined, then the change will be applied\
        \ only to the list of Certificate UUIDs provided. When the filter is provided\
        \ in the request, the list of UUIDs will be ignored and the change will be\
        \ applied for the all the certificates that matches the filter criteria. To\
        \ apply this change for all the Certificates in the inventory, provide an\
        \ empty array \"[]\" for the value of \"filters\" in the request body"
      operationId: bulkDeleteCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCertificateDto'
        required: true
      responses:
        "200":
          description: Certificates deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates/compliance:
    post:
      tags:
      - Certificate Inventory
      summary: Initiate Certificate Compliance Check
      operationId: checkCertificatesCompliance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateComplianceCheckDto'
        required: true
      responses:
        "204":
          description: Compliance check initiated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities:
    get:
      tags:
      - Authority Management
      summary: List of available Authority instances
      operationId: listAuthorityInstances
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: List of Authority instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorityInstanceDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Authority Management
      summary: Add Authority instance
      operationId: createAuthorityInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorityInstanceRequestDto'
        required: true
      responses:
        "201":
          description: New Authority instance added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Authority Management
      summary: Delete multiple Authority instances
      operationId: bulkDeleteAuthorityInstance
      requestBody:
        description: Authority Instance UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Authority instances deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkActionMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{uuid}/attributes/raProfile/validate:
    post:
      tags:
      - Authority Management
      summary: Validate RA Profile Attributes
      operationId: validateRAProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Attribute information validated
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles:
    post:
      tags:
      - RA Profile Management
      summary: Create RA Profile
      operationId: createRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRaProfileRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "201":
          description: RA Profile added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/metadata:
    get:
      tags:
      - Global Metadata
      summary: List Global Metadata
      operationId: listGlobalMetadata
      responses:
        "200":
          description: list of available Global Metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinitionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Global Metadata
      summary: Create Global Metadata
      operationId: createGlobalMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalMetadataCreateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "201":
          description: Global Metadata created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Global Metadata
      summary: Delete multiple Global Metadata
      operationId: bulkDeleteGlobalMetadata
      requestBody:
        description: Global Metadata UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Global Metadata deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/metadata/promote:
    get:
      tags:
      - Global Metadata
      summary: Get Available Connector Metadata
      operationId: getConnectorMetadata
      parameters:
      - name: connectorUuid
        in: query
        required: false
        schema:
          type: string
      responses:
        "204":
          description: Connector Metadata retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorMetadataResponseDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Global Metadata
      summary: Promote Connector Metadata to Global Metadata
      operationId: promoteConnectorMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorMetadataPromotionRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Connector Metadata promoted to global metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalMetadataDefinitionDetailDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom:
    get:
      tags:
      - Custom Attributes
      summary: List Custom Attributes
      operationId: listCustomAttributes
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: list of available Custom Attributes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinitionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Custom Attributes
      summary: Create Custom Attribute
      operationId: createCustomAttribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomAttributeCreateRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "201":
          description: Custom Attribute created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Custom Attributes
      summary: Delete multiple Custom Attributes
      operationId: bulkDeleteCustomAttributes
      requestBody:
        description: Attribute UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Custom Attributes deleted
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeProfiles:
    get:
      tags:
      - ACME Profile Management
      summary: Get list of ACME Profiles
      operationId: listAcmeProfiles
      responses:
        "200":
          description: ACME Profile list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AcmeProfileListDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - ACME Profile Management
      summary: Create ACME Profile
      operationId: createAcmeProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcmeProfileRequestDto'
        required: true
      responses:
        "201":
          description: ACME Profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeProfiles/{acmeProfileUuid}/acmeAccounts/{acmeAccountUuid}:
    get:
      tags:
      - ACME Account Management
      summary: Details of ACME Account
      operationId: getAcmeAccount
      parameters:
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: acmeAccountUuid
        in: path
        description: ACME Account UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: ACME Account details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcmeAccountResponseDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - ACME Account Management
      summary: Revoke ACME Account
      operationId: revokeAcmeAccount
      parameters:
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: acmeAccountUuid
        in: path
        description: ACME Account UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: ACME Account revoked
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/users/{userUuid}/roles:
    get:
      tags:
      - User Management
      summary: Get User Roles
      operationId: getUserRoles
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "200":
          description: User roles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    patch:
      tags:
      - User Management
      summary: Add roles to User
      operationId: updateRoles
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Role UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/users/{userUuid}/enable:
    patch:
      tags:
      - User Management
      summary: Enable User
      operationId: enableUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/users/{userUuid}/disable:
    patch:
      tags:
      - User Management
      summary: Disable User
      operationId: disableUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/tokens/{uuid}/deactivate:
    patch:
      tags:
      - Token Instance Controller
      summary: Deactivate Token Instance
      operationId: deactivateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Token Instance Deactivated
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{uuid}/activate:
    patch:
      tags:
      - Token Instance Controller
      summary: Activate Token Instance
      operationId: activateTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Token Instance Activated
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}/enable:
    patch:
      tags:
      - Token Profile Management
      summary: Enable Token Profile
      operationId: enableTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Token Profile enabled
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{uuid}/disable:
    patch:
      tags:
      - Token Profile Management
      summary: Disable Token Profile
      operationId: disableTokenProfile
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Token Profile disabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/enable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Enable Key
      description: "If the request body provided, only those key items will be enabled.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be enabled"
      operationId: enableKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "204":
          description: Key enabled
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/disable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Disable Key
      description: "If the request body provided, only those key items will be disabled.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be disabled"
      operationId: disableKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Key disabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/destroy:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Destroy Cryptographic Key
      description: "If the request body provided, only those key items will be destroyed.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be destroyed"
      operationId: destroyKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Keys destroyed
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/compromise:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Mark Key and its Items as Compromised
      description: "If the request body is provided with the UUID of the items of\
        \ Key, then only those itemswill be compromised. Else all the sub items of\
        \ the key will be compromised"
      operationId: compromiseKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompromiseKeyRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Key marked as compromised
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokenProfiles/enable:
    patch:
      tags:
      - Token Profile Management
      summary: Enable multiple Token Profiles
      operationId: enableTokenProfiles
      requestBody:
        description: Token Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Token Profiles enabled
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokenProfiles/disable:
    patch:
      tags:
      - Token Profile Management
      summary: Disable multiple Token Profiles
      operationId: disableTokenProfiles
      requestBody:
        description: Token Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "204":
          description: Token Profiles disabled
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/roles/{roleUuid}/users:
    get:
      tags:
      - Role Management
      summary: Get Role Users
      operationId: getRoleUsers
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Role users retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
    patch:
      tags:
      - Role Management
      summary: Add users to Role
      operationId: updateUsers
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        description: User UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Role users updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/raProfiles/enable:
    patch:
      tags:
      - RA Profile Management
      summary: Enable multiple RA Profiles
      operationId: bulkEnableRaProfile
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: RA Profiles enabled
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/raProfiles/disable:
    patch:
      tags:
      - RA Profile Management
      summary: Disable multiple RA Profiles
      operationId: bulkDisableRaProfile
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: RA Profiles disabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/items/enable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Enable multiple Key Items
      operationId: enableKeyItems
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Key Items enabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/items/disable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Disable multiple Key Items
      operationId: disableKeyItems
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Key Items disabled
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/items/destroy:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Destroy Multiple Cryptographic Key items
      operationId: destroyKeyItems
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Keys Items destroyed
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/items/compromise:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Mark Multiple Key Items as Compromised
      description: This API can be used to mark multiple keys items to be marked as
        compromised.
      operationId: compromiseKeyItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCompromiseKeyItemRequestDto'
        required: true
      responses:
        "204":
          description: Key Items marked as compromised
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/enable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Enable multiple Keys
      operationId: enableKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Keys enabled
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/disable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Disable multiple Keys
      operationId: disableKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Keys disabled
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/destroy:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Destroy Multiple Cryptographic Key and its items
      operationId: destroyKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Keys destroyed
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/compromise:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Mark Multiple Key and all its Items as Compromised
      description: This API can be used to mark multiple keys and its sub items to
        be marked as compromised.Specific part of the key cannot be mentioned in this
        API
      operationId: compromiseKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCompromiseKeyRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Key marked as compromised
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}/enable:
    patch:
      tags:
      - Location Management
      summary: Enable Location
      operationId: enableLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Location enabled
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}/disable:
    patch:
      tags:
      - Location Management
      summary: Disable Location
      operationId: disableLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Location disabled
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/credentials/{uuid}/enable:
    patch:
      tags:
      - Credential Management
      summary: Enable Credential
      operationId: enableCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Credential enabled
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/credentials/{uuid}/disable:
    patch:
      tags:
      - Credential Management
      summary: Disable Credential
      operationId: disableCredential
      parameters:
      - name: uuid
        in: path
        description: Credential UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "204":
          description: Credential disabled
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/{uuid}/raProfiles/disassociate:
    patch:
      tags:
      - Compliance Profile Management
      summary: Disassociate Compliance Profile to RA Profile
      operationId: disassociateProfiles
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaProfileAssociationRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: RA Profile disassociation successful
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/complianceProfiles/{uuid}/raProfiles/associate:
    patch:
      tags:
      - Compliance Profile Management
      summary: Associate Compliance Profile to RA Profile
      operationId: associateProfiles
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaProfileAssociationRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: RA Profile association successful
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/certificates/{uuid}:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate Details
      operationId: getCertificate
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Certificate Inventory
      summary: Delete a certificate
      operationId: deleteCertificate
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Certificate deleted
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    patch:
      tags:
      - Certificate Inventory
      summary: Update Certificate Objects
      operationId: updateCertificateObjects
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateUpdateObjectsDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Certificate objects updated
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/enable:
    patch:
      tags:
      - RA Profile Management
      summary: Enable RA Profiles
      operationId: enableRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: RA Profile enabled
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/disable:
    patch:
      tags:
      - RA Profile Management
      summary: Disable RA Profiles
      operationId: disableRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: RA Profile disabled
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/acme/deactivate:
    patch:
      tags:
      - RA Profile Management
      summary: Deactivate ACME for RA Profile
      operationId: deactivateAcmeForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ACME deactivated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/acme/activate/{acmeProfileUuid}:
    patch:
      tags:
      - RA Profile Management
      summary: Activate ACME for RA Profile
      operationId: activateAcmeForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateAcmeForRaProfileRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: ACME activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaProfileAcmeDetailResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/{uuid}/resources:
    patch:
      tags:
      - Custom Attributes
      summary: Associate Custom Attribute to Resource
      operationId: updateResources
      parameters:
      - name: uuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      requestBody:
        description: List of Resources
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - raProfiles
            - authorities
        required: true
      responses:
        "204":
          description: Custom Attribute associated to the resources
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/{uuid}/enable:
    patch:
      tags:
      - Custom Attributes
      summary: Enable Custom Attribute
      operationId: enableCustomAttribute
      parameters:
      - name: uuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Custom Attribute enabled
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/{uuid}/disable:
    patch:
      tags:
      - Custom Attributes
      summary: Disable Custom Attribute
      operationId: disableCustomAttribute
      parameters:
      - name: uuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Custom Attribute disabled
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/resources/{resourceName}/objects/{objectUuid}/{attributeUuid}:
    delete:
      tags:
      - Custom Attributes
      summary: Delete Value of a Custom Attribute for a Resource
      operationId: deleteAttributeContentForResource
      parameters:
      - name: resourceName
        in: path
        description: Resource Type
        required: true
        schema:
          $ref: '#/components/schemas/Resource'
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      - name: attributeUuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Custom Attribute value deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseAttributeDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    patch:
      tags:
      - Custom Attributes
      summary: Update Value of a Custom Attribute for a Resource
      operationId: updateAttributeContentForResource
      parameters:
      - name: resourceName
        in: path
        description: Resource Type
        required: true
        schema:
          $ref: '#/components/schemas/Resource'
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      - name: attributeUuid
        in: path
        description: Custom Attribute UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BaseAttributeContentDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Custom Attribute value updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseAttributeDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/enable:
    patch:
      tags:
      - Custom Attributes
      summary: Enable multiple Custom Attributes
      operationId: bulkEnableCustomAttributes
      requestBody:
        description: Attribute UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Custom Attributes enabled
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/disable:
    patch:
      tags:
      - Custom Attributes
      summary: Disable multiple Custom Attributes
      operationId: bulkDisableCustomAttributes
      requestBody:
        description: Attribute UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Custom Attributes disabled
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeProfiles/{uuid}/raprofile/{raProfileUuid}:
    patch:
      tags:
      - ACME Profile Management
      summary: Update RA Profile for ACME Profile
      operationId: updateRaProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: RA Profile updated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/acmeProfiles/{uuid}/enable:
    patch:
      tags:
      - ACME Profile Management
      summary: Enable ACME Profile
      operationId: enableAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ACME Profile enabled
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/acmeProfiles/{uuid}/disable:
    patch:
      tags:
      - ACME Profile Management
      summary: Disable ACME Profile
      operationId: disableAcmeProfile
      parameters:
      - name: uuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: ACME Profile disabled
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/acmeProfiles/{acmeProfileUuid}/acmeAccounts/{acmeAccountUuid}/enable:
    patch:
      tags:
      - ACME Account Management
      summary: Enable ACME Account
      operationId: enableAcmeAccount
      parameters:
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: acmeAccountUuid
        in: path
        description: ACME Account UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ACME Account enabled
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeProfiles/{acmeProfileUuid}/acmeAccounts/{acmeAccountUuid}/disable:
    patch:
      tags:
      - ACME Account Management
      summary: Disable ACME Account
      operationId: disableAcmeAccount
      parameters:
      - name: acmeProfileUuid
        in: path
        description: ACME Profile UUID
        required: true
        schema:
          type: string
      - name: acmeAccountUuid
        in: path
        description: ACME Account UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: ACME Account disabled
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeProfiles/enable:
    patch:
      tags:
      - ACME Profile Management
      summary: Enable multiple ACME Profiles
      operationId: bulkEnableAcmeProfile
      requestBody:
        description: ACME Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: ACME Profiles enabled
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/acmeProfiles/disable:
    patch:
      tags:
      - ACME Profile Management
      summary: Disable multiple ACME Profile
      operationId: bulkDisableAcmeProfile
      requestBody:
        description: ACME Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: ACME Profiles disabled
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: No Content
  /v1/acmeAccounts/enable:
    patch:
      tags:
      - ACME Account Management
      summary: Enable multiple ACME Accounts
      operationId: bulkEnableAcmeAccount
      requestBody:
        description: ACME Account UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "204":
          description: ACME Accounts enabled
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeAccounts/disable:
    patch:
      tags:
      - ACME Account Management
      summary: Disable multiple ACME Accounts
      operationId: bulkDisableAcmeAccount
      requestBody:
        description: ACME Account UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: ACME Accounts disabled
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke:
    get:
      tags:
      - Client Operations v2
      summary: Get revocation Attributes
      operationId: listRevokeCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attributes obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue:
    get:
      tags:
      - Client Operations v2
      summary: Get issue Certificate Attributes
      operationId: listIssueCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/users/{userUuid}/permissions:
    get:
      tags:
      - User Management
      summary: Get User permissions
      operationId: getPermissions
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User permissions removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectPermissionsDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/tokens/{uuid}/tokenProfiles/attributes:
    get:
      tags:
      - Token Instance Controller
      summary: List Token Profile Attributes
      operationId: listTokenProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Token instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Token Profile Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{uuid}/activate/attributes:
    get:
      tags:
      - Token Instance Controller
      summary: List Token activation Attributes
      operationId: listTokenInstanceActivationAttributes
      parameters:
      - name: uuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Token activation Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{type}/attributes:
    get:
      tags:
      - Cryptographic Key Controller
      summary: List of Attributes to create a Key
      operationId: listCreateKeyAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: Type of the key to be created
        required: true
        schema:
          $ref: '#/components/schemas/KeyRequestType'
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/items/{keyItemUuid}:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Cryptographic Key Detail
      operationId: getKeyItem
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: UUID of the Key
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: UUID of the Key Item
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Cryptographic Key Detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyItemDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/items/{keyItemUuid}/history:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Key Item event history
      operationId: getEventHistory
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate event history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeyEventHistoryDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokenProfiles:
    get:
      tags:
      - Token Profile Management
      summary: List of available Token Profiles
      operationId: listTokenProfiles
      parameters:
      - name: enabled
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Token Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenProfileDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Token Profile Management
      summary: Delete multiple Token Profiles
      operationId: deleteTokenProfiles
      requestBody:
        description: Token Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "204":
          description: Token Profiles deleted
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/statistics:
    get:
      tags:
      - Statistics/Dashboard
      summary: Get Dashboard/Statistics Details
      operationId: getStatistics
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/roles/{roleUuid}/permissions/{resourceUuid}:
    get:
      tags:
      - Role Management
      summary: Get Resources of a Role
      operationId: getRoleResourcePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Role resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePermissionsDto'
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
  /v1/raProfiles:
    get:
      tags:
      - RA Profile Management
      summary: List of available RA Profiles
      operationId: listRaProfiles
      parameters:
      - name: enabled
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: RA Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RaProfileDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - RA Profile Management
      summary: Delete multiple RA Profiles
      operationId: bulkDeleteRaProfile
      requestBody:
        description: RA Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: RA Profiles deleted
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/raProfiles/{raProfileUuid}:
    get:
      tags:
      - RA Profile Management
      summary: Details of RA Profile
      operationId: getRaProfileWithoutAuthority
      parameters:
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "200":
          description: RA Profile details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaProfileDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - RA Profile Management
      summary: Delete RA Profile
      operationId: deleteRaProfileWithoutAuthority
      parameters:
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: RA Profile deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  ? /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/signature/{algorithm}/attributes
  : get:
      tags:
      - Cryptographic Operations Controller
      summary: List of signature Attributes
      operationId: listSignatureAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key instance UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      - name: algorithm
        in: path
        description: Cryptographic algorithm
        required: true
        schema:
          $ref: '#/components/schemas/CryptographicAlgorithm'
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  ? /v1/operations/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{uuid}/items/{keyItemUuid}/cipher/{algorithm}/attributes
  : get:
      tags:
      - Cryptographic Operations Controller
      summary: List of cipher Attributes
      operationId: listCipherAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      - name: algorithm
        in: path
        description: Cryptographic algorithm
        required: true
        schema:
          $ref: '#/components/schemas/CryptographicAlgorithm'
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/tokens/{tokenInstanceUuid}/random/attributes:
    get:
      tags:
      - Cryptographic Operations Controller
      summary: List of random generator Attributes
      operationId: listRandomAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/locations:
    get:
      tags:
      - Location Management
      summary: List Locations
      operationId: listLocations
      parameters:
      - name: enabled
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Locations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/search:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get CryptographicKey searchable fields information
      operationId: getSearchableFieldInformation
      responses:
        "200":
          description: CryptographicKey searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchFieldDataDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/pairs:
    get:
      tags:
      - Cryptographic Key Controller
      summary: List Cryptographic Keys with full Key Pairs
      description: This API contains the logic to get the keys that contains the full
        key pair (private and public Key)
      operationId: listKeyPairs
      parameters:
      - name: tokenProfileUuid
        in: query
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Cryptographic Keys retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeyDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}/attributes/push:
    get:
      tags:
      - Location Management
      summary: Get push Attributes
      operationId: listPushAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Push attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}/attributes/issue:
    get:
      tags:
      - Location Management
      summary: Get CSR Attributes
      operationId: listCsrAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: CSR Attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/entities/{entityUuid}/attributes/location:
    get:
      tags:
      - Entity Management
      summary: List Location Attributes
      operationId: listLocationAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Location attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/discoveries/{uuid}:
    get:
      tags:
      - Discovery Management
      summary: Discovery Details
      operationId: getDiscovery
      parameters:
      - name: uuid
        in: path
        description: Discovery UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Discovery details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryHistoryDetailDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Discovery Management
      summary: Delete Discovery
      operationId: deleteDiscovery
      parameters:
      - name: uuid
        in: path
        description: Discovery UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Discovery deleted
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/{uuid}/health:
    get:
      tags:
      - Connector Management
      summary: Check Health of a Connector
      operationId: checkHealth
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Health check completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/{uuid}/attributes:
    get:
      tags:
      - Connector Management
      summary: Get attributes of all Function Groups
      operationId: getAttributesAll
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attributes received
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/{uuid}/attributes/{functionGroup}/{kind}:
    get:
      tags:
      - Connector Management
      summary: Get Attributes from a Connector
      operationId: getAttributes
      parameters:
      - name: uuid
        in: path
        description: Connector UUID
        required: true
        schema:
          type: string
      - name: functionGroup
        in: path
        description: Function Group name
        required: true
        schema:
          $ref: '#/components/schemas/FunctionGroupCode'
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attributes received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/types:
    get:
      tags:
      - Connector Authentication
      summary: Get list of Authentication Types
      operationId: getAuthenticationTypes
      responses:
        "200":
          description: Auth Types retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/attributes/jwt:
    get:
      tags:
      - Connector Authentication
      summary: Get JWT auth Attributes
      operationId: getJWTAuthAttributes
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/attributes/certificate:
    get:
      tags:
      - Connector Authentication
      summary: Get Attributes for certificate auth
      operationId: getCertificateAttributes
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/attributes/basic:
    get:
      tags:
      - Connector Authentication
      summary: Get basic auth Attributes
      operationId: getBasicAuthAttributes
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/auth/attributes/apiKey:
    get:
      tags:
      - Connector Authentication
      summary: Get API Key auth Attributes
      operationId: getApiKeyAuthAttributes
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/{uuid}:
    get:
      tags:
      - Compliance Profile Management
      summary: Details of a Compliance Profiles
      operationId: getComplianceProfile
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Compliance Profile details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceProfileDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Compliance Profile Management
      summary: Delete Compliance Profile
      operationId: deleteComplianceProfile
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Compliance Profile deleted
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/{uuid}/raProfiles:
    get:
      tags:
      - Compliance Profile Management
      summary: Get RA Profiles for a Compliance Profile
      operationId: getAssociatedRAProfiles
      parameters:
      - name: uuid
        in: path
        description: Compliance Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: RA Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimplifiedRaProfileDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/rules:
    get:
      tags:
      - Compliance Profile Management
      summary: Get Compliance rules
      operationId: getComplianceRules
      parameters:
      - name: complianceProvider
        in: query
        required: false
        schema:
          type: string
      - name: kind
        in: query
        required: false
        schema:
          type: string
      - name: certificateType
        in: query
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CertificateType'
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Compliance rules retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComplianceRulesListResponseDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/groups:
    get:
      tags:
      - Compliance Profile Management
      summary: Get Compliance groups
      operationId: getComplianceGroups
      parameters:
      - name: complianceProvider
        in: query
        required: false
        schema:
          type: string
      - name: kind
        in: query
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Compliance groups retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComplianceGroupsListResponseDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates/{uuid}/history:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate event history
      operationId: getCertificateEventHistory
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate event history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CertificateEventHistoryDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates/{certificateUuid}/locations:
    get:
      tags:
      - Certificate Inventory
      summary: List of available Locations for the Certificate
      operationId: listCertificateLocations
      parameters:
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Locations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates/search:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate searchable fields information
      operationId: getSearchableFieldInformation_1
      responses:
        "200":
          description: Certificate searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchFieldDataDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/certificates/csr/attributes:
    get:
      tags:
      - Certificate Inventory
      summary: Get CSR Generation Attributes
      operationId: getCsrGenerationAttributes
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: CSR Generation attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{uuid}/endentityprofiles:
    get:
      tags:
      - Authority Management
      operationId: listEntityProfiles
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Entity profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameAndIdDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{uuid}/endentityprofiles/{endEntityProfileId}/certificateprofiles:
    get:
      tags:
      - Authority Management
      operationId: listCertificateProfiles
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameAndIdDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{uuid}/endentityprofiles/{endEntityProfileId}/cas:
    get:
      tags:
      - Authority Management
      operationId: listCAsInProfile
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      - name: endEntityProfileId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: CAs in Profile retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameAndIdDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{uuid}/attributes/raProfile:
    get:
      tags:
      - Authority Management
      summary: List RA Profile Attributes
      operationId: listRAProfileAttributes
      parameters:
      - name: uuid
        in: path
        description: Authority instance UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attribute information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/complianceProfiles:
    get:
      tags:
      - RA Profile Management
      summary: Get Compliance Profiles for an RA Profile
      operationId: getAssociatedComplianceProfiles
      parameters:
      - name: authorityUuid
        in: path
        description: Authority UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Compliance Profiles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimplifiedComplianceProfileDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke:
    get:
      tags:
      - RA Profile Management
      summary: Get revocation Attributes
      operationId: listRaProfileRevokeCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Revocation attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue:
    get:
      tags:
      - RA Profile Management
      summary: Get issue Certificate Attributes
      operationId: listRaProfileIssueCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Issue certificate attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/acme:
    get:
      tags:
      - RA Profile Management
      summary: Get ACME details for RA Profile
      operationId: getAcmeForRaProfile
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: ACME details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaProfileAcmeDetailResponseDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auth/resources:
    get:
      tags:
      - Authentication Management
      summary: Get all Resources
      operationId: getAllResources
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Resources retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auth/resources/{resourceName}/objects:
    get:
      tags:
      - Authentication Management
      summary: Get List of objects for Object Access
      operationId: getObjectsForResource
      parameters:
      - name: resourceName
        in: path
        description: Resource Name
        required: true
        schema:
          $ref: '#/components/schemas/Resource'
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Objects retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameAndUuidDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auditLogs:
    get:
      tags:
      - Audit Log
      summary: List Audit logs
      operationId: listAuditLogs
      parameters:
      - name: filter
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AuditLogFilter'
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: List of audit logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogResponseDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auditLogs/statuses:
    get:
      tags:
      - Audit Log
      summary: List Status
      operationId: listOperationStatuses
      responses:
        "200":
          description: List of audit log status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auditLogs/purge:
    get:
      tags:
      - Audit Log
      summary: Purge Audit logs
      operationId: purgeAuditLogs
      parameters:
      - name: filter
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AuditLogFilter'
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Audit logs purged
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auditLogs/operations:
    get:
      tags:
      - Audit Log
      summary: List Audit Operations
      operationId: listOperations
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: List of audit operations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auditLogs/objects:
    get:
      tags:
      - Audit Log
      summary: List Audit Objects
      operationId: listObjects
      responses:
        "200":
          description: List of audit Objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/auditLogs/export:
    get:
      tags:
      - Audit Log
      summary: Export Audit logs
      operationId: exportAuditLogs
      parameters:
      - name: filter
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AuditLogFilter'
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Export of audit logs
          content:
            application/json:
              schema:
                type: string
                format: binary
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/resources:
    get:
      tags:
      - Custom Attributes
      summary: Get available resources for Custom Attributes
      operationId: getResources
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: Custom Attribute retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/attributes/custom/resources/{resource}:
    get:
      tags:
      - Custom Attributes
      summary: Get Custom Attributes for a resource
      operationId: getResourceCustomAttributes
      parameters:
      - name: resource
        in: path
        description: Resource Name
        required: true
        schema:
          $ref: '#/components/schemas/Resource'
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Custom Attribute retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomAttribute'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeAccounts:
    get:
      tags:
      - ACME Account Management
      summary: List ACME Accounts
      operationId: listAcmeAccounts
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: ACME Accounts list retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AcmeAccountListResponseDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokens/delete:
    delete:
      tags:
      - Token Instance Controller
      description: Delete multiple Token Instance
      operationId: deleteTokenInstance_1
      requestBody:
        description: Token Instance UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "204":
          description: Token Instances deleted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/tokenProfiles/{uuid}:
    delete:
      tags:
      - Token Profile Management
      summary: Delete Token Profile
      operationId: deleteRaProfileWithoutTokenInstance
      parameters:
      - name: uuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Token Profile deleted
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/keys/items:
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Multiple Cryptographic Key Items
      operationId: deleteKeyItems
      requestBody:
        description: Key Items UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "204":
          description: Key Items deleted
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/connectors/force:
    delete:
      tags:
      - Connector Management
      summary: Force Delete multiple Connectors
      operationId: forceDeleteConnector
      requestBody:
        description: Connector UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "200":
          description: Connectors deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkActionMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/complianceProfiles/force:
    delete:
      tags:
      - Compliance Profile Management
      summary: Force delete Compliance Profiles
      operationId: forceDeleteComplianceProfiles
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: Compliance Profiles forced to delete
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkActionMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/authorities/force:
    delete:
      tags:
      - Authority Management
      summary: Force delete multiple Authority instances
      operationId: forceDeleteAuthorityInstances
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Authority instances forced to delete
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkActionMessageDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeProfiles/delete:
    delete:
      tags:
      - ACME Profile Management
      summary: Delete multiple ACME Profiles
      operationId: bulkDeleteAcmeProfile
      requestBody:
        description: ACME Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "200":
          description: ACME Profiles deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkActionMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/acmeProfiles/delete/force:
    delete:
      tags:
      - ACME Profile Management
      summary: Force delete multiple ACME Profiles
      operationId: forceDeleteACMEProfiles
      requestBody:
        description: ACME Profile UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: ACME Profiles forced to delete
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkActionMessageDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
components:
  schemas:
    AttributeCallback:
      required:
      - callbackContext
      - callbackMethod
      - mappings
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          uniqueItems: true
          type: array
          description: Mappings for the callback method
          items:
            $ref: '#/components/schemas/AttributeCallbackMapping'
      description: Optional definition of callback for getting the content of the
        Attribute based on the action
    AttributeCallbackMapping:
      required:
      - targets
      - to
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          $ref: '#/components/schemas/AttributeType'
        attributeContentType:
          $ref: '#/components/schemas/AttributeContentType'
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          uniqueItems: true
          type: array
          description: Set of targets for propagating value.
          items:
            $ref: '#/components/schemas/AttributeValueTarget'
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      description: Mappings for the callback method
    AttributeConstraintType:
      type: string
      description: Attribute Constraint Type
      enum:
      - regExp
      - range
      - dateTime
    AttributeContentType:
      type: string
      description: 'Type of the attribute content. '
      enum:
      - string
      - integer
      - secret
      - file
      - boolean
      - credential
      - date
      - float
      - object
      - text
      - time
      - datetime
    AttributeType:
      type: string
      description: Type of the attribute. It is optional and must be set only if special
        behaviour is needed.
      enum:
      - data
      - group
      - info
      - meta
      - custom
    AttributeValueTarget:
      type: string
      description: Set of targets for propagating value.
      enum:
      - pathVariable
      - requestParameter
      - body
    BaseAttributeConstraint:
      required:
      - data
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          type: object
          description: Attribute Constraint Data
      description: Optional regular expressions and constraints used for validating
        the Attribute content
      oneOf:
      - $ref: '#/components/schemas/RegexpAttributeConstraint'
      - $ref: '#/components/schemas/RangeAttributeConstraint'
      - $ref: '#/components/schemas/DateTimeAttributeConstraint'
    BaseAttributeContentDto:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Content Data
      description: Base Attribute content definition
      oneOf:
      - $ref: '#/components/schemas/BooleanAttributeContent'
      - $ref: '#/components/schemas/CredentialAttributeContent'
      - $ref: '#/components/schemas/DateAttributeContent'
      - $ref: '#/components/schemas/DateTimeAttributeContent'
      - $ref: '#/components/schemas/FileAttributeContent'
      - $ref: '#/components/schemas/FloatAttributeContent'
      - $ref: '#/components/schemas/IntegerAttributeContent'
      - $ref: '#/components/schemas/ObjectAttributeContent'
      - $ref: '#/components/schemas/SecretAttributeContent'
      - $ref: '#/components/schemas/StringAttributeContent'
      - $ref: '#/components/schemas/TextAttributeContent'
      - $ref: '#/components/schemas/TimeAttributeContent'
    BooleanAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: boolean
          description: Boolean attribute value
    CredentialAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/CredentialAttributeContentData'
    CredentialAttributeContentData:
      required:
      - attributes
      - kind
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: '#/components/schemas/DataAttribute'
      description: Credential attribute content data
    DataAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/DataAttributeProperties'
        constraints:
          type: array
          description: Optional regular expressions and constraints used for validating
            the Attribute content
          items:
            $ref: '#/components/schemas/BaseAttributeConstraint'
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
      description: Data attribute allows to store and transfer dynamic data. Its content
        can be edited and send in requests to store.
    DataAttributeProperties:
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
      description: Properties of the Attributes
    DateAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Date attribute value in format yyyy-MM-dd
          format: date
    DateTimeAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          $ref: '#/components/schemas/DateTimeAttributeConstraintData'
    DateTimeAttributeConstraintData:
      type: object
      properties:
        from:
          type: string
          description: Start of the datetime for validation
          format: date-time
        to:
          type: string
          description: End of the datetime for validation
          format: date-time
      description: DateTime Range Attribute Constraint Data
    DateTimeAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: DateTime attribute value in format yyyy-MM-ddTHH:mm:ss.SSSXXX
          format: date-time
    FileAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/FileAttributeContentData'
    FileAttributeContentData:
      required:
      - content
      - fileName
      - mimeType
      type: object
      properties:
        content:
          type: string
          description: File content
        fileName:
          type: string
          description: Name of the file
        mimeType:
          $ref: '#/components/schemas/MimeType'
      description: File attribute content data
    FloatAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: number
          description: Float attribute value
          format: float
    IntegerAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: integer
          description: Integer attribute value
          format: int32
    MimeType:
      type: object
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
        subtypeSuffix:
          type: string
        concrete:
          type: boolean
        charset:
          type: string
      description: Type of the file uploaded
    ObjectAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Object attribute content data
    RangeAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          $ref: '#/components/schemas/RangeAttributeConstraintData'
    RangeAttributeConstraintData:
      type: object
      properties:
        from:
          type: integer
          description: Start of the range for validation
          format: int32
        to:
          type: integer
          description: End of the range for validation
          format: int32
      description: Integer Range Attribute Constraint Data
    RegexpAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          type: string
          description: Regular Expression Attribute Constraint Data
    RequestAttributeDto:
      required:
      - content
      - name
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
      description: Request attribute to send attribute content for object
    SecretAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/SecretAttributeContentData'
    SecretAttributeContentData:
      type: object
      properties:
        secret:
          type: string
          description: Secret attribute data
        protectionLevel:
          type: string
          description: Level of protection of the data
      description: Secret attribute content data
    StringAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: String attribute value
    TextAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Text attribute value
    TimeAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Time attribute value in format HH:mm:ss
    UpdateUserRequestDto:
      required:
      - email
      type: object
      properties:
        description:
          type: string
          description: Description of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        certificateData:
          type: string
          description: Base64 Content of the admin certificate
        certificateUuid:
          type: string
          description: UUID of the existing certificate in the Inventory. Mandatory
            if certificate is not provided
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    AuthenticationServiceExceptionDto:
      required:
      - code
      - message
      - statusCode
      type: object
      properties:
        statusCode:
          type: integer
          description: Status code of the HTTP Request
          format: int32
        code:
          type: string
          description: Code of the result
        message:
          type: string
          description: Exception message
    ResponseAttributeDto:
      required:
      - contentType
      - label
      - name
      - type
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
      description: Response attribute with content for object it belongs to
    RoleDto:
      required:
      - name
      - systemRole
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the user
        systemRole:
          type: boolean
          description: "Is system role. True = Yes, False = No"
      description: Roles for the user
    UserCertificateDto:
      required:
      - fingerprint
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the certificate
        fingerprint:
          type: string
          description: Fingerprint of the certificate
      description: User Certificate details
    UserDetailDto:
      required:
      - enabled
      - roles
      - systemUser
      - username
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the User
          example: 5b5f0784-2519-11ed-861d-0242ac120002
        username:
          type: string
          description: Username of the user
          example: user1
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        description:
          type: string
          description: Description of the user
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        systemUser:
          type: boolean
          description: "Is System user. True = Yes, False = No"
        certificate:
          $ref: '#/components/schemas/UserCertificateDto'
        roles:
          type: array
          description: Roles for the user
          items:
            $ref: '#/components/schemas/RoleDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
    TokenInstanceRequestDto:
      required:
      - attributes
      - connectorUuid
      - customAttributes
      - kind
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Token Instance
        description:
          type: string
          description: Token Instance description
        connectorUuid:
          type: string
          description: UUID of the Connector
        kind:
          type: string
          description: Connector Kind
        customAttributes:
          type: array
          description: Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        attributes:
          type: array
          description: Attributes for Token Instance
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    MetadataResponseDto:
      required:
      - connectorName
      - connectorUuid
      - items
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Connector
        connectorName:
          type: string
          description: Name of the Connector
        items:
          type: array
          description: List of Metadata
          items:
            $ref: '#/components/schemas/ResponseMetadataDto'
      description: Metadata response attributes with their source connector
    NameAndUuidDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
      description: Source Objects
    ResponseMetadataDto:
      required:
      - contentType
      - label
      - name
      - type
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        sourceObjectType:
          type: string
          description: Source Object Type
        sourceObjects:
          type: array
          description: Source Objects
          items:
            $ref: '#/components/schemas/NameAndUuidDto'
      description: Response metadata attribute instance with content
    TokenInstanceDetailDto:
      required:
      - attributes
      - name
      - status
      - tokenProfiles
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        connectorName:
          type: string
          description: Connector Name
        connectorUuid:
          type: string
          description: Connector UUID
        kind:
          type: string
          description: Connector Kind
        status:
          $ref: '#/components/schemas/TokenInstanceStatusDetailDto'
        tokenProfiles:
          type: integer
          description: Number of Token Profiles associated
          format: int32
        attributes:
          type: array
          description: List of Token instance Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        metadata:
          type: array
          description: Token instance Metadata
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
        customAttributes:
          type: array
          description: Custom Attributes for the Token Instance
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
    TokenInstanceStatus:
      type: string
      description: Token instance component status
      enum:
      - Connected
      - Disconnected
      - Activated
      - Deactivated
      - Warning
      - Unknown
    TokenInstanceStatusComponent:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TokenInstanceStatus'
        details:
          type: object
          additionalProperties:
            type: object
            description: Token instance component details
          description: Token instance component details
      description: Components of the Token instance status
    TokenInstanceStatusDetailDto:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TokenInstanceStatus'
        components:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TokenInstanceStatusComponent'
          description: Components of the Token instance status
      description: Status Of the Token Instance
    EditTokenProfileRequestDto:
      required:
      - attributes
      type: object
      properties:
        description:
          type: string
          description: Description of Token Profile
        attributes:
          type: array
          description: List of Attributes for Token Profile
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
    KeyUsage:
      type: string
      description: Usages for the Key
      enum:
      - sign
      - verify
      - encrypt
      - decrypt
      - wrap
      - unwrap
    TokenProfileDetailDto:
      required:
      - attributes
      - enabled
      - name
      - tokenInstanceName
      - tokenInstanceStatus
      - tokenInstanceUuid
      - usages
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of Token Profile
        tokenInstanceUuid:
          type: string
          description: UUID of Token Instance
        tokenInstanceName:
          type: string
          description: Name of Token instance
        attributes:
          type: array
          description: List of Token Profile attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        tokenInstanceStatus:
          $ref: '#/components/schemas/TokenInstanceStatus'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        usages:
          type: array
          description: Usages for the Keys assoiated to the profile
          items:
            $ref: '#/components/schemas/KeyUsage'
    TokenProfileKeyUsageRequestDto:
      required:
      - usage
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
    EditKeyRequestDto:
      required:
      - description
      - name
      - tokenProfileUuid
      type: object
      properties:
        tokenProfileUuid:
          type: string
          description: UUID of the token profile
        name:
          type: string
          description: Name of the Cryptographic Key
        description:
          type: string
          description: Description of the Cryptographic Key
        owner:
          type: string
          description: Key Owner
        groupUuid:
          type: string
          description: UUID of the group
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    CryptographicAlgorithm:
      type: string
      description: Key Algorithm
      enum:
      - RSA
      - ECDSA
      - FALCON
      - CRYSTALS-Dilithium
      - SPHINCS+
    GroupDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Certificate Group
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
      description: Key Group
    KeyAssociationDto:
      required:
      - name
      - resource
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        resource:
          $ref: '#/components/schemas/Resource'
      description: List of associated items
    KeyCompromiseReason:
      type: string
      description: Reason for Compromise
      enum:
      - Unauthorized Disclosure
      - Unauthorized Modification
      - Unauthorized Substitution
      - Unauthorized use of sensitive data
    KeyDetailDto:
      required:
      - attributes
      - creationTime
      - description
      - items
      - name
      - tokenInstanceName
      - tokenInstanceUuid
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
          format: date-time
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
        customAttributes:
          type: array
          description: Custom Attributes for the Cryptographic Key
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        attributes:
          type: array
          description: Attributes for the Cryptographic Key
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        owner:
          type: string
          description: Owner of the Key
        group:
          $ref: '#/components/schemas/GroupDto'
        items:
          type: array
          description: Key Objects
          items:
            $ref: '#/components/schemas/KeyItemDetailDto'
        associations:
          type: array
          description: List of associated items
          items:
            $ref: '#/components/schemas/KeyAssociationDto'
    KeyFormat:
      type: string
      description: Key Format
      enum:
      - Raw
      - SubjectPublicKeyInfo
      - PrivateKeyInfo
      - EncryptedPrivateKeyInfo
      - Custom
    KeyItemDetailDto:
      required:
      - cryptographicAlgorithm
      - enabled
      - keyReferenceUuid
      - name
      - state
      - type
      - usage
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        keyReferenceUuid:
          type: string
          description: UUID of the key item in the Connector
        type:
          $ref: '#/components/schemas/KeyType'
        cryptographicAlgorithm:
          $ref: '#/components/schemas/CryptographicAlgorithm'
        format:
          $ref: '#/components/schemas/KeyFormat'
        length:
          type: integer
          description: Key Length
          format: int32
        metadata:
          type: array
          description: Metadata for the key
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
        usage:
          type: array
          description: Key Usages
          items:
            $ref: '#/components/schemas/KeyUsage'
        enabled:
          type: boolean
          description: Boolean describing if the key is enabled or not
        state:
          $ref: '#/components/schemas/KeyState'
        reason:
          $ref: '#/components/schemas/KeyCompromiseReason'
      description: Key Objects
    KeyState:
      type: string
      description: Key State
      enum:
      - pre-active
      - active
      - deactivated
      - compromised
      - destroyed
      - compromisedDestroyed
    KeyType:
      type: string
      description: Type of the Key
      enum:
      - Secret key
      - Public key
      - Private key
      - Split key
    Resource:
      type: string
      description: Type of the resource
      enum:
      - NONE
      - dashboard
      - auditLogs
      - credentials
      - connectors
      - users
      - roles
      - acmeAccounts
      - acmeProfiles
      - authorities
      - raProfiles
      - certificates
      - groups
      - complianceProfiles
      - discoveries
      - entities
      - locations
      - tokenProfiles
      - tokens
      - keys
      - attributes
    UpdateKeyUsageRequestDto:
      required:
      - usage
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
        uuids:
          type: array
          description: "List of UUIDs of the key Items. If not provided, the usage\
            \ will be updated to all the itemsin the key"
          items:
            type: string
            description: "List of UUIDs of the key Items. If not provided, the usage\
              \ will be updated to all the itemsin the key"
            format: uuid
    BulkTokenProfileKeyUsageRequestDto:
      required:
      - usage
      - uuids
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
        uuids:
          type: array
          description: Token Profile UUIDs
          items:
            type: string
            description: Token Profile UUIDs
            format: uuid
    RoleRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the role
        description:
          type: string
          description: Description for the role
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    RoleDetailDto:
      required:
      - name
      - systemRole
      - users
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the user
        systemRole:
          type: boolean
          description: "Is system role. True = Yes, False = No"
        users:
          type: array
          description: List of Users with the role
          items:
            $ref: '#/components/schemas/UserDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
    UserDto:
      required:
      - enabled
      - systemUser
      - username
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the User
          example: 5b5f0784-2519-11ed-861d-0242ac120002
        username:
          type: string
          description: Username of the user
          example: user1
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        description:
          type: string
          description: Description of the user
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        systemUser:
          type: boolean
          description: "Is System user. True = Yes, False = No"
      description: List of Users with the role
    ObjectPermissionsRequestDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Object
        name:
          type: string
          description: Name of the Object
        allow:
          type: array
          description: Allowed Action list
          items:
            type: string
            description: Allowed Action list
        deny:
          type: array
          description: Denied Action list
          items:
            type: string
            description: Denied Action list
    BulkKeyUsageRequestDto:
      required:
      - usage
      - uuids
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
        uuids:
          type: array
          description: Key UUIDs
          items:
            type: string
            description: Key UUIDs
            format: uuid
    BulkKeyItemUsageRequestDto:
      required:
      - usage
      - uuids
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
        uuids:
          type: array
          description: Key Item UUIDs
          items:
            type: string
            description: Key Item UUIDs
            format: uuid
    GroupRequestDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Certificate Group
        description:
          type: string
          description: Description of the Certificate Group
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    EntityInstanceUpdateRequestDto:
      required:
      - attributes
      type: object
      properties:
        attributes:
          type: array
          description: List of Entity instance Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    EntityInstanceDto:
      required:
      - attributes
      - connectorName
      - connectorUuid
      - kind
      - name
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        attributes:
          type: array
          description: List of Entity instance Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        status:
          type: string
          description: Status of Entity instance
        connectorUuid:
          type: string
          description: UUID of Entity Provider
        connectorName:
          type: string
          description: Name of Entity Provider
        kind:
          type: string
          description: Entity instance Kind
          example: "Keystore, etc."
    EditLocationRequestDto:
      required:
      - attributes
      type: object
      properties:
        description:
          type: string
          description: Description of the Location
        attributes:
          type: array
          description: List of Attributes for Location
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
    CertificateInLocationDto:
      required:
      - certificateUuid
      - commonName
      - metadata
      - serialNumber
      type: object
      properties:
        certificateUuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Common Name of the Subject DN field of the Certificate
        serialNumber:
          type: string
          description: Serial number in HEX of the Certificate
        metadata:
          type: array
          description: Metadata of the Certificate in Location
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
        pushAttributes:
          type: array
          description: Applied push attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        csrAttributes:
          type: array
          description: Applied issue attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        withKey:
          type: boolean
          description: If the Certificate in Location has associated private key
          default: false
      description: List of Certificates in Location
    LocationDto:
      required:
      - attributes
      - certificates
      - enabled
      - entityInstanceName
      - entityInstanceUuid
      - name
      - supportKeyManagement
      - supportMultipleEntries
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Location
        entityInstanceUuid:
          type: string
          description: UUID of Entity instance
        entityInstanceName:
          type: string
          description: Name of Entity instance
        attributes:
          type: array
          description: List of Location attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        supportMultipleEntries:
          type: boolean
          description: If the location supports multiple Certificates
          default: false
        supportKeyManagement:
          type: boolean
          description: If the location supports key management operations
          default: false
        certificates:
          type: array
          description: List of Certificates in Location
          items:
            $ref: '#/components/schemas/CertificateInLocationDto'
        metadata:
          type: array
          description: Location metadata
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
    PushToLocationRequestDto:
      required:
      - attributes
      type: object
      properties:
        attributes:
          type: array
          description: List of push Attributes for Location
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    CredentialUpdateRequestDto:
      required:
      - attributes
      type: object
      properties:
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    CredentialDto:
      required:
      - attributes
      - connectorName
      - connectorUuid
      - enabled
      - kind
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        connectorUuid:
          type: string
          description: UUID of Credential provider Connector
        connectorName:
          type: string
          description: Name of Credential provider Connector
    AuthType:
      type: string
      description: Type of authentication for the Connector
      example: none
      enum:
      - none
      - basic
      - certificate
      - apiKey
      - jwt
    ConnectorUpdateRequestDto:
      type: object
      properties:
        url:
          type: string
          description: URL of the Connector to connect
          example: http://network-discovery-provicer:8080
        authType:
          $ref: '#/components/schemas/AuthType'
        authAttributes:
          type: array
          description: List of authentication Attributes. Required if the authentication
            type is not NONE
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    ConnectorDto:
      required:
      - authType
      - functionGroups
      - name
      - status
      - url
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        functionGroups:
          type: array
          description: List of Function Groups implemented by the Connector
          items:
            $ref: '#/components/schemas/FunctionGroupDto'
        url:
          type: string
          description: URL of the Connector
          example: http://network-discovery-provider:8080
        authType:
          $ref: '#/components/schemas/AuthType'
        authAttributes:
          type: array
          description: List of Attributes for the authentication type
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        status:
          $ref: '#/components/schemas/ConnectorStatus'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
    ConnectorStatus:
      type: string
      description: Status of the Connector
      example: CONNECTED
      enum:
      - waitingForApproval
      - connected
      - failed
      - offline
    EndpointDto:
      required:
      - context
      - method
      - name
      - required
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        context:
          type: string
          description: Context of the Endpoint
          example: /v1
        method:
          type: string
          description: Method to be used for the Endpoint
          example: POST
        required:
          type: boolean
          description: True if the Endpoint is required for implementation
          example: true
      description: List of end points related to functional group
    FunctionGroupCode:
      type: string
      description: Enumerated code of functional group
      enum:
      - credentialProvider
      - legacyAuthorityProvider
      - authorityProvider
      - discoveryProvider
      - entityProvider
      - complianceProvider
      - cryptographyProvider
    FunctionGroupDto:
      required:
      - endPoints
      - functionGroupCode
      - kinds
      - name
      - uuid
      type: object
      properties:
        functionGroupCode:
          $ref: '#/components/schemas/FunctionGroupCode'
        kinds:
          type: array
          description: List of supported functional group kinds
          example:
          - SoftKeyStore
          - Basic
          - ApiKey
          items:
            type: string
            description: List of supported functional group kinds
            example: "[\"SoftKeyStore\",\"Basic\",\"ApiKey\"]"
        endPoints:
          type: array
          description: List of end points related to functional group
          items:
            $ref: '#/components/schemas/EndpointDto'
        uuid:
          type: string
          description: UUID of the Function Group
          example: 204a57f6-2ed3-45b6-bf09-af8b8c900e33
        name:
          type: string
          description: Function Group Name
      description: List of Function Groups implemented by the Connector
    ConnectDto:
      required:
      - functionGroup
      type: object
      properties:
        functionGroup:
          $ref: '#/components/schemas/FunctionGroupDto'
    ConnectRequestDto:
      required:
      - authType
      - url
      type: object
      properties:
        url:
          type: string
          description: URL of the Connector to connect
          example: http://network-discovery-provicer:8080
        uuid:
          type: string
          description: UUID of the Connector. Mandatory if connection is needed for
            the same Connector
        authType:
          $ref: '#/components/schemas/AuthType'
        authAttributes:
          type: array
          description: List of authentication Attributes. Required if the authentication
            type is not NONE
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    AuthorityInstanceUpdateRequestDto:
      required:
      - attributes
      type: object
      properties:
        attributes:
          type: array
          description: List of Authority instance Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    AuthorityInstanceDto:
      required:
      - attributes
      - connectorName
      - connectorUuid
      - kind
      - name
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        attributes:
          type: array
          description: List of Authority instance Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        status:
          type: string
          description: Status of Authority instance
        connectorUuid:
          type: string
          description: UUID of Authority provider
        connectorName:
          type: string
          description: Name of Authority provider
        kind:
          type: string
          description: Authority Instance Kind
          example: "LegacyEjbca, ADCS, etc."
    EditRaProfileRequestDto:
      required:
      - attributes
      type: object
      properties:
        description:
          type: string
          description: Description of RA Profile
        attributes:
          type: array
          description: List of Attributes for RA Profile
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
    RaProfileDto:
      required:
      - attributes
      - authorityInstanceName
      - authorityInstanceUuid
      - enabled
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of RA Profile
        authorityInstanceUuid:
          type: string
          description: UUID of Authority provider
        authorityInstanceName:
          type: string
          description: Name of Authority instance
        attributes:
          type: array
          description: List of RA Profiles attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        enabledProtocols:
          type: array
          description: List of protocols enabled
          items:
            type: string
            description: List of protocols enabled
    GlobalMetadataUpdateRequestDto:
      required:
      - description
      - label
      type: object
      properties:
        description:
          type: string
          description: Attribute description
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
    GlobalMetadataDefinitionDetailDto:
      required:
      - contentType
      - description
      - label
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        description:
          type: string
          description: Attribute description
        enabled:
          type: boolean
          description: Boolean determining if the Attribute is enabled. Required only
            for Custom Attribute
        type:
          $ref: '#/components/schemas/AttributeType'
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
    CustomAttributeUpdateRequestDto:
      required:
      - description
      - label
      type: object
      properties:
        description:
          type: string
          description: Attribute description
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
        content:
          type: array
          description: Predefined content for the attribute if needed. The content
            of the Attribute must satisfy the type
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        resources:
          type: array
          description: List of resource to be associated with the custom attribute
          items:
            $ref: '#/components/schemas/Resource'
    CustomAttributeDefinitionDetailDto:
      required:
      - contentType
      - description
      - label
      - name
      - required
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        description:
          type: string
          description: Attribute description
        enabled:
          type: boolean
          description: Boolean determining if the Attribute is enabled. Required only
            for Custom Attribute
        type:
          $ref: '#/components/schemas/AttributeType'
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
        content:
          type: array
          description: Predefined content for the attribute if needed. The content
            of the Attribute must satisfy the type
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        resources:
          type: array
          description: List of resources which are allowed to use the Custom Attribute
          items:
            $ref: '#/components/schemas/Resource'
    AcmeProfileEditRequestDto:
      required:
      - issueCertificateAttributes
      - revokeCertificateAttributes
      type: object
      properties:
        description:
          type: string
          description: Description of the ACME Profile
          example: Sample description
        termsOfServiceUrl:
          type: string
          description: Terms of Service URL
          example: https://sample-url.com/termsOfService
        websiteUrl:
          type: string
          description: Website URL
          example: https://sample-url.com
        dnsResolverIp:
          type: string
          description: DNS Resolver IP address
          example: 8.8.8.8
          default: System Default
        dnsResolverPort:
          type: string
          description: DNS Resolver port number
          example: "53"
          default: "53"
        raProfileUuid:
          type: string
          description: RA Profile UUID
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        retryInterval:
          type: integer
          description: Retry interval for the Orders
          format: int32
          example: 60
          default: 30
        termsOfServiceChangeDisable:
          type: boolean
          description: Disable new Orders due to change in Terms of Service
          example: false
          default: false
        termsOfServiceChangeUrl:
          type: string
          description: Changes of Terms of Service URL
          example: https://sample-url.com/termsOfService/change
        validity:
          type: integer
          description: Order Validity
          format: int32
          example: 3000
          default: 36000
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        requireContact:
          type: boolean
          description: Require contact information for new Account
          example: true
          default: false
        requireTermsOfService:
          type: boolean
          description: Require new Account to agree on Terms of Service
          example: false
          default: false
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    AcmeProfileDto:
      required:
      - enabled
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        description:
          type: string
          description: ACME Profile description
          example: Sample description
        termsOfServiceUrl:
          type: string
          description: Terms of Service URL
          example: https://sample-url.com/termsOfService
        websiteUrl:
          type: string
          description: Website URL
          example: https://sample-company.com
        dnsResolverIp:
          type: string
          description: DNS Resolver IP address
          example: 8.8.8.8
        dnsResolverPort:
          type: string
          description: DNS Resolver port number
          example: "53"
        raProfile:
          $ref: '#/components/schemas/RaProfileDto'
        retryInterval:
          type: integer
          description: Retry interval for ACME client requests
          format: int32
          example: 30
        termsOfServiceChangeDisable:
          type: boolean
          description: Disable new Orders (change in Terms of Service)
          example: false
        validity:
          type: integer
          description: Order validity
          format: int32
          example: 36000
        directoryUrl:
          type: string
          description: ACME Directory URL
          example: https://some-server.com/api/acme/profile1/directory
        termsOfServiceChangeUrl:
          type: string
          description: Changes of Terms of Service URL
          example: https://some-company.com/termsOfService/change
        requireContact:
          type: boolean
          description: Require Contact information for new Account
          example: true
        requireTermsOfService:
          type: boolean
          description: Require new Account to agree on Terms of Service
          example: true
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue a Certificate
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke a Certificate
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
    ClientCertificateSignRequestDto:
      required:
      - attributes
      - pkcs10
      type: object
      properties:
        csrAttributes:
          type: array
          description: List of attributes to create CSR. Required if CSR is not provided
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        signatureAttributes:
          type: array
          description: List of attributes to sign the CSR
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        pkcs10:
          type: string
          description: Certificate sign request (PKCS#10) encoded as Base64 string
        tokenProfileUuid:
          type: string
          description: Token Profile UUID. Required if CSR is not uploaded
          format: uuid
        keyUuid:
          type: string
          description: Key UUID. Required if CSR is not uploaded
          format: uuid
        attributes:
          type: array
          description: List of RA Profile related Attributes to issue Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    ClientCertificateDataResponseDto:
      required:
      - certificateData
      - uuid
      type: object
      properties:
        certificateData:
          type: string
          description: Base64 encoded Certificate content
        uuid:
          type: string
          description: UUID of Certificate
    ClientCertificateRevocationDto:
      required:
      - attributes
      type: object
      properties:
        reason:
          type: string
          description: Reason for revocation
          default: UNSPECIFIED
          enum:
          - UNSPECIFIED
          - KEY_COMPROMISE
          - CA_COMPROMISE
          - AFFILIATION_CHANGED
          - SUPERSEDED
          - CESSATION_OF_OPERATION
          - CERTIFICATE_HOLD
          - REMOVE_FROM_CRL
          - PRIVILEGES_WITHDRAWN
          - AA_COMPROMISE
        attributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        destroyKey:
          type: boolean
          description: Destroy Key upon successful revocation
          default: false
    ClientCertificateRenewRequestDto:
      type: object
      properties:
        replaceInLocations:
          type: boolean
          description: True to replace renewed certificate in the associated locations
          default: false
        pkcs10:
          type: string
          description: "Certificate sign request (PKCS#10) encoded as Base64 string.\
            \ If not provided, Existing CSR will be used"
    ClientCertificateRekeyRequestDto:
      required:
      - keyUuid
      - tokenProfileUuid
      type: object
      properties:
        replaceInLocations:
          type: boolean
          description: True to replace renewed certificate in the associated locations
          default: false
        pkcs10:
          type: string
          description: "Certificate sign request (PKCS#10) encoded as Base64 string.\
            \ If not provided, CSR attributes will be used"
        keyUuid:
          type: string
          description: Key UUID
          format: uuid
        tokenProfileUuid:
          type: string
          description: Token Profile UUID
          format: uuid
        csrAttributes:
          type: array
          description: "CSR Attributes. If not provided, existing attributes will\
            \ be used to generate the new CSR"
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        signatureAttributes:
          type: array
          description: "Signature Attributes. If not provided, existing attributes\
            \ will be used to generate the new CSR"
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    RequestAttributeCallback:
      required:
      - name
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        pathVariable:
          type: object
          additionalProperties:
            type: object
            description: Map of path variables supported by the callback method
          description: Map of path variables supported by the callback method
        requestParameter:
          type: object
          additionalProperties:
            type: object
            description: Map of the query parameters supported by the callback method
          description: Map of the query parameters supported by the callback method
        body:
          type: object
          additionalProperties:
            type: object
            description: Request body for the callback method
          description: Request body for the callback method
    AddUserRequestDto:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: user1
        description:
          type: string
          description: Description of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        certificateData:
          type: string
          description: Base64 Content of the user certificate
        certificateUuid:
          type: string
          description: UUID of the existing certificate in the Inventory
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    AddTokenProfileRequestDto:
      required:
      - attributes
      - name
      type: object
      properties:
        name:
          type: string
          description: Token Profile name
        description:
          type: string
          description: Token Profile description
        attributes:
          type: array
          description: List of Attributes to create Token Profile
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
          default: false
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
    KeyRequestType:
      type: string
      enum:
      - secret
      - keyPair
    KeyRequestDto:
      required:
      - attributes
      - description
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Cryptographic Key
        description:
          type: string
          description: Description of the Cryptographic Key
        owner:
          type: string
          description: Key Owner
        groupUuid:
          type: string
          description: UUID of the group
        attributes:
          type: array
          description: List of Attributes to create a Key
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: Custom Attributes for the key
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    ResourcePermissionsRequestDto:
      required:
      - allowAllActions
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Resource
        allowAllActions:
          type: boolean
          description: "Allow all actions. True = Yes, False = No"
        actions:
          type: array
          description: List of actions permitted
          items:
            type: string
            description: List of actions permitted
        objects:
          type: array
          description: Object permissions
          items:
            $ref: '#/components/schemas/ObjectPermissionsRequestDto'
      description: Resources
    RolePermissionsRequestDto:
      required:
      - allowAllResources
      type: object
      properties:
        allowAllResources:
          type: boolean
          description: "Allow all resources, True = Yes, False = No"
        resources:
          type: array
          description: Resources
          items:
            $ref: '#/components/schemas/ResourcePermissionsRequestDto'
    ObjectPermissionsDto:
      required:
      - allow
      - deny
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Object
        name:
          type: string
          description: Name of the Object
        allow:
          type: array
          description: Allowed Action list
          items:
            type: string
            description: Allowed Action list
        deny:
          type: array
          description: Denied Action list
          items:
            type: string
            description: Denied Action list
      description: Object permissions
    ResourcePermissionsDto:
      required:
      - actions
      - allowAllActions
      - name
      - objects
      type: object
      properties:
        name:
          type: string
          description: Name of the Resource
        allowAllActions:
          type: boolean
          description: "Allow all actions. True = Yes, False = No"
        actions:
          type: array
          description: List of actions permitted
          items:
            type: string
            description: List of actions permitted
        objects:
          type: array
          description: Object permissions
          items:
            $ref: '#/components/schemas/ObjectPermissionsDto'
      description: Resources
    SubjectPermissionsDto:
      required:
      - allowAllResources
      - resources
      type: object
      properties:
        allowAllResources:
          type: boolean
          description: "Allow all resources, True = Yes, False = No"
        resources:
          type: array
          description: Resources
          items:
            $ref: '#/components/schemas/ResourcePermissionsDto'
    SignatureRequestData:
      required:
      - data
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded data to be signed or verified
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
      description: Signatures to verify
    VerifyDataRequestDto:
      required:
      - signatureAttributes
      - signatures
      type: object
      properties:
        signatureAttributes:
          type: array
          description: List of cipher Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        data:
          type: array
          description: Data to be signed
          items:
            $ref: '#/components/schemas/SignatureRequestData'
        signatures:
          type: array
          description: Signatures to verify
          items:
            $ref: '#/components/schemas/SignatureRequestData'
    VerificationResponseData:
      required:
      - result
      type: object
      properties:
        result:
          type: boolean
          description: Data to be signed or verified
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details for the result, for example reason, etc."
      description: Signatures
    VerifyDataResponseDto:
      required:
      - verifications
      type: object
      properties:
        verifications:
          type: array
          description: Signatures
          items:
            $ref: '#/components/schemas/VerificationResponseData'
    SignDataRequestDto:
      required:
      - signatureAttributes
      type: object
      properties:
        signatureAttributes:
          type: array
          description: List of cipher Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        data:
          type: array
          description: Data to be signed
          items:
            $ref: '#/components/schemas/SignatureRequestData'
    SignDataResponseDto:
      required:
      - signatures
      type: object
      properties:
        signatures:
          type: array
          description: Signatures
          items:
            $ref: '#/components/schemas/SignatureResponseData'
    SignatureResponseData:
      required:
      - data
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded signature data
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details of the data, for example, the data type,\
            \ error handling, etc."
      description: Signatures
    CipherDataRequestDto:
      required:
      - cipherAttributes
      - cipherData
      type: object
      properties:
        cipherAttributes:
          type: array
          description: List of cipher Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        cipherData:
          type: array
          description: Encrypted/decrypted data
          items:
            $ref: '#/components/schemas/CipherRequestData'
    CipherRequestData:
      required:
      - data
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded encrypted/decrypted data
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
      description: Encrypted/decrypted data
    CipherResponseData:
      required:
      - data
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded encrypted/decrypted data
        identifier:
          type: string
          description: "Custom identifier of the data, that should be the same as\
            \ in the request, if available"
          example: customId
        details:
          type: object
          description: "Additional details of the data, for example, the data type,\
            \ error handling, etc."
      description: Encrypted data
    EncryptDataResponseDto:
      required:
      - encryptedData
      type: object
      properties:
        encryptedData:
          type: array
          description: Encrypted data
          items:
            $ref: '#/components/schemas/CipherResponseData'
    DecryptDataResponseDto:
      required:
      - decryptedData
      type: object
      properties:
        decryptedData:
          type: array
          description: Decrypted data
          items:
            $ref: '#/components/schemas/CipherResponseData'
    RandomDataRequestDto:
      required:
      - length
      type: object
      properties:
        length:
          type: integer
          description: Number of random bytes to generate
          format: int32
        attributes:
          type: array
          description: Random generator Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    RandomDataResponseDto:
      required:
      - data
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded random data
    SearchCondition:
      type: string
      description: Condition for the search
      enum:
      - EQUALS
      - NOT_EQUALS
      - GREATER
      - LESSER
      - CONTAINS
      - NOT_CONTAINS
      - STARTS_WITH
      - ENDS_WITH
      - EMPTY
      - NOT_EMPTY
      - SUCCESS
      - FAILED
      - UNKNOWN
      - NOT_CHECKED
    SearchFilterRequestDto:
      required:
      - condition
      - field
      type: object
      properties:
        field:
          $ref: '#/components/schemas/SearchableFields'
        condition:
          $ref: '#/components/schemas/SearchCondition'
        value:
          type: object
          description: Value to match
      description: Certificate filter input
    SearchRequestDto:
      type: object
      properties:
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: '#/components/schemas/SearchFilterRequestDto'
        itemsPerPage:
          maximum: 1000
          type: integer
          description: Number of entries per page
          format: int32
          default: 10
        pageNumber:
          type: integer
          description: Page number for the request
          format: int32
          default: 1
    SearchableFields:
      type: string
      description: Field to search
      enum:
      - commonName
      - serialNumber
      - raProfile
      - entity
      - status
      - complianceStatus
      - group
      - owner
      - issuerCommonName
      - signatureAlgorithm
      - fingerprint
      - notAfter
      - notBefore
      - publicKeyAlgorithm
      - keySize
      - keyUsage
      - basicConstraints
      - meta
      - subjectAlternativeNames
      - subjectDn
      - issuerDn
      - issuerSerialNumber
      - ocspValidation
      - crlValidation
      - signatureValidation
      - cryptographicKey.name
      - cryptographicKey.group
      - cryptographicKey.owner
      - cryptographicKey.tokenProfile.name
      - cryptographicKey.tokenInstanceReference.name
      - type
      - format
      - state
      - length
      - usage
      - cryptographicAlgorithm
    CryptographicKeyResponseDto:
      required:
      - cryptographicKeys
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
      type: object
      properties:
        cryptographicKeys:
          type: array
          description: CryptographicKeys
          items:
            $ref: '#/components/schemas/KeyDto'
        itemsPerPage:
          type: integer
          description: Number of entries per page
          format: int32
        pageNumber:
          type: integer
          description: Page number for the request
          format: int32
        totalPages:
          type: integer
          description: Number of pages available
          format: int32
        totalItems:
          type: integer
          description: Number of items available
          format: int64
    KeyDto:
      required:
      - creationTime
      - description
      - items
      - name
      - tokenInstanceName
      - tokenInstanceUuid
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
          format: date-time
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
        owner:
          type: string
          description: Owner of the Key
        group:
          $ref: '#/components/schemas/GroupDto'
        items:
          type: array
          description: Key Items
          items:
            $ref: '#/components/schemas/KeyItemDto'
        associations:
          type: integer
          description: Number of associated objects
          format: int32
      description: CryptographicKeys
    KeyItemDto:
      required:
      - cryptographicAlgorithm
      - enabled
      - keyReferenceUuid
      - name
      - state
      - type
      - usage
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        keyReferenceUuid:
          type: string
          description: UUID of the key item in the Connector
        type:
          $ref: '#/components/schemas/KeyType'
        cryptographicAlgorithm:
          $ref: '#/components/schemas/CryptographicAlgorithm'
        format:
          $ref: '#/components/schemas/KeyFormat'
        length:
          type: integer
          description: Key Length
          format: int32
        usage:
          type: array
          description: Key Usages
          items:
            $ref: '#/components/schemas/KeyUsage'
        enabled:
          type: boolean
          description: Boolean describing if the key is enabled or not
        state:
          $ref: '#/components/schemas/KeyState'
      description: Key Items
    UuidDto:
      required:
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
    EntityInstanceRequestDto:
      required:
      - attributes
      - connectorUuid
      - kind
      - name
      type: object
      properties:
        name:
          type: string
          description: Entity instance name
        attributes:
          type: array
          description: List of Entity instance Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        connectorUuid:
          type: string
          description: UUID of Entity Provider
        kind:
          type: string
          description: Entity instance Kind
          example: "Keystore, etc."
    AddLocationRequestDto:
      required:
      - attributes
      - name
      type: object
      properties:
        name:
          type: string
          description: Location name
        description:
          type: string
          description: Location description
        attributes:
          type: array
          description: List of Attributes to register Location
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
          default: false
    IssueToLocationRequestDto:
      required:
      - csrAttributes
      - issueAttributes
      - raProfileUuid
      type: object
      properties:
        raProfileUuid:
          type: string
          description: RA Profile UUID
        csrAttributes:
          type: array
          description: List of CSR Attributes for Location
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        issueAttributes:
          type: array
          description: List of certificate issue Attributes for RA Profile
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    DiscoveryDto:
      required:
      - attributes
      - connectorUuid
      - kind
      - name
      type: object
      properties:
        name:
          type: string
          description: Discovery name
        attributes:
          type: array
          description: List of Attributes for Discovery
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        connectorUuid:
          type: string
          description: Discovery Provider UUID
        kind:
          type: string
          description: Discovery Kind
    CredentialRequestDto:
      required:
      - attributes
      - connectorUuid
      - kind
      - name
      type: object
      properties:
        name:
          type: string
          description: Credential name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        connectorUuid:
          type: string
          description: UUID of Credential provider Connector
    ConnectorRequestDto:
      required:
      - authType
      - name
      - url
      type: object
      properties:
        name:
          type: string
          description: Name of the Connector
          example: Connector1
        url:
          type: string
          description: URL of the Connector to connect
          example: http://network-discovery-provicer:8080
        authType:
          $ref: '#/components/schemas/AuthType'
        authAttributes:
          type: array
          description: List of authentication Attributes. Required if the authentication
            type is not NONE
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    ComplianceProfileRequestDto:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Compliance Profile
          example: Profile 1
        description:
          type: string
          description: Description of the Compliance Profile
          example: Profile 1
        rules:
          type: array
          description: Rules to be associated with the Compliance Profile. Profiles
            can be created without rules and can be added later
          items:
            $ref: '#/components/schemas/ComplianceProfileRulesRequestDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    ComplianceProfileRulesRequestDto:
      required:
      - connectorUuid
      - kind
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: c35bc88c-d0ef-11ec-9d64-0242ac120005
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: x509
        rules:
          type: array
          description: Rules for new Compliance Profiles
          items:
            $ref: '#/components/schemas/ComplianceRequestRulesDto'
        groups:
          type: array
          description: Groups for Compliance Profile
          items:
            type: string
            description: Groups for Compliance Profile
      description: Rules to be associated with the Compliance Profile. Profiles can
        be created without rules and can be added later
    ComplianceRequestRulesDto:
      required:
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the rule
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        attributes:
          type: array
          description: Attributes for the rule
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
      description: Rules for new Compliance Profiles
    ComplianceRuleAdditionRequestDto:
      required:
      - connectorUuid
      - kind
      - ruleUuid
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: default
        ruleUuid:
          type: string
          description: UUID of the rule
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
        attributes:
          type: array
          description: Attributes for the rule
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    CertificateType:
      type: string
      description: Certificate type for the rule
      example: X509
      enum:
      - X509
      - SSH
    ComplianceProfileRuleDto:
      required:
      - attributes
      - certificateType
      - complianceProfileName
      - complianceProfileUuid
      - connectorName
      - connectorUuid
      - kind
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the rule
          example: Sample rule description
        connectorName:
          type: string
          description: Connector Name
        connectorUuid:
          type: string
          description: Connector UUID
        kind:
          type: string
          description: Connector Kind
        groupUuid:
          type: string
          description: Group UUID
        certificateType:
          $ref: '#/components/schemas/CertificateType'
        attributes:
          type: array
          description: List of attributes for the rule
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        complianceProfileUuid:
          type: string
          description: UUID of the Compliance Profile
        complianceProfileName:
          type: string
          description: Name of the Compliance Profile
    ComplianceGroupRequestDto:
      required:
      - connectorUuid
      - groupUuid
      - kind
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: default
        groupUuid:
          type: string
          description: UUID of the group
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
    CertificateComplianceResultDto:
      required:
      - connectorName
      - ruleDescription
      - ruleName
      - status
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
          example: Provider1
        ruleName:
          type: string
          description: Name of the rule
          example: RuleName
        ruleDescription:
          type: string
          description: Description of the rule
          example: Description sample
        status:
          $ref: '#/components/schemas/ComplianceRuleStatus'
        attributes:
          type: array
          description: Attributes of the rule
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
      description: Certificate compliance check result
    CertificateDto:
      required:
      - basicConstraints
      - certificateContent
      - commonName
      - fingerprint
      - issuerCommonName
      - issuerDn
      - keySize
      - keyUsage
      - notAfter
      - notBefore
      - privateKeyAvailability
      - publicKeyAlgorithm
      - serialNumber
      - signatureAlgorithm
      - status
      - subjectDn
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate serial number
        issuerCommonName:
          type: string
          description: Certificate issuer common name
        certificateContent:
          type: string
          description: Base64 encoded Certificate content
        issuerDn:
          type: string
          description: Issuer DN of the Certificate
        subjectDn:
          type: string
          description: Subject DN of the Certificate
        notBefore:
          type: string
          description: Certificate validity start date
          format: date-time
        notAfter:
          type: string
          description: Certificate expiration date
          format: date-time
        publicKeyAlgorithm:
          type: string
          description: Public key algorithm
        signatureAlgorithm:
          type: string
          description: Certificate signature algorithm
        keySize:
          type: integer
          description: Certificate key size
          format: int32
        extendedKeyUsage:
          type: array
          description: Extended key usages
          items:
            type: string
            description: Extended key usages
        keyUsage:
          type: array
          description: Key usages
          items:
            type: string
            description: Key usages
        basicConstraints:
          type: string
          description: Basic Constraints
        metadata:
          type: array
          description: Certificate metadata
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
        status:
          $ref: '#/components/schemas/CertificateStatus'
        raProfile:
          $ref: '#/components/schemas/SimplifiedRaProfileDto'
        fingerprint:
          type: string
          description: SHA256 fingerprint of the Certificate
        subjectAlternativeNames:
          type: object
          additionalProperties:
            type: object
            description: Subject alternative names
          description: Subject alternative names
        locations:
          uniqueItems: true
          type: array
          description: Locations associated to the Certificate
          items:
            $ref: '#/components/schemas/LocationDto'
        group:
          $ref: '#/components/schemas/GroupDto'
        owner:
          type: string
          description: Certificate Owner
        certificateType:
          $ref: '#/components/schemas/CertificateType'
        issuerSerialNumber:
          type: string
          description: Serial number of the issuer
        nonCompliantRules:
          type: array
          description: Certificate compliance check result
          items:
            $ref: '#/components/schemas/CertificateComplianceResultDto'
        complianceStatus:
          $ref: '#/components/schemas/ComplianceStatus'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        csr:
          type: string
          description: CSR for the certificate
        privateKeyAvailability:
          type: boolean
          description: Private Key Availability
        csrAttributes:
          type: array
          description: CSR Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        signatureAttributes:
          type: array
          description: Signature Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        key:
          $ref: '#/components/schemas/KeyDto'
      description: Certificates
    CertificateResponseDto:
      required:
      - certificates
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
      type: object
      properties:
        certificates:
          type: array
          description: Certificates
          items:
            $ref: '#/components/schemas/CertificateDto'
        itemsPerPage:
          type: integer
          description: Number of entries per page
          format: int32
        pageNumber:
          type: integer
          description: Page number for the request
          format: int32
        totalPages:
          type: integer
          description: Number of pages available
          format: int32
        totalItems:
          type: integer
          description: Number of items available
          format: int64
    CertificateStatus:
      type: string
      description: Status of the Certificate
      enum:
      - valid
      - revoked
      - expired
      - unknown
      - expiring
      - new
      - invalid
    ComplianceRuleStatus:
      type: string
      description: Status of the rule
      example: nok
      enum:
      - ok
      - nok
      - na
    ComplianceStatus:
      type: string
      description: Certificate compliance status
      enum:
      - ok
      - nok
      - na
    SimplifiedRaProfileDto:
      required:
      - enabled
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        authorityInstanceUuid:
          type: string
          description: Authority Instance UUID
      description: RA Profile associated to the Certificate
    UploadCertificateRequestDto:
      required:
      - certificate
      - customAttributes
      type: object
      properties:
        certificate:
          type: string
          description: Base64 Content of the Certificate
        customAttributes:
          type: array
          description: Custom Attributes for the Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    RemoveCertificateDto:
      type: object
      properties:
        uuids:
          type: array
          description: List of Certificate UUIDs
          items:
            type: string
            description: List of Certificate UUIDs
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: '#/components/schemas/SearchFilterRequestDto'
    BulkOperationResponse:
      required:
      - failedItem
      - message
      - status
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          enum:
          - SUCCESS
          - FAILED
          - PARTIAL
        failedItem:
          type: integer
          description: Number of items failed
          format: int64
        message:
          type: string
          description: Message for the action
    CertificateComplianceCheckDto:
      type: object
      properties:
        certificateUuids:
          type: array
          description: List of UUIDs of the Certificates
          items:
            type: string
            description: List of UUIDs of the Certificates
    AuthorityInstanceRequestDto:
      required:
      - attributes
      - connectorUuid
      - kind
      - name
      type: object
      properties:
        name:
          type: string
          description: Authority instance name
        attributes:
          type: array
          description: List of Authority instance Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        connectorUuid:
          type: string
          description: UUID of Authority provider
        kind:
          type: string
          description: Authority instance Kind
          example: "LegacyEjbca, ADCS, etc"
    AddRaProfileRequestDto:
      required:
      - attributes
      - name
      type: object
      properties:
        name:
          type: string
          description: RA Profile name
        description:
          type: string
          description: RA Profile description
        attributes:
          type: array
          description: List of Attributes to create RA Profile
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
          default: false
    GlobalMetadataCreateRequestDto:
      required:
      - contentType
      - description
      - label
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        description:
          type: string
          description: Attribute description
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
    ConnectorMetadataPromotionRequestDto:
      required:
      - connectorUuid
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Metadata UUID
        connectorUuid:
          type: string
          description: Connector UUID
    CustomAttributeCreateRequestDto:
      required:
      - contentType
      - description
      - label
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        description:
          type: string
          description: Attribute description
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
        content:
          type: array
          description: Predefined content for the attribute if needed. The content
            of the Attribute must satisfy the type
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        resources:
          type: array
          description: List of resource to be associated with the custom attribute
          items:
            $ref: '#/components/schemas/Resource'
    AcmeProfileRequestDto:
      required:
      - issueCertificateAttributes
      - name
      - revokeCertificateAttributes
      type: object
      properties:
        name:
          type: string
          description: Name of the ACME Profile
          example: Profile Name 1
        description:
          type: string
          description: Description of the ACME Profile
          example: Sample description
        termsOfServiceUrl:
          type: string
          description: Terms of Service URL
          example: https://sample-url.com/termsOfService
        websiteUrl:
          type: string
          description: Website URL
          example: https://sample-url.com
        dnsResolverIp:
          type: string
          description: DNS Resolver IP address
          example: 8.8.8.8
          default: System Default
        dnsResolverPort:
          type: string
          description: DNS Resolver port number
          example: "53"
          default: "53"
        raProfileUuid:
          type: string
          description: RA Profile UUID
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        retryInterval:
          type: integer
          description: Retry interval for the Orders
          format: int32
          example: 60
          default: 30
        validity:
          type: integer
          description: Order Validity
          format: int32
          example: 3000
          default: 36000
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        requireContact:
          type: boolean
          description: Require contact information for new Account
          example: true
          default: false
        requireTermsOfService:
          type: boolean
          description: Require new Account to agree on Terms of Service
          example: false
          default: false
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    CompromiseKeyRequestDto:
      required:
      - reason
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/KeyCompromiseReason'
        uuids:
          type: array
          description: "List of UUIDs of the key Items. If not provided, the usage\
            \ will be updated to all the itemsin the key"
          items:
            type: string
            description: "List of UUIDs of the key Items. If not provided, the usage\
              \ will be updated to all the itemsin the key"
            format: uuid
    BulkCompromiseKeyItemRequestDto:
      required:
      - reason
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/KeyCompromiseReason'
        uuids:
          type: array
          description: List of Key Item UUID
          items:
            type: string
            description: List of Key Item UUID
            format: uuid
    BulkCompromiseKeyRequestDto:
      required:
      - reason
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/KeyCompromiseReason'
        uuids:
          type: array
          description: List of UUIDs of the keys. This will mark all the items inside
            the selected key as compromised
          items:
            type: string
            description: List of UUIDs of the keys. This will mark all the items inside
              the selected key as compromised
            format: uuid
    RaProfileAssociationRequestDto:
      required:
      - raProfileUuids
      type: object
      properties:
        raProfileUuids:
          type: array
          description: List of UUIDs of RA Profiles to be associated
          example:
          - 18324af0-e95c-11ec-8fea-0242ac120002
          - 18324c94-e95c-11ec-8fea-0242ac120002
          items:
            type: string
            description: List of UUIDs of RA Profiles to be associated
            example: "[\"18324af0-e95c-11ec-8fea-0242ac120002\",\"18324c94-e95c-11ec-8fea-0242ac120002\"\
              ]"
    MultipleCertificateObjectUpdateDto:
      type: object
      properties:
        raProfileUuid:
          type: string
          description: UUID of the RA Profile
        groupUuid:
          type: string
          description: UUID of the Certificate Group
        owner:
          type: string
          description: Certificate Owner
        certificateUuids:
          type: array
          description: List of Certificate UUIDs
          items:
            type: string
            description: List of Certificate UUIDs
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: '#/components/schemas/SearchFilterRequestDto'
    CertificateUpdateObjectsDto:
      type: object
      properties:
        raProfileUuid:
          type: string
          description: RA Profile UUID
        groupUuid:
          type: string
          description: Group UUID
        owner:
          type: string
          description: Certificate Owner
    ActivateAcmeForRaProfileRequestDto:
      required:
      - issueCertificateAttributes
      - revokeCertificateAttributes
      type: object
      properties:
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    RaProfileAcmeDetailResponseDto:
      required:
      - acmeAvailable
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        acmeAvailable:
          type: boolean
          description: ACME availability flag - true = yes; false = no
        directoryUrl:
          type: string
          description: ACME Directory URL
        issueCertificateAttributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        revokeCertificateAttributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
    BaseAttributeDto:
      required:
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        type:
          $ref: '#/components/schemas/AttributeType'
        content:
          type: object
          description: Content of the Attribute
      description: Base Attribute definition
      discriminator:
        propertyName: type
        mapping:
          data: '#/components/schemas/DataAttribute'
          info: '#/components/schemas/InfoAttribute'
          group: '#/components/schemas/GroupAttribute'
          meta: '#/components/schemas/MetadataAttribute'
          custom: '#/components/schemas/CustomAttribute'
      oneOf:
      - $ref: '#/components/schemas/DataAttribute'
      - $ref: '#/components/schemas/InfoAttribute'
      - $ref: '#/components/schemas/GroupAttribute'
      - $ref: '#/components/schemas/MetadataAttribute'
      - $ref: '#/components/schemas/CustomAttribute'
    CustomAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/CustomAttributeProperties'
      description: Custom attribute allows to store and transfer dynamic data. Its
        content can be edited and send in requests to store.
    CustomAttributeProperties:
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
      description: Properties of the Attributes
    GroupAttribute:
      required:
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: List of all different types of attributes
          items:
            $ref: '#/components/schemas/BaseAttributeDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
      description: Group attribute and its content represents dynamic list of additional
        attributes retrieved by callback. Its content can not be edited and is not
        send in requests to store.
    InfoAttribute:
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/InfoAttributeProperties'
      description: Info attribute contains content that is for information purpose
        or represents additional information for object (metadata). Its content can
        not be edited and is not send in requests to store.
    InfoAttributeProperties:
      required:
      - label
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      description: Properties of the Attributes
    MetadataAttribute:
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/MetadataAttributeProperties'
      description: Info attribute contains content that is for metadata. Its content
        can not be edited and is not send in requests to store.
    MetadataAttributeProperties:
      required:
      - label
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        global:
          type: boolean
          description: Boolean determining if the Metadata is a global metadata.
          default: false
      description: Properties of the Attributes
    TokenInstanceDto:
      required:
      - name
      - status
      - tokenProfiles
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        status:
          $ref: '#/components/schemas/TokenInstanceStatus'
        tokenProfiles:
          type: integer
          description: Number of Token Profiles associated
          format: int32
        connectorName:
          type: string
          description: Connector Name
        connectorUuid:
          type: string
          description: Connector UUID
        kind:
          type: string
          description: Connector Kind
    KeyEventHistoryDto:
      required:
      - created
      - createdBy
      - event
      - keyUuid
      - message
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the event
        keyUuid:
          type: string
          description: UUID of the Key
        created:
          type: string
          description: Event creation time
          format: date-time
        createdBy:
          type: string
          description: Created By
        event:
          type: string
          description: Event type
          enum:
          - Create Key
          - Compromised Key
          - Destroy Key
          - Update Key Usages
          - Sign Data
          - Verify Data
          - Encrypt Data
          - Decrypt Data
          - Enable Key
          - Disable Key
        status:
          type: string
          description: Event result
          enum:
          - SUCCESS
          - FAILED
        message:
          type: string
          description: Event message
        additionalInformation:
          type: object
          additionalProperties:
            type: object
            description: Additional information for the event
          description: Additional information for the event
    TokenProfileDto:
      required:
      - enabled
      - name
      - tokenInstanceName
      - tokenInstanceStatus
      - tokenInstanceUuid
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of Token Profile
        tokenInstanceUuid:
          type: string
          description: UUID of Token Instance
        tokenInstanceName:
          type: string
          description: Name of Token instance
        tokenInstanceStatus:
          $ref: '#/components/schemas/TokenInstanceStatus'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
    StatisticsDto:
      type: object
      properties:
        totalCertificates:
          type: integer
          description: Number Certificates available
          format: int64
        totalGroups:
          type: integer
          description: Number of Groups
          format: int64
        totalDiscoveries:
          type: integer
          description: Number of Discoveries triggered
          format: int64
        totalConnectors:
          type: integer
          description: Number of Connectors added
          format: int64
        totalRaProfiles:
          type: integer
          description: Number of RA Profiles in the platform
          format: int64
        totalCredentials:
          type: integer
          description: Number of Credentials
          format: int64
        totalAuthorities:
          type: integer
          description: Number of Authority instances
          format: int64
        totalAdministrators:
          type: integer
          description: Number of Administrators
          format: int64
        totalClients:
          type: integer
          description: Number of Clients added
          format: int64
        groupStatByCertificateCount:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by Group
            format: int64
          description: Map of Certificate count by Group
        raProfileStatByCertificateCount:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by RA Profile
            format: int64
          description: Map of Certificate count by RA Profile
        certificateStatByType:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by Type
            format: int64
          description: Map of Certificate count by Type
        certificateStatByExpiry:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by expiry date
            format: int64
          description: Map of Certificate count by expiry date
        certificateStatByKeySize:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by key size
            format: int64
          description: Map of Certificate count by key size
        certificateStatByBasicConstraints:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by basic constraints
            format: int64
          description: Map of Certificate count by basic constraints
        certificateStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by status
            format: int64
          description: Map of Certificate count by status
        certificateStatByComplianceStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Certificate count by compliance status
            format: int64
          description: Map of Certificate count by compliance status
        connectorStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Connector count by status
            format: int64
          description: Map of Connector count by status
        raProfileStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of RA Profile count by status
            format: int64
          description: Map of RA Profile count by status
        administratorStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Administrator count by status
            format: int64
          description: Map of Administrator count by status
        clientStatByStatus:
          type: object
          additionalProperties:
            type: integer
            description: Map of Client count by status
            format: int64
          description: Map of Client count by status
    SearchFieldDataDto:
      required:
      - conditions
      - field
      - label
      - type
      type: object
      properties:
        field:
          $ref: '#/components/schemas/SearchableFields'
        label:
          type: string
          description: Label for the field
        type:
          type: string
          description: Type of the field
          enum:
          - string
          - number
          - list
          - date
        conditions:
          type: array
          description: List of available conditions for the field
          items:
            $ref: '#/components/schemas/SearchCondition'
        value:
          type: object
          description: Available values for the field
        multiValue:
          type: boolean
          description: "Multivalue flag. true = yes, false = no"
    DiscoveryHistoryDto:
      required:
      - connectorName
      - connectorUuid
      - kind
      - name
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Discovery Kind
          example: IP-HostName
        status:
          $ref: '#/components/schemas/DiscoveryStatus'
        startTime:
          type: string
          description: Date and time when Discovery started
          format: date-time
          nullable: true
        endTime:
          type: string
          description: Date and time when Discovery finished
          format: date-time
          nullable: true
        totalCertificatesDiscovered:
          type: integer
          description: Number of certificates that are discovered
          format: int32
          default: 0
        connectorUuid:
          type: string
          description: UUID of the Discovery Provider
        connectorName:
          type: string
          description: Name of the Discovery Provider
    DiscoveryStatus:
      type: string
      description: Status of Discovery
      enum:
      - inProgress
      - failed
      - completed
      - warning
    DiscoveryCertificatesDto:
      required:
      - certificateContent
      - commonName
      - fingerprint
      - issuerCommonName
      - notAfter
      - notBefore
      - serialNumber
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        inventoryUuid:
          type: string
          description: UUID of the Certificate in Certificate inventory
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate Serial Number
        issuerCommonName:
          type: string
          description: Issuer common name
        notBefore:
          type: string
          description: Certificate validity start date
          format: date-time
        notAfter:
          type: string
          description: Certificate expiration date
          format: date-time
        fingerprint:
          type: string
          description: SHA256 thumbprint of the certificate
        certificateContent:
          type: string
          description: Base64 encoded Certificate content
      description: List of Discovered Certificates
    DiscoveryHistoryDetailDto:
      required:
      - attributes
      - certificate
      - connectorName
      - connectorUuid
      - kind
      - name
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Discovery Kind
          example: IP-HostName
        status:
          $ref: '#/components/schemas/DiscoveryStatus'
        message:
          type: string
          description: Failure/Success Messages
          example: Failed due to network connectivity issues
        startTime:
          type: string
          description: Date and time when Discovery started
          format: date-time
          nullable: true
        endTime:
          type: string
          description: Date and time when Discovery finished
          format: date-time
          nullable: true
        totalCertificatesDiscovered:
          type: integer
          description: Number of certificates that are discovered
          format: int32
          default: 0
        connectorUuid:
          type: string
          description: UUID of the Discovery Provider
        connectorName:
          type: string
          description: Name of the Discovery Provider
        certificate:
          type: array
          description: List of Discovered Certificates
          items:
            $ref: '#/components/schemas/DiscoveryCertificatesDto'
        attributes:
          type: array
          description: List of Discovery Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        metadata:
          type: array
          description: Metadata of the Discovery
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
    HealthDto:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/HealthStatus'
        description:
          type: string
          description: Detailed status description
        parts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/HealthDto'
          description: Nested status of services
    HealthStatus:
      type: string
      description: Current connector operational status
      enum:
      - ok
      - nok
      - unknown
    ComplianceProfilesListDto:
      required:
      - name
      - rules
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Compliance Profile description
        rules:
          type: array
          description: Rules summary
          items:
            $ref: '#/components/schemas/ComplianceProviderSummaryDto'
    ComplianceProviderSummaryDto:
      required:
      - connectorName
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
        numberOfRules:
          type: integer
          description: Number of rules for the Provider
          format: int32
        numberOfGroups:
          type: integer
          description: Number of groups for the Provider
          format: int32
      description: Rules summary
    ComplianceConnectorAndGroupsDto:
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
        kind:
          type: string
          description: Kind of the Compliance Provider
        groups:
          type: array
          description: Groups associated
          items:
            $ref: '#/components/schemas/ComplianceGroupsDto'
      description: List of groups
    ComplianceConnectorAndRulesDto:
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
        kind:
          type: string
          description: Kind of the Compliance Provider
        rules:
          type: array
          description: Rules associated
          items:
            $ref: '#/components/schemas/ComplianceRulesDto'
      description: List of rules
    ComplianceGroupsDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the group
          example: Sample group description
      description: Groups associated
    ComplianceProfileDto:
      required:
      - groups
      - name
      - rules
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Compliance Profile
        rules:
          type: array
          description: List of rules
          items:
            $ref: '#/components/schemas/ComplianceConnectorAndRulesDto'
        groups:
          type: array
          description: List of groups
          items:
            $ref: '#/components/schemas/ComplianceConnectorAndGroupsDto'
        raProfiles:
          type: array
          description: List of associated RA Profiles
          items:
            $ref: '#/components/schemas/SimplifiedRaProfileDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
    ComplianceRulesDto:
      required:
      - certificateType
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the rule
          example: Sample rule description
        certificateType:
          $ref: '#/components/schemas/CertificateType'
        attributes:
          type: array
          description: Attributes of the rule
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
      description: Rules associated
    ComplianceRulesListResponseDto:
      required:
      - connectorName
      - connectorUuid
      - kind
      - rules
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
          example: Provider1
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: c35bc88c-d0ef-11ec-9d64-0242ac120003
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: Kind1
        rules:
          type: array
          description: Rules from Compliance Provider
          items:
            $ref: '#/components/schemas/ComplianceRulesResponseDto'
    ComplianceRulesResponseDto:
      required:
      - certificateType
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the rule
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        groupUuid:
          type: string
          description: UUID of the group to which the rule belongs to
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the rule
          example: Rule1
        certificateType:
          $ref: '#/components/schemas/CertificateType'
        attributes:
          type: array
          description: Rule attributes
          items:
            $ref: '#/components/schemas/BaseAttributeDto'
        description:
          type: string
          description: Description of the rule
          example: Sample rule description
      description: Rules from Compliance Provider
    ComplianceGroupsListResponseDto:
      required:
      - connectorName
      - connectorUuid
      - groups
      - kind
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
          example: Provider1
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: c35bc88c-d0ef-11ec-9d64-0242ac120003
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: Kind1
        groups:
          type: array
          description: Groups from Compliance Provider
          items:
            $ref: '#/components/schemas/ComplianceGroupsResponseDto'
    ComplianceGroupsResponseDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the group
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the group
          example: RFC
        description:
          type: string
          description: Description of the group
          example: Sample description of the group
      description: Groups from Compliance Provider
    CertificateValidationDto:
      type: object
      properties:
        status:
          type: string
          enum:
          - success
          - failed
          - warning
          - revoked
          - not_checked
          - invalid
          - expiring
          - expired
        message:
          type: string
    CertificateEventHistoryDto:
      required:
      - certificateUuid
      - created
      - createdBy
      - event
      - message
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the event
        certificateUuid:
          type: string
          description: UUID of the Certificate
        created:
          type: string
          description: Event creation time
          format: date-time
        createdBy:
          type: string
          description: Created By
        event:
          type: string
          description: Event type
          enum:
          - Issue Certificate
          - Renew Certificate
          - Revoke Certificate
          - Delete Certificate
          - Update RA Profile
          - Update Entity
          - Update Group
          - Update Owner
          - Upload Certificate
          - Certificate Discovered
          - Update Location
        status:
          type: string
          description: Event result
          enum:
          - SUCCESS
          - FAILED
        message:
          type: string
          description: Event message
        additionalInformation:
          type: object
          additionalProperties:
            type: object
            description: Additional information for the event
          description: Additional information for the event
    NameAndIdDto:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: Object identifier
          format: int32
        name:
          type: string
          description: Object name
    SimplifiedComplianceProfileDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Compliance Profile
    ActionDto:
      required:
      - displayName
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        displayName:
          type: string
          description: Resource label
      description: List of Actions for the Resource
    ResourceDetailDto:
      required:
      - actions
      - displayName
      - name
      - objectAccess
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          $ref: '#/components/schemas/Resource'
        displayName:
          type: string
          description: Resource label
        listObjectsEndpoint:
          type: string
          description: Listing Endpoint
        objectAccess:
          type: boolean
          description: "If resource has Object access permissions. True = Yes, False\
            \ = No"
        actions:
          type: array
          description: List of Actions for the Resource
          items:
            $ref: '#/components/schemas/ActionDto'
    AuditLogFilter:
      type: object
      properties:
        author:
          type: string
          description: Author of the action triggered audit log
        createdFrom:
          type: string
          description: Start time of the filter
          format: date
        createdTo:
          type: string
          description: End time of the filter
          format: date
        operationStatus:
          type: string
          description: Status of the filter
          enum:
          - SUCCESS
          - FAILURE
        origination:
          type: string
          description: Module triggered the action
          enum:
          - ACCESS
          - RA_PROFILE
          - CLIENT
          - ADMINISTRATOR
          - FE
          - BE
          - CA
          - END_ENTITY
          - END_ENTITY_PROFILE
          - END_ENTITY_CERTIFICATE
          - AUDIT_LOG
          - ATTRIBUTES
          - CA_INSTANCE
          - CREDENTIAL
          - CONNECTOR
          - DISCOVERY
          - HEALTH
          - ENTITY
          - GROUP
          - CERTIFICATE
          - STATISTICS
          - ACME_PROFILE
          - ACME_ACCOUNT
          - COMPLIANCE_PROFILE
          - COMPLIANCE_RULE
          - COMPLIANCE_GROUP
          - LOCALHOST
          - TOKEN_PROFILE
          - TOKEN_INSTANCE
          - CRYPTOGRAPHIC_KEY
          - CRYPTOGRAPHIC_OPERATIONS
        affected:
          type: string
          description: Module affected by the action
          enum:
          - ACCESS
          - RA_PROFILE
          - CLIENT
          - ADMINISTRATOR
          - FE
          - BE
          - CA
          - END_ENTITY
          - END_ENTITY_PROFILE
          - END_ENTITY_CERTIFICATE
          - AUDIT_LOG
          - ATTRIBUTES
          - CA_INSTANCE
          - CREDENTIAL
          - CONNECTOR
          - DISCOVERY
          - HEALTH
          - ENTITY
          - GROUP
          - CERTIFICATE
          - STATISTICS
          - ACME_PROFILE
          - ACME_ACCOUNT
          - COMPLIANCE_PROFILE
          - COMPLIANCE_RULE
          - COMPLIANCE_GROUP
          - LOCALHOST
          - TOKEN_PROFILE
          - TOKEN_INSTANCE
          - CRYPTOGRAPHIC_KEY
          - CRYPTOGRAPHIC_OPERATIONS
        objectIdentifier:
          type: string
          description: Identifier of the object created
        operation:
          type: string
          description: Type of the operation
          enum:
          - CREATE
          - DELETE
          - CHANGE
          - ENABLE
          - DISABLE
          - AUTH
          - REQUEST
          - ISSUE
          - RENEW
          - REVOKE
          - RESET
          - START
          - STOP
          - VALIDATE
          - CALLBACK
          - CONNECT
          - FORCE_DELETE
          - ENCRYPT
          - DECRYPT
          - SIGN
          - VERIFY
          - APPROVE
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    AuditLogDto:
      required:
      - affected
      - author
      - created
      - id
      - objectIdentifier
      - operation
      - operationStatus
      - origination
      - uuid
      type: object
      properties:
        id:
          type: integer
          description: Audit log Id
          format: int64
        uuid:
          type: string
          description: Audit log UUID
        author:
          type: string
          description: Requestor of the change
        created:
          type: string
          description: Time when the audit log is registered
          format: date-time
        operationStatus:
          type: string
          description: Status of the operation. Either success or failed
          enum:
          - SUCCESS
          - FAILURE
        origination:
          type: string
          description: Module triggered the action
          enum:
          - ACCESS
          - RA_PROFILE
          - CLIENT
          - ADMINISTRATOR
          - FE
          - BE
          - CA
          - END_ENTITY
          - END_ENTITY_PROFILE
          - END_ENTITY_CERTIFICATE
          - AUDIT_LOG
          - ATTRIBUTES
          - CA_INSTANCE
          - CREDENTIAL
          - CONNECTOR
          - DISCOVERY
          - HEALTH
          - ENTITY
          - GROUP
          - CERTIFICATE
          - STATISTICS
          - ACME_PROFILE
          - ACME_ACCOUNT
          - COMPLIANCE_PROFILE
          - COMPLIANCE_RULE
          - COMPLIANCE_GROUP
          - LOCALHOST
          - TOKEN_PROFILE
          - TOKEN_INSTANCE
          - CRYPTOGRAPHIC_KEY
          - CRYPTOGRAPHIC_OPERATIONS
        affected:
          type: string
          description: Module affected by the operation
          enum:
          - ACCESS
          - RA_PROFILE
          - CLIENT
          - ADMINISTRATOR
          - FE
          - BE
          - CA
          - END_ENTITY
          - END_ENTITY_PROFILE
          - END_ENTITY_CERTIFICATE
          - AUDIT_LOG
          - ATTRIBUTES
          - CA_INSTANCE
          - CREDENTIAL
          - CONNECTOR
          - DISCOVERY
          - HEALTH
          - ENTITY
          - GROUP
          - CERTIFICATE
          - STATISTICS
          - ACME_PROFILE
          - ACME_ACCOUNT
          - COMPLIANCE_PROFILE
          - COMPLIANCE_RULE
          - COMPLIANCE_GROUP
          - LOCALHOST
          - TOKEN_PROFILE
          - TOKEN_INSTANCE
          - CRYPTOGRAPHIC_KEY
          - CRYPTOGRAPHIC_OPERATIONS
        objectIdentifier:
          type: string
          description: Object identifier
        operation:
          type: string
          description: Type of operation performed
          enum:
          - CREATE
          - DELETE
          - CHANGE
          - ENABLE
          - DISABLE
          - AUTH
          - REQUEST
          - ISSUE
          - RENEW
          - REVOKE
          - RESET
          - START
          - STOP
          - VALIDATE
          - CALLBACK
          - CONNECT
          - FORCE_DELETE
          - ENCRYPT
          - DECRYPT
          - SIGN
          - VERIFY
          - APPROVE
        additionalData:
          type: string
      description: Audit log items
    AuditLogResponseDto:
      required:
      - items
      - page
      - size
      - totalPages
      type: object
      properties:
        page:
          type: integer
          description: Page number
          format: int32
        size:
          type: integer
          description: Size of the data per page
          format: int32
        totalPages:
          type: integer
          description: Number of pages
          format: int32
        items:
          type: array
          description: Audit log items
          items:
            $ref: '#/components/schemas/AuditLogDto'
    AttributeDefinitionDto:
      required:
      - contentType
      - description
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
        name:
          type: string
          description: Name of the Attribute
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        description:
          type: string
          description: Attribute description
        enabled:
          type: boolean
          description: Boolean determining if the Attribute is enabled. Required only
            for Custom Attribute
    ConnectorMetadataResponseDto:
      required:
      - connectorUuid
      - contentType
      - label
      - name
      - uuid
      type: object
      properties:
        name:
          type: string
          description: Metadata Name
        uuid:
          type: string
          description: Metadata UUID
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        label:
          type: string
          description: Metadata Label
        connectorUuid:
          type: string
          description: Connector UUID
    AcmeProfileListDto:
      required:
      - enabled
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
          example: false
        description:
          type: string
          description: ACME Profile description
          example: Some description
        raProfileName:
          type: string
          description: Name of the RA Profile
          example: RA Profile 1
        raProfileUuid:
          type: string
          description: UUID of RA Profile
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        directoryUrl:
          type: string
          description: URL of the ACME Directory
          example: https://some-server.com/api/acme/profile1/directory
    AccountStatus:
      type: string
      description: Status of the Account
      example: VALID
      enum:
      - valid
      - deactivated
      - revoked
    AcmeAccountResponseDto:
      required:
      - accountId
      - acmeProfileName
      - acmeProfileUuid
      - contact
      - enabled
      - failedOrders
      - pendingOrders
      - processingOrders
      - raProfileName
      - raProfileUuid
      - status
      - successfulOrders
      - termsOfServiceAgreed
      - totalOrders
      - uuid
      - validOrders
      type: object
      properties:
        accountId:
          type: string
          description: ID of the Account
          example: TtrgfYTR6F
        uuid:
          type: string
          description: UUID of the Account
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        enabled:
          type: boolean
          description: "Enabled flag. enabled=true, disabled=false"
          example: false
        totalOrders:
          type: integer
          description: Order count for the Account
          format: int32
          example: 23
        successfulOrders:
          type: integer
          description: Number of successful Orders
          format: int32
          example: 2
        failedOrders:
          type: integer
          description: Number of failed Orders
          format: int32
          example: 239
        pendingOrders:
          type: integer
          description: Number of pending Orders
          format: int32
          example: 24
        validOrders:
          type: integer
          description: Number of valid Orders
          format: int32
          example: 23
        processingOrders:
          type: integer
          description: Number of processing Orders
          format: int32
          example: 27
        status:
          $ref: '#/components/schemas/AccountStatus'
        contact:
          type: array
          description: Contact information
          example: "mailto: someadmin@domain.com"
          items:
            type: string
            description: Contact information
            example: "mailto: someadmin@domain.com"
        termsOfServiceAgreed:
          type: boolean
          description: Terms of Service Agreed
          example: true
        raProfileName:
          type: string
          description: Name of the RA Profile
          example: RA Profile 1
        raProfileUuid:
          type: string
          description: UUID of the RA Profile
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        acmeProfileName:
          type: string
          description: Name of the ACME Profile
          example: ACME Profile 1
        acmeProfileUuid:
          type: string
          description: UUID of the ACME Profile
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
    AcmeAccountListResponseDto:
      required:
      - accountId
      - acmeProfileName
      - acmeProfileUuid
      - enabled
      - raProfileName
      - status
      - totalOrders
      - uuid
      type: object
      properties:
        accountId:
          type: string
          description: ID of the Account
          example: HJAT6gc7i6
        uuid:
          type: string
          description: UUID of the Account
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
        enabled:
          type: boolean
          description: "Enabled flag. true = enabled, false=disabled"
          example: false
        totalOrders:
          type: integer
          description: Total number of Orders
          format: int32
          example: 4
        status:
          $ref: '#/components/schemas/AccountStatus'
        raProfileName:
          type: string
          description: Name of the RA Profile
          example: RAProfile1
        acmeProfileName:
          type: string
          description: Name of the ACME Profile
          example: ACMEProfile1
        acmeProfileUuid:
          type: string
          description: UUID of the ACME Profile
          example: 6b55de1c-844f-11ec-a8a3-0242ac120002
    BulkActionMessageDto:
      required:
      - message
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        message:
          type: string
          description: Message describing the associations of the Objects which is
            preventing the bulk operation
          example: Object is associated with other items
    ComplianceRuleDeletionRequestDto:
      required:
      - connectorUuid
      - kind
      - ruleUuid
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Compliance Provider
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
        kind:
          type: string
          description: Kind of the Compliance Provider
          example: default
        ruleUuid:
          type: string
          description: UUID of the rule
          example: 1212a-34dddf34-4334f-34ddfvfdg1y3
