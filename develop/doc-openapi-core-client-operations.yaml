openapi: 3.0.1
info:
  title: CZERTAINLY Client Operations API
  description: REST API for Client Operations
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Legacy Client Operations API
  description: Client API for managing End Entities and Certificates
- name: v2 Client Operations API
  description: v2 Client Operations API
paths:
  /v1/operations/{raProfileName}/endentity/{username}/resetPassword:
    put:
      tags:
      - Legacy Client Operations API
      summary: Reset password for End Entity
      operationId: resetPassword
      parameters:
      - name: raProfileName
        in: path
        description: RA Profile name
        required: true
        schema:
          type: string
      - name: username
        in: path
        description: Username
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: End Entity password reset
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/revoke:
    post:
      tags:
      - v2 Client Operations API
      summary: Revoke Certificate
      operationId: revokeCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateRevocationDto'
        required: true
      responses:
        "204":
          description: Certificate revoked
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates/{certificateUuid}/renew:
    post:
      tags:
      - v2 Client Operations API
      summary: Renew Certificate
      operationId: renewCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateRenewRequestDto'
        required: true
      responses:
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate renewed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificateDataResponseDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/certificates:
    post:
      tags:
      - v2 Client Operations API
      summary: Issue Certificate
      operationId: issueCertificate
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateSignRequestDto'
        required: true
      responses:
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificateDataResponseDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke/validate:
    post:
      tags:
      - v2 Client Operations API
      summary: Validate revocation Attributes
      operationId: validateRevokeCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue/validate:
    post:
      tags:
      - v2 Client Operations API
      summary: Validate issue Certificate Attributes
      operationId: validateIssueCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Attributes validated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/{raProfileName}/endentity/{username}:
    get:
      tags:
      - Legacy Client Operations API
      summary: Get End Entity information
      operationId: getEndEntity
      parameters:
      - name: raProfileName
        in: path
        description: RA Profile name
        required: true
        schema:
          type: string
      - name: username
        in: path
        description: Username
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: End Entity detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientEndEntityDto'
    post:
      tags:
      - Legacy Client Operations API
      summary: Edit End Entity
      operationId: editEndEntity
      parameters:
      - name: raProfileName
        in: path
        description: RA Profile name
        required: true
        schema:
          type: string
      - name: username
        in: path
        description: Username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientEditEndEntityRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: End Entity edited
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    delete:
      tags:
      - Legacy Client Operations API
      summary: Revoke all Certificates and delete End Entity
      operationId: revokeAndDeleteEndEntity
      parameters:
      - name: raProfileName
        in: path
        description: RA Profile name
        required: true
        schema:
          type: string
      - name: username
        in: path
        description: Username
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: End Entity revoked and deleted
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/{raProfileName}/endentity:
    get:
      tags:
      - Legacy Client Operations API
      summary: List all End Entities
      operationId: listEntities
      parameters:
      - name: raProfileName
        in: path
        description: RA Profile name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of entities retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientEndEntityDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
    post:
      tags:
      - Legacy Client Operations API
      summary: Add End Entity
      operationId: addEndEntity
      parameters:
      - name: raProfileName
        in: path
        description: RA Profile name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientAddEndEntityRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: End Entity added
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/{raProfileName}/certificate/revoke:
    post:
      tags:
      - Legacy Client Operations API
      summary: Revoke Certificate
      operationId: revokeCertificate_1
      parameters:
      - name: raProfileName
        in: path
        description: RA Profile name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateRevocationDto'
        required: true
      responses:
        "200":
          description: Certificate revoked
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v1/operations/{raProfileName}/certificate/issue:
    post:
      tags:
      - Legacy Client Operations API
      summary: Issue Certificate
      operationId: issueCertificate_1
      parameters:
      - name: raProfileName
        in: path
        description: RA Profile name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateSignRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificateSignResponseDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/revoke:
    get:
      tags:
      - v2 Client Operations API
      summary: Get revocation Attributes
      operationId: listRevokeCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Attributes obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinition'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
  /v2/operations/authorities/{authorityUuid}/raProfiles/{raProfileUuid}/attributes/issue:
    get:
      tags:
      - v2 Client Operations API
      summary: Get issue Certificate Attributes
      operationId: listIssueCertificateAttributes
      parameters:
      - name: authorityUuid
        in: path
        description: Authority Instance UUID
        required: true
        schema:
          type: string
      - name: raProfileUuid
        in: path
        description: RA Profile UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeDefinition'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
components:
  schemas:
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    ClientCertificateRevocationDto:
      required:
      - attributes
      - reason
      type: object
      properties:
        reason:
          type: string
          description: Reason for revocation
          enum:
          - UNSPECIFIED
          - KEY_COMPROMISE
          - CA_COMPROMISE
          - AFFILIATION_CHANGED
          - SUPERSEDED
          - CESSATION_OF_OPERATION
          - CERTIFICATE_HOLD
          - REMOVE_FROM_CRL
          - PRIVILEGES_WITHDRAWN
          - AA_COMPROMISE
        attributes:
          type: array
          description: List of Attributes to revoke Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    RequestAttributeDto:
      required:
      - content
      - name
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        content:
          type: object
          description: Content of the Attribute
      description: List of Attributes to revoke Certificate
    ClientCertificateRenewRequestDto:
      required:
      - pkcs10
      type: object
      properties:
        pkcs10:
          type: string
          description: Certificate sign request (PKCS#10) encoded as Base64 string
        replaceInLocations:
          type: boolean
          description: True to replace renewed certificate in the associated locations
          default: false
    ClientCertificateDataResponseDto:
      required:
      - certificateData
      - uuid
      type: object
      properties:
        certificateData:
          type: string
          description: Base64 encoded Certificate content
        uuid:
          type: string
          description: UUID of Certificate
    ClientCertificateSignRequestDto:
      required:
      - attributes
      - pkcs10
      type: object
      properties:
        pkcs10:
          type: string
          description: Certificate sign request (PKCS#10) encoded as Base64 string
        attributes:
          type: array
          description: List of Attributes to issue Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    ClientEditEndEntityRequestDto:
      required:
      - password
      - raProfile
      - status
      - subjectDN
      type: object
      properties:
        raProfile:
          $ref: '#/components/schemas/RaProfileDto'
        email:
          type: string
          description: End Entity email
        extensionData:
          type: array
          description: End Entity extension data
          items:
            $ref: '#/components/schemas/EndEntityExtendedInfoDto'
        password:
          type: string
          description: End Entity password
        subjectAltName:
          type: string
          description: End Entity Subject alternative name
        subjectDN:
          type: string
          description: End Entity subject domain name
        status:
          type: string
          description: End Entity Subject domain name
          enum:
          - NEW
          - FAILED
          - INITIALIZED
          - IN_PROCESS
          - GENERATED
          - REVOKED
          - HISTORICAL
          - KEY_RECOVERY
          - WAITING_FOR_ADD_APPROVAL
    EndEntityExtendedInfoDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      description: End Entity extension data
    RaProfileDto:
      required:
      - attributes
      - authorityInstanceName
      - authorityInstanceUuid
      - enabled
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of RA Profile
        authorityInstanceUuid:
          type: string
          description: UUID of Authority provider
        authorityInstanceName:
          type: string
          description: Name of Authority instance
        attributes:
          type: array
          description: List of RA Profiles attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        enabledProtocols:
          type: array
          description: List of protocols enabled
          items:
            type: string
            description: List of protocols enabled
      description: RA profile related to End Entity
    ResponseAttributeDto:
      required:
      - label
      - name
      - type
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          type: string
          description: Type of the Attribute
          enum:
          - STRING
          - INTEGER
          - SECRET
          - FILE
          - BOOLEAN
          - CREDENTIAL
          - DATE
          - FLOAT
          - JSON
          - TEXT
          - TIME
          - DATETIME
        content:
          type: object
          description: Content of the Attribute
      description: List of RA Profiles attributes
    ClientAddEndEntityRequestDto:
      required:
      - password
      - raProfile
      - subjectDN
      - username
      type: object
      properties:
        raProfile:
          $ref: '#/components/schemas/RaProfileDto'
        email:
          type: string
          description: End Entity email
        extensionData:
          type: array
          description: End Entity extension data
          items:
            $ref: '#/components/schemas/EndEntityExtendedInfoDto'
        password:
          type: string
          description: End Entity password
        subjectAltName:
          type: string
          description: End Entity Subject alternative name
        subjectDN:
          type: string
          description: End Entity subject domain name
        username:
          type: string
          description: End Entity name
    ClientCertificateSignResponseDto:
      required:
      - certificateData
      type: object
      properties:
        certificateData:
          type: string
          description: Date of signed certificate
    AttributeCallback:
      required:
      - callbackContext
      - callbackMethod
      - mappings
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          uniqueItems: true
          type: array
          description: Mappings for the callback method
          items:
            $ref: '#/components/schemas/AttributeCallbackMapping'
      description: Optional definition of callback for getting the content of the
        Attribute based on the action
    AttributeCallbackMapping:
      required:
      - targets
      - to
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          type: string
          description: Type of the attribute. It is optional and must be set only
            if special behaviour is needed.
          enum:
          - STRING
          - INTEGER
          - SECRET
          - FILE
          - BOOLEAN
          - CREDENTIAL
          - DATE
          - FLOAT
          - JSON
          - TEXT
          - TIME
          - DATETIME
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          uniqueItems: true
          type: array
          description: Set of targets for propagating value.
          items:
            type: string
            description: Set of targets for propagating value.
            enum:
            - pathVariable
            - requestParameter
            - body
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      description: Mappings for the callback method
    AttributeDefinition:
      required:
      - label
      - list
      - multiSelect
      - name
      - readOnly
      - required
      - type
      - uuid
      - visible
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        content:
          type: object
          description: Content of the Attribute
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        type:
          type: string
          description: Type of the Attribute
          enum:
          - STRING
          - INTEGER
          - SECRET
          - FILE
          - BOOLEAN
          - CREDENTIAL
          - DATE
          - FLOAT
          - JSON
          - TEXT
          - TIME
          - DATETIME
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        validationRegex:
          type: string
          description: Optional regular expression used for validating the Attribute
            content
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
    ClientEndEntityDto:
      required:
      - status
      - subjectDN
      - username
      type: object
      properties:
        subjectDN:
          type: string
          description: End Entity subject domain name
        email:
          type: string
          description: End Entity email
        extensionData:
          type: array
          description: End Entity extension data
          items:
            $ref: '#/components/schemas/EndEntityExtendedInfoDto'
        subjectAltName:
          type: string
          description: End Entity Subject alternative name
        status:
          type: string
          description: End Entity Subject domain name
          enum:
          - NEW
          - FAILED
          - INITIALIZED
          - IN_PROCESS
          - GENERATED
          - REVOKED
          - HISTORICAL
          - KEY_RECOVERY
          - WAITING_FOR_ADD_APPROVAL
        username:
          type: string
          description: End Entity name
