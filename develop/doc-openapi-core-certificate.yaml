openapi: 3.0.1
info:
  title: CZERTAINLY Certificate API
  description: REST API for managing Certificates in the platform
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  version: 2.7.2-SNAPSHOT
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Certificate Inventory
  description: Certificate Inventory API
paths:
  /v1/certificates/{uuid}/validate:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate Validation Result
      operationId: getCertificateValidationResult
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Certificate validation detail retrieved
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/CertificateValidationDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
    put:
      tags:
      - Certificate Inventory
      summary: Initiate Certificate validation
      operationId: check
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate validation initiated
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/validate:
    put:
      tags:
      - Certificate Inventory
      summary: Validate Certificates of Status Unknown
      operationId: validateAllCertificate
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Certificate Validation Initiated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates:
    post:
      tags:
      - Certificate Inventory
      summary: List Certificates
      operationId: listCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: List of all the certificates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateResponseDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
    patch:
      tags:
      - Certificate Inventory
      summary: "Update RA Profile, Group, Owner for multiple Certificates"
      description: "In this operation, when the list of Certificate UUIDs are provided\
        \ and the filter is left as null or undefined, then the change will be applied\
        \ only to the list of Certificate UUIDs provided. When the filter is provided\
        \ in the request, the list of UUIDs will be ignored and the change will be\
        \ applied for the all the certificates that matches the filter criteria. To\
        \ apply this change for all the Certificates in the inventory, provide an\
        \ empty array \"[]\" for the value of \"filters\" in the request body"
      operationId: bulkUpdateCertificateObjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipleCertificateObjectUpdateDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "204":
          description: Certificate objects updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/upload:
    post:
      tags:
      - Certificate Inventory
      summary: Upload a new Certificate
      operationId: upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadCertificateRequestDto'
        required: true
      responses:
        "201":
          description: Certificate uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/delete:
    post:
      tags:
      - Certificate Inventory
      summary: Delete multiple certificates
      description: "In this operation, when the list of Certificate UUIDs are provided\
        \ and the filter is left as null or undefined, then the change will be applied\
        \ only to the list of Certificate UUIDs provided. When the filter is provided\
        \ in the request, the list of UUIDs will be ignored and the change will be\
        \ applied for the all the certificates that matches the filter criteria. To\
        \ apply this change for all the Certificates in the inventory, provide an\
        \ empty array \"[]\" for the value of \"filters\" in the request body"
      operationId: bulkDeleteCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCertificateDto'
        required: true
      responses:
        "200":
          description: Certificates deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/create:
    post:
      tags:
      - Certificate Inventory
      summary: Generate CSR Entity
      operationId: createCsr
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCertificateRequestDto'
        required: true
      responses:
        "200":
          description: CSR Generated and ready to be issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/content:
    post:
      tags:
      - Certificate Inventory
      summary: Get Certificate Content
      operationId: getCertificateContent
      requestBody:
        description: Certificate UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate content retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CertificateContentDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
  /v1/certificates/compliance:
    post:
      tags:
      - Certificate Inventory
      summary: Initiate Certificate Compliance Check
      operationId: checkCertificatesCompliance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateComplianceCheckDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Compliance check initiated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/{uuid}:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate Details
      operationId: getCertificate
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
    delete:
      tags:
      - Certificate Inventory
      summary: Delete a certificate
      operationId: deleteCertificate
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "204":
          description: Certificate deleted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
    patch:
      tags:
      - Certificate Inventory
      summary: Update Certificate Objects
      operationId: updateCertificateObjects
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateUpdateObjectsDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "204":
          description: Certificate objects updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/{uuid}/history:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate event history
      operationId: getCertificateEventHistory
      parameters:
      - name: uuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate event history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CertificateEventHistoryDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/{certificateUuid}/locations:
    get:
      tags:
      - Certificate Inventory
      summary: List of available Locations for the Certificate
      operationId: listCertificateLocations
      parameters:
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Locations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/search:
    get:
      tags:
      - Certificate Inventory
      summary: Get Certificate searchable fields information
      operationId: getSearchableFieldInformation
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate searchable field information retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchFieldDataByGroupDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/certificates/csr/attributes:
    get:
      tags:
      - Certificate Inventory
      summary: Get CSR Generation Attributes
      operationId: getCsrGenerationAttributes
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: CSR Generation attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
components:
  schemas:
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    AuthenticationServiceExceptionDto:
      required:
      - code
      - message
      - statusCode
      type: object
      properties:
        statusCode:
          type: integer
          description: Status code of the HTTP Request
          format: int32
        code:
          type: string
          description: Code of the result
        message:
          type: string
          description: Exception message
    SearchCondition:
      type: string
      description: Condition for the search
      enum:
      - EQUALS
      - NOT_EQUALS
      - GREATER
      - GREATER_OR_EQUAL
      - LESSER
      - LESSER_OR_EQUAL
      - CONTAINS
      - NOT_CONTAINS
      - STARTS_WITH
      - ENDS_WITH
      - EMPTY
      - NOT_EMPTY
      - SUCCESS
      - FAILED
      - UNKNOWN
      - NOT_CHECKED
    SearchFilterRequestDto:
      required:
      - condition
      - fieldIdentifier
      - searchGroup
      type: object
      properties:
        searchGroup:
          $ref: '#/components/schemas/SearchGroup'
        fieldIdentifier:
          type: string
          description: Field to search
        condition:
          $ref: '#/components/schemas/SearchCondition'
        value:
          type: object
          description: Value to match
      description: Certificate filter input
    SearchGroup:
      type: string
      description: Group to search
      enum:
      - meta
      - custom
      - property
    SearchRequestDto:
      type: object
      properties:
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: '#/components/schemas/SearchFilterRequestDto'
        itemsPerPage:
          maximum: 1000
          type: integer
          description: Number of entries per page
          format: int32
          default: 10
        pageNumber:
          type: integer
          description: Page number for the request
          format: int32
          default: 1
    AttributeCallback:
      required:
      - callbackContext
      - callbackMethod
      - mappings
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          uniqueItems: true
          type: array
          description: Mappings for the callback method
          items:
            $ref: '#/components/schemas/AttributeCallbackMapping'
      description: Optional definition of callback for getting the content of the
        Attribute based on the action
    AttributeCallbackMapping:
      required:
      - targets
      - to
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          $ref: '#/components/schemas/AttributeType'
        attributeContentType:
          $ref: '#/components/schemas/AttributeContentType'
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          uniqueItems: true
          type: array
          description: Set of targets for propagating value.
          items:
            $ref: '#/components/schemas/AttributeValueTarget'
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      description: Mappings for the callback method
    AttributeConstraintType:
      type: string
      description: Attribute Constraint Type
      enum:
      - regExp
      - range
      - dateTime
    AttributeContentType:
      type: string
      description: 'Type of the attribute content. '
      enum:
      - string
      - text
      - integer
      - boolean
      - float
      - date
      - time
      - datetime
      - secret
      - file
      - credential
      - codeblock
      - object
    AttributeType:
      type: string
      description: Type of the attribute. It is optional and must be set only if special
        behaviour is needed.
      enum:
      - data
      - group
      - info
      - meta
      - custom
    AttributeValueTarget:
      type: string
      description: Set of targets for propagating value.
      enum:
      - pathVariable
      - requestParameter
      - body
    BaseAttributeConstraint:
      required:
      - data
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          type: object
          description: Attribute Constraint Data
      description: Optional regular expressions and constraints used for validating
        the Attribute content
      oneOf:
      - $ref: '#/components/schemas/RegexpAttributeConstraint'
      - $ref: '#/components/schemas/RangeAttributeConstraint'
      - $ref: '#/components/schemas/DateTimeAttributeConstraint'
    BaseAttributeContentDto:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Content Data
      description: Base Attribute content definition
      oneOf:
      - $ref: '#/components/schemas/BooleanAttributeContent'
      - $ref: '#/components/schemas/CodeBlockAttributeContent'
      - $ref: '#/components/schemas/CredentialAttributeContent'
      - $ref: '#/components/schemas/DateAttributeContent'
      - $ref: '#/components/schemas/DateTimeAttributeContent'
      - $ref: '#/components/schemas/FileAttributeContent'
      - $ref: '#/components/schemas/FloatAttributeContent'
      - $ref: '#/components/schemas/IntegerAttributeContent'
      - $ref: '#/components/schemas/ObjectAttributeContent'
      - $ref: '#/components/schemas/SecretAttributeContent'
      - $ref: '#/components/schemas/StringAttributeContent'
      - $ref: '#/components/schemas/TextAttributeContent'
      - $ref: '#/components/schemas/TimeAttributeContent'
    BooleanAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: boolean
          description: Boolean attribute value
    CertificateDto:
      required:
      - commonName
      - keySize
      - privateKeyAvailability
      - publicKeyAlgorithm
      - signatureAlgorithm
      - status
      - subjectDn
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate serial number
        issuerCommonName:
          type: string
          description: Certificate issuer common name
        issuerDn:
          type: string
          description: Issuer DN of the Certificate
        subjectDn:
          type: string
          description: Subject DN of the Certificate
        notBefore:
          type: string
          description: Certificate validity start date
          format: date-time
        notAfter:
          type: string
          description: Certificate expiration date
          format: date-time
        publicKeyAlgorithm:
          type: string
          description: Public key algorithm
        signatureAlgorithm:
          type: string
          description: Certificate signature algorithm
        keySize:
          type: integer
          description: Certificate key size
          format: int32
        status:
          $ref: '#/components/schemas/CertificateStatus'
        raProfile:
          $ref: '#/components/schemas/SimplifiedRaProfileDto'
        fingerprint:
          type: string
          description: SHA256 fingerprint of the Certificate
        group:
          $ref: '#/components/schemas/GroupDto'
        owner:
          type: string
          description: Certificate Owner
        certificateType:
          $ref: '#/components/schemas/CertificateType'
        issuerSerialNumber:
          type: string
          description: Serial number of the issuer
        complianceStatus:
          $ref: '#/components/schemas/ComplianceStatus'
        privateKeyAvailability:
          type: boolean
          description: Private Key Availability
      description: Certificates
    CertificateResponseDto:
      required:
      - certificates
      - itemsPerPage
      - pageNumber
      - totalItems
      - totalPages
      type: object
      properties:
        certificates:
          type: array
          description: Certificates
          items:
            $ref: '#/components/schemas/CertificateDto'
        itemsPerPage:
          type: integer
          description: Number of entries per page
          format: int32
        pageNumber:
          type: integer
          description: Page number for the request
          format: int32
        totalPages:
          type: integer
          description: Number of pages available
          format: int32
        totalItems:
          type: integer
          description: Number of items available
          format: int64
    CertificateStatus:
      type: string
      description: Status of the Certificate
      enum:
      - unknown
      - new
      - valid
      - invalid
      - revoked
      - expiring
      - expired
    CertificateType:
      type: string
      description: Certificate type
      enum:
      - X.509
      - SSH
    CodeBlockAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/CodeBlockAttributeContentData'
    CodeBlockAttributeContentData:
      required:
      - code
      - language
      type: object
      properties:
        language:
          $ref: '#/components/schemas/ProgrammingLanguageEnum'
        code:
          type: string
          description: Block of the code in Base64. Formatting of the code is specified
            by variable language
      description: CodeBlock attribute content data
    ComplianceStatus:
      type: string
      description: Certificate compliance status
      enum:
      - ok
      - nok
      - na
    CredentialAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/CredentialAttributeContentData'
    CredentialAttributeContentData:
      required:
      - attributes
      - kind
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: '#/components/schemas/DataAttribute'
      description: Credential attribute content data
    DataAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/DataAttributeProperties'
        constraints:
          type: array
          description: Optional regular expressions and constraints used for validating
            the Attribute content
          items:
            $ref: '#/components/schemas/BaseAttributeConstraint'
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
      description: Data attribute allows to store and transfer dynamic data. Its content
        can be edited and send in requests to store.
    DataAttributeProperties:
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
      description: Properties of the Attributes
    DateAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Date attribute value in format yyyy-MM-dd
          format: date
    DateTimeAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          $ref: '#/components/schemas/DateTimeAttributeConstraintData'
    DateTimeAttributeConstraintData:
      type: object
      properties:
        from:
          type: string
          description: Start of the datetime for validation
          format: date-time
        to:
          type: string
          description: End of the datetime for validation
          format: date-time
      description: DateTime Range Attribute Constraint Data
    DateTimeAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: DateTime attribute value in format yyyy-MM-ddTHH:mm:ss.SSSXXX
          format: date-time
    FileAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/FileAttributeContentData'
    FileAttributeContentData:
      required:
      - content
      - fileName
      - mimeType
      type: object
      properties:
        content:
          type: string
          description: File content
        fileName:
          type: string
          description: Name of the file
        mimeType:
          type: string
          description: Type of the file uploaded
      description: File attribute content data
    FloatAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: number
          description: Float attribute value
          format: float
    GroupDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Certificate Group
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
      description: Group associated to the Certificate
    IntegerAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: integer
          description: Integer attribute value
          format: int32
    ObjectAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Object attribute content data
    ProgrammingLanguageEnum:
      type: string
      description: Definition of programming languages used for code
      example: "JAVA, PHP, C, etc"
      enum:
      - apacheconf
      - bash
      - basic
      - c
      - csharp
      - cpp
      - css
      - docker
      - fsharp
      - gherkin
      - git
      - go
      - graphql
      - html
      - http
      - ini
      - java
      - javascript
      - json
      - kotlin
      - latex
      - lisp
      - makefile
      - markdown
      - matlab
      - nginx
      - objectivec
      - perl
      - php
      - powershell
      - properties
      - python
      - ruby
      - rust
      - smalltalk
      - sql
      - typescript
      - vbnet
      - xquery
      - xml
      - yaml
    RangeAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          $ref: '#/components/schemas/RangeAttributeConstraintData'
    RangeAttributeConstraintData:
      type: object
      properties:
        from:
          type: integer
          description: Start of the range for validation
          format: int32
        to:
          type: integer
          description: End of the range for validation
          format: int32
      description: Integer Range Attribute Constraint Data
    RegexpAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          type: string
          description: Regular Expression Attribute Constraint Data
    ResponseAttributeDto:
      required:
      - contentType
      - label
      - name
      - type
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
      description: Response attribute with content for object it belongs to
    SecretAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/SecretAttributeContentData'
    SecretAttributeContentData:
      type: object
      properties:
        secret:
          type: string
          description: Secret attribute data
        protectionLevel:
          type: string
          description: Level of protection of the data
      description: Secret attribute content data
    SimplifiedRaProfileDto:
      required:
      - enabled
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        authorityInstanceUuid:
          type: string
          description: Authority Instance UUID
      description: RA Profile associated to the Certificate
    StringAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: String attribute value
    TextAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Text attribute value
    TimeAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Time attribute value in format HH:mm:ss
    RequestAttributeDto:
      required:
      - content
      - name
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
      description: Request attribute to send attribute content for object
    UploadCertificateRequestDto:
      required:
      - certificate
      - customAttributes
      type: object
      properties:
        certificate:
          type: string
          description: Base64 Content of the Certificate
        customAttributes:
          type: array
          description: Custom Attributes for the Certificate
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    UuidDto:
      required:
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
    RemoveCertificateDto:
      type: object
      properties:
        uuids:
          type: array
          description: List of Certificate UUIDs
          items:
            type: string
            description: List of Certificate UUIDs
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: '#/components/schemas/SearchFilterRequestDto'
    BulkOperationResponse:
      required:
      - failedItem
      - message
      - status
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          enum:
          - SUCCESS
          - FAILED
          - PARTIAL
        failedItem:
          type: integer
          description: Number of items failed
          format: int64
        message:
          type: string
          description: Message for the action
    ClientCertificateRequestDto:
      required:
      - pkcs10
      type: object
      properties:
        csrAttributes:
          type: array
          description: List of attributes to create CSR. Required if CSR is not provided
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        signatureAttributes:
          type: array
          description: List of attributes to sign the CSR
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        pkcs10:
          type: string
          description: Certificate sign request (PKCS#10) encoded as Base64 string
        tokenProfileUuid:
          type: string
          description: Token Profile UUID. Required if CSR is not uploaded
          format: uuid
        keyUuid:
          type: string
          description: Key UUID. Required if CSR is not uploaded
          format: uuid
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    CertificateComplianceResultDto:
      required:
      - connectorName
      - ruleDescription
      - ruleName
      - status
      type: object
      properties:
        connectorName:
          type: string
          description: Name of the Compliance Provider
          example: Provider1
        ruleName:
          type: string
          description: Name of the rule
          example: RuleName
        ruleDescription:
          type: string
          description: Description of the rule
          example: Description sample
        status:
          $ref: '#/components/schemas/ComplianceRuleStatus'
        attributes:
          type: array
          description: Attributes of the rule
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
      description: Certificate compliance check result
    CertificateDetailDto:
      required:
      - basicConstraints
      - certificateContent
      - commonName
      - keySize
      - keyUsage
      - privateKeyAvailability
      - publicKeyAlgorithm
      - signatureAlgorithm
      - status
      - subjectDn
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate serial number
        issuerCommonName:
          type: string
          description: Certificate issuer common name
        issuerDn:
          type: string
          description: Issuer DN of the Certificate
        subjectDn:
          type: string
          description: Subject DN of the Certificate
        notBefore:
          type: string
          description: Certificate validity start date
          format: date-time
        notAfter:
          type: string
          description: Certificate expiration date
          format: date-time
        publicKeyAlgorithm:
          type: string
          description: Public key algorithm
        signatureAlgorithm:
          type: string
          description: Certificate signature algorithm
        keySize:
          type: integer
          description: Certificate key size
          format: int32
        status:
          $ref: '#/components/schemas/CertificateStatus'
        raProfile:
          $ref: '#/components/schemas/SimplifiedRaProfileDto'
        fingerprint:
          type: string
          description: SHA256 fingerprint of the Certificate
        group:
          $ref: '#/components/schemas/GroupDto'
        owner:
          type: string
          description: Certificate Owner
        certificateType:
          $ref: '#/components/schemas/CertificateType'
        issuerSerialNumber:
          type: string
          description: Serial number of the issuer
        complianceStatus:
          $ref: '#/components/schemas/ComplianceStatus'
        privateKeyAvailability:
          type: boolean
          description: Private Key Availability
        extendedKeyUsage:
          type: array
          description: Extended key usages
          items:
            type: string
            description: Extended key usages
        keyUsage:
          type: array
          description: Key usages
          items:
            type: string
            description: Key usages
        basicConstraints:
          type: string
          description: Basic Constraints
        metadata:
          type: array
          description: Certificate metadata
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
        certificateContent:
          type: string
          description: Base64 encoded Certificate content
        subjectAlternativeNames:
          type: object
          additionalProperties:
            type: object
            description: Subject alternative names
          description: Subject alternative names
        locations:
          uniqueItems: true
          type: array
          description: Locations associated to the Certificate
          items:
            $ref: '#/components/schemas/LocationDto'
        nonCompliantRules:
          type: array
          description: Certificate compliance check result
          items:
            $ref: '#/components/schemas/CertificateComplianceResultDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        csr:
          type: string
          description: CSR for the certificate
        csrAttributes:
          type: array
          description: CSR Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        signatureAttributes:
          type: array
          description: Signature Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        key:
          $ref: '#/components/schemas/KeyDto'
    CertificateInLocationDto:
      required:
      - certificateUuid
      - commonName
      - metadata
      - serialNumber
      type: object
      properties:
        certificateUuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Common Name of the Subject DN field of the Certificate
        serialNumber:
          type: string
          description: Serial number in HEX of the Certificate
        metadata:
          type: array
          description: Metadata of the Certificate in Location
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
        pushAttributes:
          type: array
          description: Applied push attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        csrAttributes:
          type: array
          description: Applied issue attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        withKey:
          type: boolean
          description: If the Certificate in Location has associated private key
          default: false
      description: List of Certificates in Location
    ComplianceRuleStatus:
      type: string
      description: Status of the rule
      example: nok
      enum:
      - ok
      - nok
      - na
    CryptographicAlgorithm:
      type: string
      description: Key Algorithm
      enum:
      - RSA
      - ECDSA
      - FALCON
      - CRYSTALS-Dilithium
      - SPHINCS+
    KeyDto:
      required:
      - creationTime
      - description
      - items
      - name
      - tokenInstanceName
      - tokenInstanceUuid
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
          format: date-time
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
        owner:
          type: string
          description: Owner of the Key
        group:
          $ref: '#/components/schemas/GroupDto'
        items:
          type: array
          description: Key Items
          items:
            $ref: '#/components/schemas/KeyItemDto'
        associations:
          type: integer
          description: Number of associated objects
          format: int32
      description: Key Pair of the certificate
    KeyFormat:
      type: string
      description: Key Format
      enum:
      - Raw
      - SubjectPublicKeyInfo
      - PrivateKeyInfo
      - EncryptedPrivateKeyInfo
      - Custom
    KeyItemDto:
      required:
      - creationTime
      - cryptographicAlgorithm
      - description
      - enabled
      - keyReferenceUuid
      - keyWrapperUuid
      - name
      - state
      - tokenInstanceName
      - tokenInstanceUuid
      - type
      - usage
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
          format: date-time
        keyWrapperUuid:
          type: string
          description: UUID of the wrapper object
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
        owner:
          type: string
          description: Owner of the Key
        group:
          $ref: '#/components/schemas/GroupDto'
        associations:
          type: integer
          description: Number of associated objects
          format: int32
        keyReferenceUuid:
          type: string
          description: UUID of the key item in the Connector
        type:
          $ref: '#/components/schemas/KeyType'
        cryptographicAlgorithm:
          $ref: '#/components/schemas/CryptographicAlgorithm'
        format:
          $ref: '#/components/schemas/KeyFormat'
        length:
          type: integer
          description: Key Length
          format: int32
        usage:
          type: array
          description: Key Usages
          items:
            $ref: '#/components/schemas/KeyUsage'
        enabled:
          type: boolean
          description: Boolean describing if the key is enabled or not
        state:
          $ref: '#/components/schemas/KeyState'
      description: Key Items
    KeyState:
      type: string
      description: Key State
      enum:
      - pre-active
      - active
      - deactivated
      - compromised
      - destroyed
      - compromisedDestroyed
    KeyType:
      type: string
      description: Type of the Key
      enum:
      - secret
      - public
      - private
      - split
    KeyUsage:
      type: string
      description: Key Usages
      enum:
      - sign
      - verify
      - encrypt
      - decrypt
      - wrap
      - unwrap
    LocationDto:
      required:
      - attributes
      - certificates
      - enabled
      - entityInstanceName
      - entityInstanceUuid
      - name
      - supportKeyManagement
      - supportMultipleEntries
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Location
        entityInstanceUuid:
          type: string
          description: UUID of Entity instance
        entityInstanceName:
          type: string
          description: Name of Entity instance
        attributes:
          type: array
          description: List of Location attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        supportMultipleEntries:
          type: boolean
          description: If the location supports multiple Certificates
          default: false
        supportKeyManagement:
          type: boolean
          description: If the location supports key management operations
          default: false
        certificates:
          type: array
          description: List of Certificates in Location
          items:
            $ref: '#/components/schemas/CertificateInLocationDto'
        metadata:
          type: array
          description: Location metadata
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
      description: Locations associated to the Certificate
    MetadataResponseDto:
      required:
      - connectorName
      - connectorUuid
      - items
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Connector
        connectorName:
          type: string
          description: Name of the Connector
        items:
          type: array
          description: List of Metadata
          items:
            $ref: '#/components/schemas/ResponseMetadataDto'
      description: Metadata response attributes with their source connector
    NameAndUuidDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
      description: Source Objects
    ResponseMetadataDto:
      required:
      - contentType
      - label
      - name
      - type
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        sourceObjectType:
          type: string
          description: Source Object Type
        sourceObjects:
          type: array
          description: Source Objects
          items:
            $ref: '#/components/schemas/NameAndUuidDto'
      description: Response metadata attribute instance with content
    CertificateContentDto:
      required:
      - certificateContent
      - commonName
      - serialNumber
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Certificate common name
        serialNumber:
          type: string
          description: Certificate serial number
        certificateContent:
          type: string
          description: Base64 encoded Certificate content
    CertificateComplianceCheckDto:
      type: object
      properties:
        certificateUuids:
          type: array
          description: List of UUIDs of the Certificates
          items:
            type: string
            description: List of UUIDs of the Certificates
    MultipleCertificateObjectUpdateDto:
      type: object
      properties:
        raProfileUuid:
          type: string
          description: UUID of the RA Profile
        groupUuid:
          type: string
          description: UUID of the Certificate Group
        owner:
          type: string
          description: Certificate Owner
        certificateUuids:
          type: array
          description: List of Certificate UUIDs
          items:
            type: string
            description: List of Certificate UUIDs
        filters:
          type: array
          description: Certificate filter input
          items:
            $ref: '#/components/schemas/SearchFilterRequestDto'
    CertificateUpdateObjectsDto:
      type: object
      properties:
        raProfileUuid:
          type: string
          description: RA Profile UUID
        groupUuid:
          type: string
          description: Group UUID
        owner:
          type: string
          description: Certificate Owner
    CertificateValidationDto:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CertificateValidationStatus'
        message:
          type: string
    CertificateValidationStatus:
      type: string
      enum:
      - success
      - failed
      - warning
      - revoked
      - not_checked
      - invalid
      - expiring
      - expired
    CertificateEventHistoryDto:
      required:
      - certificateUuid
      - created
      - createdBy
      - event
      - message
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the event
        certificateUuid:
          type: string
          description: UUID of the Certificate
        created:
          type: string
          description: Event creation time
          format: date-time
        createdBy:
          type: string
          description: Created By
        event:
          type: string
          description: Event type
          enum:
          - Issue Certificate
          - Create CSR
          - Renew Certificate
          - Revoke Certificate
          - Delete Certificate
          - Update RA Profile
          - Update Entity
          - Update Group
          - Update Owner
          - Upload Certificate
          - Certificate Discovered
          - Update Location
        status:
          type: string
          description: Event result
          enum:
          - SUCCESS
          - FAILED
        message:
          type: string
          description: Event message
        additionalInformation:
          type: object
          additionalProperties:
            type: object
            description: Additional information for the event
          description: Additional information for the event
    PlatformEnum:
      type: string
      description: Platform enum of the field values
      enum:
      - Resource
      - SearchCondition
      - SearchableFieldType
      - SearchGroup
      - SettingsSection
      - AuthType
      - HealthStatus
      - ConnectorStatus
      - FunctionGroupCode
      - CertificateType
      - CertificateStatus
      - CertificateValidationStatus
      - DiscoveryStatus
      - CryptographicAlgorithm
      - KeyFormat
      - KeyState
      - KeyType
      - KeyUsage
      - KeyRequestType
      - KeyCompromiseReason
      - TokenInstanceStatus
      - ComplianceStatus
      - ComplianceRuleStatus
      - AccountStatus
      - AttributeType
      - AttributeContentType
      - AttributeConstraintType
      - AttributeValueTarget
      - ProgrammingLanguageEnum
    SearchFieldDataByGroupDto:
      required:
      - searchGroup
      type: object
      properties:
        searchGroup:
          $ref: '#/components/schemas/SearchGroup'
        searchFieldData:
          type: array
          description: List of search fields for specified search group
          items:
            $ref: '#/components/schemas/SearchFieldDataDto'
    SearchFieldDataDto:
      required:
      - conditions
      - fieldIdentifier
      - fieldLabel
      - type
      type: object
      properties:
        fieldIdentifier:
          type: string
          description: Identifier of field to search
        fieldLabel:
          type: string
          description: Label for the field
        type:
          $ref: '#/components/schemas/SearchableFieldType'
        conditions:
          type: array
          description: List of available conditions for the field
          items:
            $ref: '#/components/schemas/SearchCondition'
        platformEnum:
          $ref: '#/components/schemas/PlatformEnum'
        value:
          type: object
          description: Available values for the field
        multiValue:
          type: boolean
          description: "Multivalue flag. true = yes, false = no"
      description: List of search fields for specified search group
    SearchableFieldType:
      type: string
      description: Type of the field
      enum:
      - string
      - number
      - list
      - date
      - datetime
      - boolean
    BaseAttributeDto:
      required:
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        type:
          $ref: '#/components/schemas/AttributeType'
        content:
          type: object
          description: Content of the Attribute
      description: Base Attribute definition
      discriminator:
        propertyName: type
        mapping:
          data: '#/components/schemas/DataAttribute'
          info: '#/components/schemas/InfoAttribute'
          group: '#/components/schemas/GroupAttribute'
          meta: '#/components/schemas/MetadataAttribute'
          custom: '#/components/schemas/CustomAttribute'
      oneOf:
      - $ref: '#/components/schemas/DataAttribute'
      - $ref: '#/components/schemas/InfoAttribute'
      - $ref: '#/components/schemas/GroupAttribute'
      - $ref: '#/components/schemas/MetadataAttribute'
      - $ref: '#/components/schemas/CustomAttribute'
    CustomAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/CustomAttributeProperties'
      description: Custom attribute allows to store and transfer dynamic data. Its
        content can be edited and send in requests to store.
    CustomAttributeProperties:
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
      description: Properties of the Attributes
    GroupAttribute:
      required:
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: List of all different types of attributes
          items:
            $ref: '#/components/schemas/BaseAttributeDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
      description: Group attribute and its content represents dynamic list of additional
        attributes retrieved by callback. Its content can not be edited and is not
        send in requests to store.
    InfoAttribute:
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/InfoAttributeProperties'
      description: Info attribute contains content that is for information purpose
        or represents additional information for object (metadata). Its content can
        not be edited and is not send in requests to store.
    InfoAttributeProperties:
      required:
      - label
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      description: Properties of the Attributes
    MetadataAttribute:
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/MetadataAttributeProperties'
      description: Info attribute contains content that is for metadata. Its content
        can not be edited and is not send in requests to store.
    MetadataAttributeProperties:
      required:
      - label
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        global:
          type: boolean
          description: Boolean determining if the Metadata is a global metadata.
          default: false
      description: Properties of the Attributes
