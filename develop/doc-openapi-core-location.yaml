openapi: 3.0.1
info:
  title: CZERTAINLY Location API
  description: REST API for managing Locations in the platform
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Location Management API
  description: Location Management API
paths:
  /v1/entities/{entityUuid}/locations/{locationUuid}/sync:
    put:
      tags:
      - Location Management API
      summary: Sync Location content
      operationId: updateLocationContent
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Content updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}/certificates/{certificateUuid}:
    put:
      tags:
      - Location Management API
      summary: Push Certificate to Location
      operationId: pushCertificate
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushToLocationRequestDto'
        required: true
      responses:
        "200":
          description: Certificate pushed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
    delete:
      tags:
      - Location Management API
      summary: Remove Certificate from Location
      operationId: removeCertificate
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
    patch:
      tags:
      - Location Management API
      summary: Renew Certificate in Location
      operationId: renewCertificateInLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      - name: certificateUuid
        in: path
        description: Certificate UUID
        required: true
        schema:
          type: string
      responses:
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Content updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
  /v1/entities/{entityUuid}/locations/{locationUuid}:
    get:
      tags:
      - Location Management API
      summary: Get Location Details
      operationId: getLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Location detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
    put:
      tags:
      - Location Management API
      summary: Edit Location
      operationId: editLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditLocationRequestDto'
        required: true
      responses:
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "204":
          description: Location updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
    delete:
      tags:
      - Location Management API
      summary: Delete Location
      operationId: deleteLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Location deleted
        "500":
          description: Internal Server Error
  /v1/entities/{entityUuid}/locations/{locationUuid}/certificates:
    post:
      tags:
      - Location Management API
      summary: Issue Certificate to Location
      operationId: issueCertificate
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueToLocationRequestDto'
        required: true
      responses:
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Certificate issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        "500":
          description: Internal Server Error
  /v1/entities/{entityUuid}/locations:
    post:
      tags:
      - Location Management API
      summary: Add Location
      operationId: addLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddLocationRequestDto'
        required: true
      responses:
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "201":
          description: Location added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UuidDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
  /v1/entities/{entityUuid}/locations/{locationUuid}/enable:
    patch:
      tags:
      - Location Management API
      summary: Enable Location
      operationId: enableLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "204":
          description: Location enabled
  /v1/entities/{entityUuid}/locations/{locationUuid}/disable:
    patch:
      tags:
      - Location Management API
      summary: Disable Location
      operationId: disableLocation
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Location disabled
        "503":
          description: Connector Communication Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
  /v1/locations:
    get:
      tags:
      - Location Management API
      summary: List Locations
      operationId: listLocations
      parameters:
      - name: enabled
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Locations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
  /v1/entities/{entityUuid}/locations/{locationUuid}/attributes/push:
    get:
      tags:
      - Location Management API
      summary: Get push Attributes
      operationId: listPushAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/BaseAttributeObject'
                  - $ref: '#/components/schemas/DataAttribute'
                  - $ref: '#/components/schemas/GroupAttribute'
                  - $ref: '#/components/schemas/InfoAttribute'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
  /v1/entities/{entityUuid}/locations/{locationUuid}/attributes/issue:
    get:
      tags:
      - Location Management API
      summary: Get CSR Attributes
      operationId: listCsrAttributes
      parameters:
      - name: entityUuid
        in: path
        description: Entity UUID
        required: true
        schema:
          type: string
      - name: locationUuid
        in: path
        description: Location UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Attributes list obtained
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/BaseAttributeObject'
                  - $ref: '#/components/schemas/DataAttribute'
                  - $ref: '#/components/schemas/GroupAttribute'
                  - $ref: '#/components/schemas/InfoAttribute'
        "503":
          description: Connector Communication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "502":
          description: Connector Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
components:
  schemas:
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    BaseAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Content Data
      description: Content of the Attribute
    CertificateInLocationDto:
      required:
      - certificateUuid
      - commonName
      - metadata
      - serialNumber
      type: object
      properties:
        certificateUuid:
          type: string
          description: UUID of the Certificate
        commonName:
          type: string
          description: Common Name of the Subject DN field of the Certificate
        serialNumber:
          type: string
          description: Serial number in HEX of the Certificate
        metadata:
          type: object
          additionalProperties:
            type: object
            description: Metadata of the Certificate in Location
          description: Metadata of the Certificate in Location
        pushAttributes:
          type: array
          description: Applied push attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        csrAttributes:
          type: array
          description: Applied issue attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        withKey:
          type: boolean
          description: If the Certificate in Location has associated private key
          default: false
      description: List of Certificates in Location
    LocationDto:
      required:
      - attributes
      - certificates
      - enabled
      - entityInstanceName
      - entityInstanceUuid
      - name
      - supportKeyManagement
      - supportMultipleEntries
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Location
        entityInstanceUuid:
          type: string
          description: UUID of Entity instance
        entityInstanceName:
          type: string
          description: Name of Entity instance
        attributes:
          type: array
          description: List of Location attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
        supportMultipleEntries:
          type: boolean
          description: If the location supports multiple Certificates
          default: false
        supportKeyManagement:
          type: boolean
          description: If the location supports key management operations
          default: false
        certificates:
          type: array
          description: List of Certificates in Location
          items:
            $ref: '#/components/schemas/CertificateInLocationDto'
        metadata:
          type: object
          additionalProperties:
            type: object
            description: Location metadata
          description: Location metadata
    RequestAttributeDto:
      required:
      - content
      - name
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContent'
      description: Applied issue attributes
    ResponseAttributeDto:
      required:
      - contentType
      - label
      - name
      - type
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          type: string
          description: Type of the Attribute
          enum:
          - data
          - group
          - info
        contentType:
          type: string
          description: Content Type of the Attribute
          example: Attribute
          enum:
          - string
          - integer
          - secret
          - file
          - boolean
          - credential
          - date
          - float
          - object
          - text
          - time
          - datetime
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContent'
      description: List of Location attributes
    PushToLocationRequestDto:
      required:
      - attributes
      type: object
      properties:
        attributes:
          type: array
          description: List of push Attributes for Location
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    EditLocationRequestDto:
      required:
      - attributes
      type: object
      properties:
        description:
          type: string
          description: Description of the Location
        attributes:
          type: array
          description: List of Attributes for Location
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
    IssueToLocationRequestDto:
      required:
      - csrAttributes
      - issueAttributes
      - raProfileUuid
      type: object
      properties:
        raProfileUuid:
          type: string
          description: RA Profile UUID
        csrAttributes:
          type: array
          description: List of CSR Attributes for Location
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        issueAttributes:
          type: array
          description: List of certificate issue Attributes for RA Profile
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    AddLocationRequestDto:
      required:
      - attributes
      - name
      type: object
      properties:
        name:
          type: string
          description: Location name
        description:
          type: string
          description: Location description
        attributes:
          type: array
          description: List of Attributes to register Location
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        enabled:
          type: boolean
          description: Enabled flag - true = enabled; false = disabled
          default: false
    UuidDto:
      required:
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
    AttributeCallback:
      required:
      - callbackContext
      - callbackMethod
      - mappings
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          uniqueItems: true
          type: array
          description: Mappings for the callback method
          items:
            $ref: '#/components/schemas/AttributeCallbackMapping'
      description: Optional definition of callback for getting the content of the
        Attribute based on the action
    AttributeCallbackMapping:
      required:
      - targets
      - to
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          type: string
          description: Type of the attribute. It is optional and must be set only
            if special behaviour is needed.
          enum:
          - data
          - group
          - info
        attributeContentType:
          type: string
          description: 'Type of the attribute content. '
          enum:
          - string
          - integer
          - secret
          - file
          - boolean
          - credential
          - date
          - float
          - object
          - text
          - time
          - datetime
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          uniqueItems: true
          type: array
          description: Set of targets for propagating value.
          items:
            type: string
            description: Set of targets for propagating value.
            enum:
            - pathVariable
            - requestParameter
            - body
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      description: Mappings for the callback method
    BaseAttribute:
      required:
      - content
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          items:
            type: object
            description: Content of the Attribute
        type:
          type: string
          description: Type of the Attribute
          default: DATA
          enum:
          - data
          - group
          - info
      description: Content of the Attribute
      discriminator:
        propertyName: type
    BaseAttributeConstraint:
      required:
      - data
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          type: string
          description: Attribute Constraint Type
          enum:
          - REGEXP
          - RANGE
          - DATETIME
        data:
          type: object
          description: Attribute Constraint Data
      description: Optional regular expressions and constraints used for validating
        the Attribute content
    BaseAttributeObject:
      required:
      - content
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          items:
            type: object
            description: Content of the Attribute
        type:
          type: string
          description: Type of the Attribute
          default: DATA
          enum:
          - data
          - group
          - info
      discriminator:
        propertyName: type
    DataAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseAttributeObject'
      - type: object
        properties:
          content:
            type: array
            description: Content of the Attribute
            items:
              $ref: '#/components/schemas/BaseAttributeContent'
          contentType:
            type: string
            description: Type of the Content
            enum:
            - string
            - integer
            - secret
            - file
            - boolean
            - credential
            - date
            - float
            - object
            - text
            - time
            - datetime
          properties:
            $ref: '#/components/schemas/DataAttributeProperties'
          constraints:
            type: array
            description: Optional regular expressions and constraints used for validating
              the Attribute content
            items:
              $ref: '#/components/schemas/BaseAttributeConstraint'
          attributeCallback:
            $ref: '#/components/schemas/AttributeCallback'
      - $ref: '#/components/schemas/BaseAttribute'
    DataAttributeProperties:
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
      description: Properties of the Attributes
    GroupAttribute:
      required:
      - content
      - contentType
      - name
      - type
      - uuid
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseAttributeObject'
      - type: object
        properties:
          content:
            type: array
            description: Content of the Attribute
            items:
              $ref: '#/components/schemas/BaseAttribute'
          contentType:
            type: string
            description: Type of the Content
            enum:
            - string
            - integer
            - secret
            - file
            - boolean
            - credential
            - date
            - float
            - object
            - text
            - time
            - datetime
          attributeCallback:
            $ref: '#/components/schemas/AttributeCallback'
    InfoAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseAttribute'
      - type: object
        properties:
          content:
            type: array
            description: Content of the Attribute
            items:
              $ref: '#/components/schemas/BaseAttributeContent'
          contentType:
            type: string
            description: Type of the Content
            enum:
            - string
            - integer
            - secret
            - file
            - boolean
            - credential
            - date
            - float
            - object
            - text
            - time
            - datetime
          properties:
            $ref: '#/components/schemas/InfoAttributeProperties'
      - $ref: '#/components/schemas/BaseAttributeObject'
    InfoAttributeProperties:
      required:
      - label
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      description: Properties of the Attributes
