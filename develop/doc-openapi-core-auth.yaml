openapi: 3.0.1
info:
  title: CZERTAINLY Auth API
  description: "REST API for managing user, roles, and permissions in the platform"
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  version: 1.5.1-SNAPSHOT
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Authentication Management API
  description: Authentication Management API
- name: User Management API
  description: User Management API
- name: Role Management API
  description: Role Management API
paths:
  /v1/users/{userUuid}/roles/{roleUuid}:
    put:
      tags:
      - User Management API
      summary: Add role to User
      operationId: addRole
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    delete:
      tags:
      - User Management API
      summary: Remove role from User
      operationId: removeRole
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: User roles removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
  /v1/users/{userUuid}:
    get:
      tags:
      - User Management API
      summary: Get user details
      operationId: getUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    put:
      tags:
      - User Management API
      summary: Update User
      operationId: updateUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    delete:
      tags:
      - User Management API
      summary: Delete User
      operationId: deleteUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "204":
          description: User deleted
  /v1/roles/{roleUuid}/permissions/{resourceUuid}/objects/{objectUuid}:
    put:
      tags:
      - Role Management API
      summary: Update Resource Objects to a Role
      operationId: updateResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectPermissionsRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Resource Objects added
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    delete:
      tags:
      - Role Management API
      summary: Update Resource Objects to a Role
      operationId: removeResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      - name: objectUuid
        in: path
        description: Object UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Resource Objects added
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/roles/{roleUuid}:
    get:
      tags:
      - Role Management API
      summary: Get role details
      operationId: getRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: Role details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailDto'
    put:
      tags:
      - Role Management API
      summary: Update Role
      operationId: updateRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Role details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    delete:
      tags:
      - Role Management API
      summary: Delete Role
      operationId: deleteRole
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "204":
          description: Role deleted
  /v1/auth/profile:
    get:
      tags:
      - Authentication Management API
      summary: Profile Authorization
      operationId: profile
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: Authenticate a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
    put:
      tags:
      - Authentication Management API
      summary: Update User Profile
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: Authenticate a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
  /v1/users:
    get:
      tags:
      - User Management API
      summary: List Users
      operationId: listUsers
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: List of users fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    post:
      tags:
      - User Management API
      summary: Create User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "201":
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/roles/{roleUuid}/permissions/{resourceUuid}/objects:
    get:
      tags:
      - Role Management API
      summary: Get Resource Objects of a Role
      operationId: getResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Resource Objects retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectPermissionsDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    post:
      tags:
      - Role Management API
      summary: Add Resource Objects to a Role
      operationId: addResourcePermissionObjects
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ObjectPermissionsRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Resource Objects added
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/roles/{roleUuid}/permissions:
    get:
      tags:
      - Role Management API
      summary: Get Permissions of a Role
      operationId: getRolePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: Role permissions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectPermissionsDto'
    post:
      tags:
      - Role Management API
      summary: Add permissions to Role
      operationId: savePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePermissionsRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectPermissionsDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/roles:
    get:
      tags:
      - Role Management API
      summary: List Roles
      operationId: listRoles
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: List of roles fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    post:
      tags:
      - Role Management API
      summary: Create Role
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "201":
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailDto'
  /v1/users/{userUuid}/roles:
    get:
      tags:
      - User Management API
      summary: Get User Roles
      operationId: getUserRoles
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "200":
          description: User roles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'
    patch:
      tags:
      - User Management API
      summary: Add roles to User
      operationId: updateRoles
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Role UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/users/{userUuid}/enable:
    patch:
      tags:
      - User Management API
      summary: Enable User
      operationId: enableUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "200":
          description: User enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "401":
          description: Unauthorized
  /v1/users/{userUuid}/disable:
    patch:
      tags:
      - User Management API
      summary: Disable User
      operationId: disableUser
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: User disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/roles/{roleUuid}/users:
    get:
      tags:
      - Role Management API
      summary: Get Role Users
      operationId: getRoleUsers
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Role users retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
    patch:
      tags:
      - Role Management API
      summary: Add users to Role
      operationId: updateUsers
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      requestBody:
        description: User UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Role users updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/users/{userUuid}/permissions:
    get:
      tags:
      - User Management API
      summary: Get User permissions
      operationId: getPermissions
      parameters:
      - name: userUuid
        in: path
        description: User UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User permissions removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectPermissionsDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
  /v1/roles/{roleUuid}/permissions/{resourceUuid}:
    get:
      tags:
      - Role Management API
      summary: Get Resources of a Role
      operationId: getRoleResourcePermissions
      parameters:
      - name: roleUuid
        in: path
        description: Role UUID
        required: true
        schema:
          type: string
      - name: resourceUuid
        in: path
        description: Resource UUID
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "500":
          description: Internal Server Error
        "200":
          description: Role resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePermissionsDto'
        "401":
          description: Unauthorized
  /v1/auth/resources:
    get:
      tags:
      - Authentication Management API
      summary: Get all Resources
      operationId: getAllResources
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "200":
          description: Resources retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceDetailDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
components:
  schemas:
    AuthenticationServiceExceptionDto:
      required:
      - code
      - message
      - statusCode
      type: object
      properties:
        statusCode:
          type: integer
          description: Status code of the HTTP Request
          format: int32
        code:
          type: string
          description: Code of the result
        message:
          type: string
          description: Exception message
    RoleDto:
      required:
      - name
      - systemRole
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the user
        systemRole:
          type: boolean
          description: "Is system role. True = Yes, False = No"
      description: Roles for the user
    UserCertificateDto:
      required:
      - fingerprint
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the certificate
        fingerprint:
          type: string
          description: Fingerprint of the certificate
      description: User Certificate details
    UserDetailDto:
      required:
      - enabled
      - roles
      - systemUser
      - username
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the User
          example: 5b5f0784-2519-11ed-861d-0242ac120002
        username:
          type: string
          description: Username of the user
          example: user1
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        description:
          type: string
          description: Description of the user
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        systemUser:
          type: boolean
          description: "Is System user. True = Yes, False = No"
        certificate:
          $ref: '#/components/schemas/UserCertificateDto'
        roles:
          type: array
          description: Roles for the user
          items:
            $ref: '#/components/schemas/RoleDto'
    UpdateUserRequestDto:
      required:
      - email
      type: object
      properties:
        description:
          type: string
          description: Description of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        certificateData:
          type: string
          description: Base64 Content of the admin certificate
        certificateUuid:
          type: string
          description: UUID of the existing certificate in the Inventory. Mandatory
            if certificate is not provided
    ObjectPermissionsRequestDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Object
        name:
          type: string
          description: Name of the Object
        allow:
          type: array
          description: Allowed Action list
          items:
            type: string
            description: Allowed Action list
        deny:
          type: array
          description: Denied Action list
          items:
            type: string
            description: Denied Action list
    RoleRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the role
        description:
          type: string
          description: Description for the role
    RoleDetailDto:
      required:
      - name
      - systemRole
      - users
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the user
        systemRole:
          type: boolean
          description: "Is system role. True = Yes, False = No"
        users:
          type: array
          description: List of Users with the role
          items:
            $ref: '#/components/schemas/UserDto'
    UserDto:
      required:
      - enabled
      - systemUser
      - username
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the User
          example: 5b5f0784-2519-11ed-861d-0242ac120002
        username:
          type: string
          description: Username of the user
          example: user1
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        description:
          type: string
          description: Description of the user
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        systemUser:
          type: boolean
          description: "Is System user. True = Yes, False = No"
      description: List of Users with the role
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    AddUserRequestDto:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: user1
        description:
          type: string
          description: Description of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        enabled:
          type: boolean
          description: "Status of the user. True = Enabled, False = Disabled"
        certificateData:
          type: string
          description: Base64 Content of the user certificate
        certificateUuid:
          type: string
          description: UUID of the existing certificate in the Inventory
    ResourcePermissionsRequestDto:
      required:
      - allowAllActions
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Resource
        allowAllActions:
          type: boolean
          description: "Allow all actions. True = Yes, False = No"
        actions:
          type: array
          description: List of actions permitted
          items:
            type: string
            description: List of actions permitted
        objects:
          type: array
          description: Object permissions
          items:
            $ref: '#/components/schemas/ObjectPermissionsRequestDto'
      description: Resources
    RolePermissionsRequestDto:
      required:
      - allowAllResources
      type: object
      properties:
        allowAllResources:
          type: boolean
          description: "Allow all resources, True = Yes, False = No"
        resources:
          type: array
          description: Resources
          items:
            $ref: '#/components/schemas/ResourcePermissionsRequestDto'
    ObjectPermissionsDto:
      required:
      - allow
      - deny
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Object
        name:
          type: string
          description: Name of the Object
        allow:
          type: array
          description: Allowed Action list
          items:
            type: string
            description: Allowed Action list
        deny:
          type: array
          description: Denied Action list
          items:
            type: string
            description: Denied Action list
      description: Object permissions
    ResourcePermissionsDto:
      required:
      - actions
      - allowAllActions
      - name
      - objects
      type: object
      properties:
        name:
          type: string
          description: Name of the Resource
        allowAllActions:
          type: boolean
          description: "Allow all actions. True = Yes, False = No"
        actions:
          type: array
          description: List of actions permitted
          items:
            type: string
            description: List of actions permitted
        objects:
          type: array
          description: Object permissions
          items:
            $ref: '#/components/schemas/ObjectPermissionsDto'
      description: Resources
    SubjectPermissionsDto:
      required:
      - allowAllResources
      - resources
      type: object
      properties:
        allowAllResources:
          type: boolean
          description: "Allow all resources, True = Yes, False = No"
        resources:
          type: array
          description: Resources
          items:
            $ref: '#/components/schemas/ResourcePermissionsDto'
    ActionDto:
      required:
      - displayName
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        displayName:
          type: string
          description: Resource label
      description: List of Actions for the Resource
    ResourceDetailDto:
      required:
      - actions
      - displayName
      - name
      - objectAccess
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        displayName:
          type: string
          description: Resource label
        listObjectsEndpoint:
          type: string
          description: Listing Endpoint
        objectAccess:
          type: boolean
          description: "If resource has Object access permissions. True = Yes, False\
            \ = No"
        actions:
          type: array
          description: List of Actions for the Resource
          items:
            $ref: '#/components/schemas/ActionDto'
