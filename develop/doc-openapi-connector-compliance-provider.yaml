openapi: 3.0.1
info:
  title: CZERTAINLY Compliance Provider API
  description: REST API for implementations of custom Compliance Provider
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Info API
  description: "Connector Information API. Each connector may have multiple functions\
    \ represented by FunctionGroupCode. For each FunctionGroupCode there is a list\
    \ of implemented end points. These endpoints must be according the specified interface,\
    \ this is validated by the core. You can also implement helper end points that\
    \ are used for callbacks and other relevant operations specific to implementation."
- name: Compliance Rules API
  description: "Compliance Provider rules API. Used to get the list of rules provided\
    \ by the connector. These rules will be made available for the users to choose\
    \ from the list.To check for the compliance of a certificate, the Connector accepts\
    \ certificate content and the list of rule references. Once the values are received,\
    \ compliance is checked based on the rules."
- name: Attributes API
  description: Connector Attributes API. Provides information about supported Attributes
    of the connector. Attributes are specific to implementation and gives information
    about the data that can be exchanged and properly parsed by the connector. Part
    of this API is validation of the Attributes.
- name: Health check API
  description: "Connector Health check API. Connector returns own status and in some\
    \ cases can return status of services on which it depends like database, HSM and\
    \ so on."
- name: Compliance API
  description: "Compliance Provider API. Used to check the compliance of a certificate.\
    \ The provider contains the list of rules for checking the compliance. The user\
    \ can choose the list of compliance checks has to be performed. To check for the\
    \ compliance of a certificate, the Connector accepts certificate content and the\
    \ list of rule references. Once the values are received, compliance is checked\
    \ and status will be returned"
paths:
  /v1/{functionalGroup}/{kind}/attributes/validate:
    post:
      tags:
      - Attributes API
      summary: Validate Attributes
      operationId: validateAttributes
      parameters:
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestAttributeDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Attribute validation failed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Attribute validation completed
        "500":
          description: Internal Server Error
  /v1/complianceProvider/{kind}/compliance:
    post:
      tags:
      - Compliance API
      summary: Check certificate compliance
      operationId: checkCompliance
      parameters:
      - name: kind
        in: path
        description: Connector Kind
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplianceRequestDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
        "200":
          description: Compliance check completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceResponseDto'
        "500":
          description: Internal Server Error
  /v1/{functionalGroup}/{kind}/attributes:
    get:
      tags:
      - Attributes API
      summary: List available Attributes
      operationId: listAttributeDefinitions
      parameters:
      - name: kind
        in: path
        description: Kind
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/BaseAttributeObject'
                  - $ref: '#/components/schemas/DataAttribute'
                  - $ref: '#/components/schemas/GroupAttribute'
                  - $ref: '#/components/schemas/InfoAttribute'
        "500":
          description: Internal Server Error
  /v1/health:
    get:
      tags:
      - Health check API
      summary: Health check
      operationId: checkHealth
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Health check completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthDto'
        "500":
          description: Internal Server Error
  /v1/complianceProvider/{kind}/rules:
    get:
      tags:
      - Compliance Rules API
      summary: Get list of rules
      operationId: getRules
      parameters:
      - name: kind
        in: path
        description: Connector kind
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Rules retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComplianceRulesResponseDto'
  /v1/complianceProvider/{kind}/groups/{uuid}:
    get:
      tags:
      - Compliance Rules API
      summary: Get list of rules for a group
      operationId: getGroupRules
      parameters:
      - name: kind
        in: path
        description: Connector kind
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Group kind
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Rules retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComplianceRulesResponseDto'
  /v1/complianceProvider/{kind}/groups:
    get:
      tags:
      - Compliance Rules API
      summary: Get list of groups
      operationId: getGroups
      parameters:
      - name: kind
        in: path
        description: Connector kind
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Groups retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComplianceGroupsResponseDto'
  /v1:
    get:
      tags:
      - Info API
      summary: List supported functions of the connector
      description: Returns map of functional code and implemented end points
      operationId: listSupportedFunctions
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "500":
          description: Internal Server Error
        "200":
          description: Functions found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InfoResponse'
components:
  schemas:
    BaseAttributeContent:
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Content Data
      description: Content of the Attribute
    RequestAttributeDto:
      required:
      - content
      - name
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContent'
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    ComplianceRequestDto:
      required:
      - certificate
      type: object
      properties:
        certificate:
          type: string
          description: Base64 encoded Certificate content
        rules:
          type: array
          description: List of UUIDs of Compliance rules
          items:
            $ref: '#/components/schemas/ComplianceRequestRulesDto'
    ComplianceRequestRulesDto:
      required:
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the rule
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        attributes:
          type: array
          description: Attributes for the rule
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
      description: List of UUIDs of Compliance rules
    ComplianceResponseDto:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: Status of the compliance check
          example: ok
          enum:
          - ok
          - nok
          - na
        rules:
          type: array
          description: List of rules applied and their status
          items:
            $ref: '#/components/schemas/ComplianceResponseRulesDto'
    ComplianceResponseRulesDto:
      required:
      - name
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the rule
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the rule
          example: Rule1
        status:
          type: string
          description: Rule status
          example: ok
          enum:
          - ok
          - nok
          - na
      description: List of rules applied and their status
    AttributeCallback:
      required:
      - callbackContext
      - callbackMethod
      - mappings
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          uniqueItems: true
          type: array
          description: Mappings for the callback method
          items:
            $ref: '#/components/schemas/AttributeCallbackMapping'
      description: Optional definition of callback for getting the content of the
        Attribute based on the action
    AttributeCallbackMapping:
      required:
      - targets
      - to
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          type: string
          description: Type of the attribute. It is optional and must be set only
            if special behaviour is needed.
          enum:
          - data
          - group
          - info
        attributeContentType:
          type: string
          description: 'Type of the attribute content. '
          enum:
          - string
          - integer
          - secret
          - file
          - boolean
          - credential
          - date
          - float
          - object
          - text
          - time
          - datetime
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          uniqueItems: true
          type: array
          description: Set of targets for propagating value.
          items:
            type: string
            description: Set of targets for propagating value.
            enum:
            - pathVariable
            - requestParameter
            - body
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      description: Mappings for the callback method
    BaseAttribute:
      required:
      - content
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          items:
            type: object
            description: Content of the Attribute
        type:
          type: string
          description: Type of the Attribute
          default: DATA
          enum:
          - data
          - group
          - info
      description: Content of the Attribute
      discriminator:
        propertyName: type
    BaseAttributeConstraint:
      required:
      - data
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          type: string
          description: Attribute Constraint Type
          enum:
          - REGEXP
          - RANGE
          - DATETIME
        data:
          type: object
          description: Attribute Constraint Data
      description: Optional regular expressions and constraints used for validating
        the Attribute content
    BaseAttributeObject:
      required:
      - content
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          items:
            type: object
            description: Content of the Attribute
        type:
          type: string
          description: Type of the Attribute
          default: DATA
          enum:
          - data
          - group
          - info
      discriminator:
        propertyName: type
    DataAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseAttributeObject'
      - type: object
        properties:
          content:
            type: array
            description: Content of the Attribute
            items:
              $ref: '#/components/schemas/BaseAttributeContent'
          contentType:
            type: string
            description: Type of the Content
            enum:
            - string
            - integer
            - secret
            - file
            - boolean
            - credential
            - date
            - float
            - object
            - text
            - time
            - datetime
          properties:
            $ref: '#/components/schemas/DataAttributeProperties'
          constraints:
            type: array
            description: Optional regular expressions and constraints used for validating
              the Attribute content
            items:
              $ref: '#/components/schemas/BaseAttributeConstraint'
          attributeCallback:
            $ref: '#/components/schemas/AttributeCallback'
      - $ref: '#/components/schemas/BaseAttribute'
    DataAttributeProperties:
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
      description: Properties of the Attributes
    GroupAttribute:
      required:
      - content
      - contentType
      - name
      - type
      - uuid
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseAttributeObject'
      - type: object
        properties:
          content:
            type: array
            description: Content of the Attribute
            items:
              $ref: '#/components/schemas/BaseAttribute'
          contentType:
            type: string
            description: Type of the Content
            enum:
            - string
            - integer
            - secret
            - file
            - boolean
            - credential
            - date
            - float
            - object
            - text
            - time
            - datetime
          attributeCallback:
            $ref: '#/components/schemas/AttributeCallback'
    InfoAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseAttribute'
      - type: object
        properties:
          content:
            type: array
            description: Content of the Attribute
            items:
              $ref: '#/components/schemas/BaseAttributeContent'
          contentType:
            type: string
            description: Type of the Content
            enum:
            - string
            - integer
            - secret
            - file
            - boolean
            - credential
            - date
            - float
            - object
            - text
            - time
            - datetime
          properties:
            $ref: '#/components/schemas/InfoAttributeProperties'
      - $ref: '#/components/schemas/BaseAttributeObject'
    InfoAttributeProperties:
      required:
      - label
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      description: Properties of the Attributes
    HealthDto:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: Current connector operational status
          enum:
          - ok
          - nok
          - unknown
        description:
          type: string
          description: Detailed status description
        parts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/HealthDto'
          description: Nested status of services
    ComplianceRulesResponseDto:
      required:
      - certificateType
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the rule
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        groupUuid:
          type: string
          description: UUID of the group to which the rule belongs to
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the rule
          example: Rule1
        certificateType:
          type: string
          description: Type of the certificate to which this rule can be applied
          example: X509
          enum:
          - X509
          - SSH
        attributes:
          type: array
          description: Rule attributes
          items:
            oneOf:
            - $ref: '#/components/schemas/BaseAttribute'
            - $ref: '#/components/schemas/DataAttribute'
            - $ref: '#/components/schemas/GroupAttribute'
            - $ref: '#/components/schemas/InfoAttribute'
        description:
          type: string
          description: Description of the rule
          example: Sample rule description
    ComplianceGroupsResponseDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the group
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the group
          example: RFC
        description:
          type: string
          description: Description of the group
          example: Sample description of the group
    EndpointDto:
      required:
      - context
      - method
      - name
      - required
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        context:
          type: string
          description: Context of the Endpoint
          example: /v1
        method:
          type: string
          description: Method to be used for the Endpoint
          example: POST
        required:
          type: boolean
          description: True if the Endpoint is required for implementation
          example: true
      description: List of end points related to functional group
    InfoResponse:
      required:
      - endPoints
      - functionGroupCode
      - kinds
      type: object
      properties:
        functionGroupCode:
          type: string
          description: Enumerated code of functional group
          enum:
          - credentialProvider
          - legacyAuthorityProvider
          - authorityProvider
          - discoveryProvider
          - entityProvider
          - complianceProvider
        kinds:
          type: array
          description: List of supported functional group kinds
          example:
          - SoftKeyStore
          - Basic
          - ApiKey
          items:
            type: string
            description: List of supported functional group kinds
            example: "[\"SoftKeyStore\",\"Basic\",\"ApiKey\"]"
        endPoints:
          type: array
          description: List of end points related to functional group
          items:
            $ref: '#/components/schemas/EndpointDto'
