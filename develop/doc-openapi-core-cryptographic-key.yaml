openapi: 3.0.1
info:
  title: CZERTAINLY Cryptographic Key API
  description: REST API for managing keys in the platform
  contact:
    name: CZERTAINLY
    url: https://www.czertainly.com
    email: getinfo@czertainly.com
  license:
    name: MIT License
    url: https://github.com/3KeyCompany/CZERTAINLY/blob/develop/LICENSE.md
  version: 1.5.1-SNAPSHOT
  x-logo:
    url: images/czertainly_color_H.svg
externalDocs:
  description: CZERTAINLY Documentation
  url: https://docs.czertainly.com
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Cryptographic Key Controller
  description: Cryptographic Key Controller API
paths:
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Cryptographic Key Detail
      operationId: getKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: UUID of the Key
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
        "200":
          description: Cryptographic Key Detail retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyDetailDto'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
    put:
      tags:
      - Cryptographic Key Controller
      summary: Edit Key
      operationId: editKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditKeyRequestDto'
        required: true
      responses:
        "204":
          description: Key updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyDetailDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Cryptographic Key
      description: "If the request body provided, only those key items will be deleted.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be destroyed"
      operationId: deleteKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "500":
          description: Internal Server Error
        "204":
          description: Key deleted
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/usages:
    put:
      tags:
      - Cryptographic Key Controller
      summary: Update Key Usage
      description: "If the request body provided, only those key items will be updated.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be updated"
      operationId: updateKeyUsages
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyUsageRequestDto'
        required: true
      responses:
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Keys Usages Updates
  /v1/keys/usages:
    put:
      tags:
      - Cryptographic Key Controller
      summary: Update Key Usages for Multiple Keys
      description: Update the key usages for multiple keys and all the items inside
        it
      operationId: updateKeysUsages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkKeyUsageRequestDto'
        required: true
      responses:
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "204":
          description: Keys Usages Updated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{type}:
    post:
      tags:
      - Cryptographic Key Controller
      summary: Create a new Cryptographic Key
      operationId: createKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: UUID of the Token Instance
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: UUID of the Token Profile
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: Type of the key to be created
        required: true
        schema:
          type: string
          enum:
          - secret
          - keyPair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyRequestDto'
        required: true
      responses:
        "201":
          description: Cryptographic Key Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyDetailDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "422":
          description: Unprocessible Entity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - Error Message 1
              - Error Message 2
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/enable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Enable Key
      description: "If the request body provided, only those key items will be enabled.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be enabled"
      operationId: enableKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "204":
          description: Key enabled
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/disable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Disable Key
      description: "If the request body provided, only those key items will be disabled.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be disabled"
      operationId: disableKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Key disabled
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/destroy:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Destroy Cryptographic Key
      description: "If the request body provided, only those key items will be destroyed.\
        \ If the request body is not provided or given empty, then the entire key\
        \ will be destroyed"
      operationId: destroyKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "500":
          description: Internal Server Error
        "204":
          description: Keys destroyed
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/compromise:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Mark Key and its Items as Compromised
      description: "If the request body is provided with the UUID of the items of\
        \ Key, then only those itemswill be compromised. Else all the sub items of\
        \ the key will be compromised"
      operationId: compromiseKey
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      requestBody:
        description: Key Item UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
      responses:
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Key marked as compromised
  /v1/keys/enable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Enable multiple Keys
      operationId: enableKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Keys enabled
  /v1/keys/disable:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Disable multiple Keys
      operationId: disableKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "500":
          description: Internal Server Error
        "204":
          description: Keys disabled
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/keys/destroy:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Destroy Multiple Cryptographic Key and its items
      operationId: destroyKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "500":
          description: Internal Server Error
        "204":
          description: Keys destroyed
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/keys/compromise:
    patch:
      tags:
      - Cryptographic Key Controller
      summary: Mark Multiple Key and its Items as Compromised
      description: This API can be used to mark multiple keys and its sub items to
        be marked as compromised.Specific part of the key cannot be mentioned in this
        API
      operationId: compromiseKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Key marked as compromised
  /v1/tokens/{tokenInstanceUuid}/tokenProfiles/{tokenProfileUuid}/keys/{type}/attributes:
    get:
      tags:
      - Cryptographic Key Controller
      summary: List of Attributes to create a Key
      operationId: listCreateKeyAttributes
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: tokenProfileUuid
        in: path
        description: Token Profile UUID
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: Type of the key to be created
        required: true
        schema:
          type: string
          enum:
          - secret
          - keyPair
      responses:
        "200":
          description: List of Attributes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseAttributeDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/tokens/{tokenInstanceUuid}/keys/{uuid}/items/{keyItemUuid}/history:
    get:
      tags:
      - Cryptographic Key Controller
      summary: Get Key Item event history
      operationId: getEventHistory
      parameters:
      - name: tokenInstanceUuid
        in: path
        description: Token Instance UUID
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: Key UUID
        required: true
        schema:
          type: string
      - name: keyItemUuid
        in: path
        description: Key Item UUID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Certificate event history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeyEventHistoryDto'
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
  /v1/keys:
    get:
      tags:
      - Cryptographic Key Controller
      summary: List Cryptographic Keys
      operationId: listKeys
      parameters:
      - name: tokenProfileUuid
        in: query
        required: false
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "200":
          description: Cryptographic Keys retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeyDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
    delete:
      tags:
      - Cryptographic Key Controller
      summary: Delete Multiple Cryptographic Key
      operationId: deleteKeys
      requestBody:
        description: Key UUIDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - c2f685d4-6a3e-11ec-90d6-0242ac120003
            - b9b09548-a97c-4c6a-a06a-e4ee6fc2da98
        required: true
      responses:
        "500":
          description: Internal Server Error
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationServiceExceptionDto'
        "204":
          description: Keys deleted
components:
  schemas:
    AttributeCallback:
      required:
      - callbackContext
      - callbackMethod
      - mappings
      type: object
      properties:
        callbackContext:
          type: string
          description: Context part of callback URL
        callbackMethod:
          type: string
          description: HTTP method of the callback
        mappings:
          uniqueItems: true
          type: array
          description: Mappings for the callback method
          items:
            $ref: '#/components/schemas/AttributeCallbackMapping'
      description: Optional definition of callback for getting the content of the
        Attribute based on the action
    AttributeCallbackMapping:
      required:
      - targets
      - to
      type: object
      properties:
        from:
          type: string
          description: Name of the attribute whose value is to be used as value of
            path variable or request param or body field.It is optional and must be
            set only if value is not set.
        attributeType:
          $ref: '#/components/schemas/AttributeType'
        attributeContentType:
          $ref: '#/components/schemas/AttributeContentType'
        to:
          type: string
          description: Name of the path variable or request param or body field which
            is to be used to assign value of attribute
        targets:
          uniqueItems: true
          type: array
          description: Set of targets for propagating value.
          items:
            $ref: '#/components/schemas/AttributeValueTarget'
        value:
          type: object
          description: Static value to be propagated to targets. It is optional and
            is set only if the value is known at attribute creation time.
      description: Mappings for the callback method
    AttributeConstraintType:
      type: string
      description: Attribute Constraint Type
      enum:
      - regExp
      - range
      - dateTime
    AttributeContentType:
      type: string
      description: 'Type of the attribute content. '
      enum:
      - string
      - integer
      - secret
      - file
      - boolean
      - credential
      - date
      - float
      - object
      - text
      - time
      - datetime
    AttributeType:
      type: string
      description: Type of the attribute. It is optional and must be set only if special
        behaviour is needed.
      enum:
      - data
      - group
      - info
      - meta
      - custom
    AttributeValueTarget:
      type: string
      description: Set of targets for propagating value.
      enum:
      - pathVariable
      - requestParameter
      - body
    BaseAttributeConstraint:
      required:
      - data
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          type: object
          description: Attribute Constraint Data
      description: Optional regular expressions and constraints used for validating
        the Attribute content
      oneOf:
      - $ref: '#/components/schemas/RegexpAttributeConstraint'
      - $ref: '#/components/schemas/RangeAttributeConstraint'
      - $ref: '#/components/schemas/DateTimeAttributeConstraint'
    BaseAttributeContentDto:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Content Data
      description: Base Attribute content definition
      oneOf:
      - $ref: '#/components/schemas/BooleanAttributeContent'
      - $ref: '#/components/schemas/CredentialAttributeContent'
      - $ref: '#/components/schemas/DateAttributeContent'
      - $ref: '#/components/schemas/DateTimeAttributeContent'
      - $ref: '#/components/schemas/FileAttributeContent'
      - $ref: '#/components/schemas/FloatAttributeContent'
      - $ref: '#/components/schemas/IntegerAttributeContent'
      - $ref: '#/components/schemas/ObjectAttributeContent'
      - $ref: '#/components/schemas/SecretAttributeContent'
      - $ref: '#/components/schemas/StringAttributeContent'
      - $ref: '#/components/schemas/TextAttributeContent'
      - $ref: '#/components/schemas/TimeAttributeContent'
    BooleanAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: boolean
          description: Boolean attribute value
    CredentialAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/CredentialAttributeContentData'
    CredentialAttributeContentData:
      required:
      - attributes
      - kind
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        kind:
          type: string
          description: Credential Kind
          example: "SoftKeyStore, Basic, ApiKey, etc"
        attributes:
          type: array
          description: List of Credential Attributes
          items:
            $ref: '#/components/schemas/DataAttribute'
      description: Credential attribute content data
    DataAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/DataAttributeProperties'
        constraints:
          type: array
          description: Optional regular expressions and constraints used for validating
            the Attribute content
          items:
            $ref: '#/components/schemas/BaseAttributeConstraint'
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
      description: Data attribute allows to store and transfer dynamic data. Its content
        can be edited and send in requests to store.
    DataAttributeProperties:
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
      description: Properties of the Attributes
    DateAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Date attribute value in format yyyy-MM-dd
          format: date
    DateTimeAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          $ref: '#/components/schemas/DateTimeAttributeConstraintData'
    DateTimeAttributeConstraintData:
      type: object
      properties:
        from:
          type: string
          description: Start of the datetime for validation
          format: date-time
        to:
          type: string
          description: End of the datetime for validation
          format: date-time
      description: DateTime Range Attribute Constraint Data
    DateTimeAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: DateTime attribute value in format yyyy-MM-ddTHH:mm:ss.SSSXXX
          format: date-time
    EditKeyRequestDto:
      required:
      - description
      - name
      - tokenProfileUuid
      type: object
      properties:
        tokenProfileUuid:
          type: string
          description: UUID of the token profile
        name:
          type: string
          description: Name of the Cryptographic Key
        description:
          type: string
          description: Description of the Cryptographic Key
        owner:
          type: string
          description: Key Owner
        groupUuid:
          type: string
          description: UUID of the group
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    FileAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/FileAttributeContentData'
    FileAttributeContentData:
      required:
      - content
      - fileName
      - mimeType
      type: object
      properties:
        content:
          type: string
          description: File content
        fileName:
          type: string
          description: Name of the file
        mimeType:
          $ref: '#/components/schemas/MimeType'
      description: File attribute content data
    FloatAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: number
          description: Float attribute value
          format: float
    IntegerAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: integer
          description: Integer attribute value
          format: int32
    MimeType:
      type: object
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
        subtypeSuffix:
          type: string
        concrete:
          type: boolean
        charset:
          type: string
      description: Type of the file uploaded
    ObjectAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: object
          description: Object attribute content data
    RangeAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          $ref: '#/components/schemas/RangeAttributeConstraintData'
    RangeAttributeConstraintData:
      type: object
      properties:
        from:
          type: integer
          description: Start of the range for validation
          format: int32
        to:
          type: integer
          description: End of the range for validation
          format: int32
      description: Integer Range Attribute Constraint Data
    RegexpAttributeConstraint:
      required:
      - type
      type: object
      properties:
        description:
          type: string
          description: Description of the constraint
        errorMessage:
          type: string
          description: Error message to be displayed for wrong data
        type:
          $ref: '#/components/schemas/AttributeConstraintType'
        data:
          type: string
          description: Regular Expression Attribute Constraint Data
    RequestAttributeDto:
      required:
      - content
      - name
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
      description: Request attribute to send attribute content for object
    SecretAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          $ref: '#/components/schemas/SecretAttributeContentData'
    SecretAttributeContentData:
      type: object
      properties:
        secret:
          type: string
          description: Secret attribute data
        protectionLevel:
          type: string
          description: Level of protection of the data
      description: Secret attribute content data
    StringAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: String attribute value
    TextAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Text attribute value
    TimeAttributeContent:
      required:
      - data
      type: object
      properties:
        reference:
          type: string
          description: Content Reference
        data:
          type: string
          description: Time attribute value in format HH:mm:ss
    ErrorMessageDto:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Error message detail
          example: Error message
    AuthenticationServiceExceptionDto:
      required:
      - code
      - message
      - statusCode
      type: object
      properties:
        statusCode:
          type: integer
          description: Status code of the HTTP Request
          format: int32
        code:
          type: string
          description: Code of the result
        message:
          type: string
          description: Exception message
    CryptographicAlgorithm:
      type: string
      description: Key Algorithm
      enum:
      - RSA
      - ECDSA
      - FALCON
      - CRYSTALS-Dilithium
      - SPHINCS+
    GroupDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Certificate Group
        customAttributes:
          type: array
          description: List of Custom Attributes
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
      description: Key Group
    KeyDetailDto:
      required:
      - attributes
      - creationTime
      - cryptographicAlgorithm
      - description
      - items
      - name
      - tokenInstanceName
      - tokenInstanceUuid
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
          format: date-time
        cryptographicAlgorithm:
          $ref: '#/components/schemas/CryptographicAlgorithm'
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
        customAttributes:
          type: array
          description: Custom Attributes for the Cryptographic Key
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        attributes:
          type: array
          description: Attributes for the Cryptographic Key
          items:
            $ref: '#/components/schemas/ResponseAttributeDto'
        owner:
          type: string
          description: Owner of the Key
        group:
          $ref: '#/components/schemas/GroupDto'
        items:
          type: array
          description: Key Objects
          items:
            $ref: '#/components/schemas/KeyItemDto'
    KeyFormat:
      type: string
      description: Key Format
      enum:
      - Raw
      - SubjectPublicKeyInfo
      - PrivateKeyInfo
      - EncryptedPrivateKeyInfo
      - Custom
    KeyItemDto:
      required:
      - cryptographicAlgorithm
      - enabled
      - keyReferenceUuid
      - name
      - state
      - type
      - usage
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        keyReferenceUuid:
          type: string
          description: UUID of the key item in the Connector
        type:
          $ref: '#/components/schemas/KeyType'
        cryptographicAlgorithm:
          $ref: '#/components/schemas/CryptographicAlgorithm'
        format:
          $ref: '#/components/schemas/KeyFormat'
        length:
          type: integer
          description: Key Length
          format: int32
        metadata:
          type: array
          description: Metadata for the key
          items:
            $ref: '#/components/schemas/MetadataResponseDto'
        usage:
          type: array
          description: Key Usages
          items:
            type: string
            description: Key Usages
        enabled:
          type: boolean
          description: Boolean describing if the key is enabled or not
        state:
          type: string
          description: Key State
          enum:
          - secret
          - keyPair
          - deactivated
          - compromised
          - destroyed
          - compromisedDestroyed
      description: Key Objects
    KeyType:
      type: string
      description: Type of the Key
      enum:
      - Secret key
      - Public key
      - Private key
      - Split key
    MetadataResponseDto:
      required:
      - connectorName
      - connectorUuid
      - items
      type: object
      properties:
        connectorUuid:
          type: string
          description: UUID of the Connector
        connectorName:
          type: string
          description: Name of the Connector
        items:
          type: array
          description: List of Metadata
          items:
            $ref: '#/components/schemas/ResponseMetadataDto'
      description: Metadata response attributes with their source connector
    NameAndUuidDto:
      required:
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
      description: Source Objects
    ResponseAttributeDto:
      required:
      - contentType
      - label
      - name
      - type
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
      description: Response attribute with content for object it belongs to
    ResponseMetadataDto:
      required:
      - contentType
      - label
      - name
      - type
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute
          example: Attribute
        label:
          type: string
          description: Label of the the Attribute
          example: Attribute Name
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        sourceObjectType:
          type: string
          description: Source Object Type
        sourceObjects:
          type: array
          description: Source Objects
          items:
            $ref: '#/components/schemas/NameAndUuidDto'
      description: Response metadata attribute instance with content
    KeyUsage:
      type: string
      description: Usages for the Key
      enum:
      - sign
      - verify
      - encrypt
      - decrypt
      - wrap
      - unwrap
    UpdateKeyUsageRequestDto:
      required:
      - usage
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
        uuids:
          type: array
          description: "List of UUIDs of the key Items. If not provided, the usage\
            \ will be updated to all the itemsin the key"
          items:
            type: string
            description: "List of UUIDs of the key Items. If not provided, the usage\
              \ will be updated to all the itemsin the key"
            format: uuid
    BulkKeyUsageRequestDto:
      required:
      - usage
      - uuids
      type: object
      properties:
        usage:
          type: array
          description: Usages for the Key
          items:
            $ref: '#/components/schemas/KeyUsage'
        uuids:
          type: array
          description: Key UUIDs
          items:
            type: string
            description: Key UUIDs
            format: uuid
    KeyRequestDto:
      required:
      - attributes
      - description
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Cryptographic Key
        description:
          type: string
          description: Description of the Cryptographic Key
        owner:
          type: string
          description: Key Owner
        groupUuid:
          type: string
          description: UUID of the group
        attributes:
          type: array
          description: List of Attributes to create a Key
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
        customAttributes:
          type: array
          description: Custom Attributes for the key
          items:
            $ref: '#/components/schemas/RequestAttributeDto'
    BaseAttributeDto:
      required:
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        type:
          $ref: '#/components/schemas/AttributeType'
        content:
          type: object
          description: Content of the Attribute
      description: Base Attribute definition
      discriminator:
        propertyName: type
        mapping:
          data: '#/components/schemas/DataAttribute'
          info: '#/components/schemas/InfoAttribute'
          group: '#/components/schemas/GroupAttribute'
          meta: '#/components/schemas/MetadataAttribute'
          custom: '#/components/schemas/CustomAttribute'
      oneOf:
      - $ref: '#/components/schemas/DataAttribute'
      - $ref: '#/components/schemas/InfoAttribute'
      - $ref: '#/components/schemas/GroupAttribute'
      - $ref: '#/components/schemas/MetadataAttribute'
      - $ref: '#/components/schemas/CustomAttribute'
    CustomAttribute:
      required:
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/CustomAttributeProperties'
      description: Custom attribute allows to store and transfer dynamic data. Its
        content can be edited and send in requests to store.
    CustomAttributeProperties:
      required:
      - label
      - list
      - multiSelect
      - readOnly
      - required
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        required:
          type: boolean
          description: "Boolean determining if the Attribute is required. If true,\
            \ the Attribute must be provided."
          default: false
        readOnly:
          type: boolean
          description: "Boolean determining if the Attribute is read only. If true,\
            \ the Attribute content cannot be changed."
          default: false
        list:
          type: boolean
          description: Boolean determining if the Attribute contains list of values
            in the content
          default: false
        multiSelect:
          type: boolean
          description: Boolean determining if the Attribute can have multiple values
          default: false
      description: Properties of the Attributes
    GroupAttribute:
      required:
      - name
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: List of all different types of attributes
          items:
            $ref: '#/components/schemas/BaseAttributeDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        attributeCallback:
          $ref: '#/components/schemas/AttributeCallback'
      description: Group attribute and its content represents dynamic list of additional
        attributes retrieved by callback. Its content can not be edited and is not
        send in requests to store.
    InfoAttribute:
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/InfoAttributeProperties'
      description: Info attribute contains content that is for information purpose
        or represents additional information for object (metadata). Its content can
        not be edited and is not send in requests to store.
    InfoAttributeProperties:
      required:
      - label
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
      description: Properties of the Attributes
    MetadataAttribute:
      required:
      - content
      - contentType
      - name
      - properties
      - type
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the Attribute for unique identification
          example: 166b5cf52-63f2-11ec-90d6-0242ac120003
        name:
          type: string
          description: Name of the Attribute that is used for identification
          example: Attribute
        description:
          type: string
          description: "Optional description of the Attribute, should contain helper\
            \ text on what is expected"
        content:
          type: array
          description: Content of the Attribute
          items:
            $ref: '#/components/schemas/BaseAttributeContentDto'
        type:
          $ref: '#/components/schemas/AttributeType'
        contentType:
          $ref: '#/components/schemas/AttributeContentType'
        properties:
          $ref: '#/components/schemas/MetadataAttributeProperties'
      description: Info attribute contains content that is for metadata. Its content
        can not be edited and is not send in requests to store.
    MetadataAttributeProperties:
      required:
      - label
      - visible
      type: object
      properties:
        label:
          type: string
          description: Friendly name of the the Attribute
          example: Attribute Name
        visible:
          type: boolean
          description: "Boolean determining if the Attribute is visible and can be\
            \ displayed, otherwise it should be hidden to the user."
          default: true
        group:
          type: string
          description: "Group of the Attribute, used for the logical grouping of the\
            \ Attribute"
          example: requiredAttributes
        global:
          type: boolean
          description: Boolean determining if the Metadata is a global metadata.
          default: false
      description: Properties of the Attributes
    KeyEventHistoryDto:
      required:
      - created
      - createdBy
      - event
      - keyUuid
      - message
      - status
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the event
        keyUuid:
          type: string
          description: UUID of the Key
        created:
          type: string
          description: Event creation time
          format: date-time
        createdBy:
          type: string
          description: Created By
        event:
          type: string
          description: Event type
          enum:
          - Create Key
          - Compromised Key
          - Destroy Key
          - Update Key Usages
          - Sign Data
          - Verify Data
          - Encrypt Data
          - Decrypt Data
          - Enable Key
          - Disable Key
        status:
          type: string
          description: Event result
          enum:
          - SUCCESS
          - FAILED
        message:
          type: string
          description: Event message
        additionalInformation:
          type: object
          additionalProperties:
            type: object
            description: Additional information for the event
          description: Additional information for the event
    KeyDto:
      required:
      - creationTime
      - cryptographicAlgorithm
      - description
      - name
      - tokenInstanceName
      - tokenInstanceUuid
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: Object identifier
          example: 7b55ge1c-844f-11dc-a8a3-0242ac120002
        name:
          type: string
          description: Object Name
          example: Name
        description:
          type: string
          description: Description of the Key
        creationTime:
          type: string
          description: "Creation time of the Key. If the key is discovered from the\
            \ connector, then it will be returned"
          format: date-time
        cryptographicAlgorithm:
          $ref: '#/components/schemas/CryptographicAlgorithm'
        tokenProfileUuid:
          type: string
          description: UUID of the Token Profile
        tokenProfileName:
          type: string
          description: Name of the Token Profile
        tokenInstanceUuid:
          type: string
          description: Token Instance UUID
        tokenInstanceName:
          type: string
          description: Token Instance Name
